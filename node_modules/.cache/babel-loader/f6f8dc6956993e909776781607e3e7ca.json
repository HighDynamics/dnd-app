{"ast":null,"code":"var _jsxFileName = \"/home/highdynamics/repos/dnd_app/src/components/Spells.js\";\nimport React, { useContext } from \"react\";\nimport { Character, ToggleInfo, Selection, GetSetDisplayTwo, PrimaryModifier, totalSpells } from \"./dnd.js\";\n\nconst KnownSpells = props => {\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  const [selection, setSelection] = useContext(Selection);\n  const spell = props.value;\n  const formattedSpell = spell.replace(/_/g, \" \");\n  const buttonAndSpellClass = \"spellButtons \" + spell;\n\n  function displayInfo(spell) {\n    setToggleInfo(\"Spell\");\n    setSelection(spell);\n  }\n\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: buttonAndSpellClass,\n    onClick: () => displayInfo(spell),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, formattedSpell + \" \\u221e\");\n};\n\nconst Spells = props => {\n  const character = useContext(Character);\n  const primaryModifier = useContext(PrimaryModifier);\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo);\n  console.log(primaryModifier); //cantrips or orisons? or both?\n\n  function casterType() {\n    if (character.magic.type.arcane && character.magic.type.divine) {\n      return \"Cantrips & Orisons\";\n    } else if (character.magic.type.divine) {\n      return \"Orisons\";\n    } else if (character.magic.type.arcane) {\n      return \"Cantrips\";\n    }\n  }\n\n  function displaySpells(level) {\n    const spells = Object.values(character.magic.spells[level]).map(s => /*#__PURE__*/React.createElement(KnownSpells, {\n      key: s,\n      value: s,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }));\n    return spells;\n  } //condense spell block into function\n\n\n  function spellCodeBlock(level, levelNum, levelRoman) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spellItems\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spellLevelWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"spellLevelHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }\n    }, \"Level \", levelRoman), /*#__PURE__*/React.createElement(\"em\", {\n      className: \"remainingSpells\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }\n    }, totalSpells(character, primaryModifier, level, levelNum), \" remaining today\")), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"spellList\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, displaySpells(level)), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    id: \"prepSpellsButton\",\n    onClick: () => setDisplayTwo(\"Prep\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-book\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, \"PREP\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellItems\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellLevelWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    id: \"levelZeroHeader\",\n    className: \"spellLevelHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, casterType()), /*#__PURE__*/React.createElement(\"em\", {\n    className: \"remainingSpells\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, totalSpells(character, primaryModifier, \"zero\", 0), \" remaining today\")), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"spellList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, displaySpells(\"zero\")), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  })), spellCodeBlock(\"one\", 1, \"I\"), spellCodeBlock(\"two\", 2, \"II\"), spellCodeBlock(\"three\", 3, \"III\"), spellCodeBlock(\"four\", 4, \"IV\"), spellCodeBlock(\"five\", 5, \"V\"), spellCodeBlock(\"six\", 6, \"VI\"), spellCodeBlock(\"seven\", 7, \"VII\"), spellCodeBlock(\"eight\", 8, \"VIII\"), spellCodeBlock(\"nine\", 9, \"IX\")));\n};\n\nexport default Spells;","map":{"version":3,"sources":["/home/highdynamics/repos/dnd_app/src/components/Spells.js"],"names":["React","useContext","Character","ToggleInfo","Selection","GetSetDisplayTwo","PrimaryModifier","totalSpells","KnownSpells","props","toggleInfo","setToggleInfo","selection","setSelection","spell","value","formattedSpell","replace","buttonAndSpellClass","displayInfo","Spells","character","primaryModifier","displayTwo","setDisplayTwo","console","log","casterType","magic","type","arcane","divine","displaySpells","level","spells","Object","values","map","s","spellCodeBlock","levelNum","levelRoman"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport {\n  Character,\n  ToggleInfo,\n  Selection,\n  GetSetDisplayTwo,\n  PrimaryModifier,\n  totalSpells\n} from \"./dnd.js\";\n\nconst KnownSpells = props => {\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  const [selection, setSelection] = useContext(Selection);\n  const spell = props.value;\n  const formattedSpell = spell.replace(/_/g, \" \");\n  const buttonAndSpellClass = \"spellButtons \" + spell;\n  function displayInfo(spell) {\n    setToggleInfo(\"Spell\");\n    setSelection(spell);\n  }\n  return (\n    <button className={buttonAndSpellClass} onClick={() => displayInfo(spell)}>\n      {formattedSpell + \" \\u221e\"}\n    </button>\n  );\n};\nconst Spells = props => {\n  const character = useContext(Character);\n  const primaryModifier = useContext(PrimaryModifier);\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo);\n  console.log(primaryModifier);\n  //cantrips or orisons? or both?\n  function casterType() {\n    if (character.magic.type.arcane && character.magic.type.divine) {\n      return \"Cantrips & Orisons\";\n    } else if (character.magic.type.divine) {\n      return \"Orisons\";\n    } else if (character.magic.type.arcane) {\n      return \"Cantrips\";\n    }\n  }\n  function displaySpells(level) {\n    const spells = Object.values(character.magic.spells[level]).map(s => (\n      <KnownSpells key={s} value={s} />\n    ));\n    return spells;\n  }\n  //condense spell block into function\n  function spellCodeBlock(level, levelNum, levelRoman) {\n    return (\n      <div className=\"spellItems\">\n        <div className=\"spellLevelWrapper\">\n          <h2 className=\"spellLevelHeader\">Level {levelRoman}</h2>\n          <em className=\"remainingSpells\">\n            {totalSpells(character, primaryModifier, level, levelNum)} remaining\n            today\n          </em>\n        </div>\n        <p className=\"spellList\">{displaySpells(level)}</p>\n        <hr />\n      </div>\n    );\n  }\n  return (\n    <div>\n      <button id=\"prepSpellsButton\" onClick={() => setDisplayTwo(\"Prep\")}>\n        <i className=\"fas fa-book\"></i>\n        <span>PREP</span>\n      </button>\n      <div className=\"spellContainer\">\n        <div className=\"spellItems\">\n          <div className=\"spellLevelWrapper\">\n            <h2 id=\"levelZeroHeader\" className=\"spellLevelHeader\">\n              {casterType()}\n            </h2>\n            <em className=\"remainingSpells\">\n              {totalSpells(character, primaryModifier, \"zero\", 0)} remaining\n              today\n            </em>\n          </div>\n          <p className=\"spellList\">{displaySpells(\"zero\")}</p>\n          <hr />\n        </div>\n        {spellCodeBlock(\"one\", 1, \"I\")}\n        {spellCodeBlock(\"two\", 2, \"II\")}\n        {spellCodeBlock(\"three\", 3, \"III\")}\n        {spellCodeBlock(\"four\", 4, \"IV\")}\n        {spellCodeBlock(\"five\", 5, \"V\")}\n        {spellCodeBlock(\"six\", 6, \"VI\")}\n        {spellCodeBlock(\"seven\", 7, \"VII\")}\n        {spellCodeBlock(\"eight\", 8, \"VIII\")}\n        {spellCodeBlock(\"nine\", 9, \"IX\")}\n      </div>\n    </div>\n  );\n};\n\nexport default Spells;\n"]},"metadata":{},"sourceType":"module"}