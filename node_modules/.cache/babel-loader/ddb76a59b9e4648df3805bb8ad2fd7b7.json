{"ast":null,"code":"var _jsxFileName = \"/home/highdynamics/repos/dnd_app/src/dnd.js\";\nimport React from 'react';\nimport './dnd.css';\nimport { character } from './Arn_Hachem.js';\nconst {\n  useState,\n  useContext,\n  useEffect\n} = React;\ndocument.title = character.name;\n\nfunction rollDice(size, mod, use) {\n  const dice = Math.floor(Math.random() * size + 1);\n\n  function edgeRollClassAssignment(dice) {\n    if (dice === 1) {\n      return 'natOne';\n    } else if (dice === 20) {\n      return 'natTwenty';\n    } else {\n      return null;\n    }\n  }\n\n  const result = /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"rollUse\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, use), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"rollTopLine\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"rollTotal\",\n    className: edgeRollClassAssignment(dice),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, dice), \" \", /*#__PURE__*/React.createElement(\"span\", {\n    id: \"modTotal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 84\n    }\n  }, \" + \", mod, \" =\")), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"rollModTotal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, dice + mod));\n  return result;\n}\n\nconst TossDice = React.createContext(null);\nconst ReadDice = React.createContext(null);\nconst GetSetDisplay = React.createContext(null);\nconst GetSetDisplayTwo = React.createContext(null);\n/******************************Character Info****************************/\n\nconst str = character.abilities.score.strength;\nconst dex = character.abilities.score.dexterity;\nconst con = character.abilities.score.constitution;\nconst int = character.abilities.score.intelligence;\nconst wis = character.abilities.score.wisdom;\nconst cha = character.abilities.score.charisma;\n\nfunction abilityModifier(ability) {\n  if (character.abilities.score[ability] === '--') {\n    return '--';\n  }\n\n  return Math.floor((character.abilities.score[ability] - 10) / 2);\n}\n\nconst strMod = abilityModifier('strength');\nconst dexMod = abilityModifier('dexterity');\nconst conMod = abilityModifier('constitution');\nconst intMod = abilityModifier('intelligence');\nconst wisMod = abilityModifier('wisdom');\nconst chaMod = abilityModifier('charisma');\nlet primaryModifier = chaMod;\n\nfunction bonusSpellsPerDay(levelNum) {\n  return Math.ceil((primaryModifier - (levelNum - 1)) / 4);\n}\n\nfunction spellSave() {\n  return Math.floor(10 + character.abilities.primaryModifier('charisma'));\n}\n/******************************Character Info****************************/\n\n\nconst ItemsHeld = props => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const item = props.value;\n  const formattedItem = item.replace(/_/g, ' ');\n  const buttonAndSpellClass = 'spellButtons ' + item;\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: buttonAndSpellClass,\n    onClick: () => setToggleInfo(!toggleInfo),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, formattedItem);\n};\n\nconst Items = props => {\n  function displayItems() {\n    const items = Object.values(character.items).map(s => /*#__PURE__*/React.createElement(ItemsHeld, {\n      key: s,\n      value: s,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 14\n      }\n    }));\n    return items;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, \"Items\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellItems\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"spellList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, displayItems()))));\n};\n\nconst KnownSLAs = props => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const spell = props.value;\n  const formattedSpell = spell.replace(/_/g, ' ');\n  const buttonAndSpellClass = 'spellButtons ' + spell;\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: buttonAndSpellClass,\n    onClick: () => setToggleInfo(!toggleInfo),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, formattedSpell);\n};\n\nconst SLAs = props => {\n  //cantrips or orisons? or both?\n  function casterType() {\n    if (character.magic.type.arcane && character.magic.type.divine) {\n      return 'Cantrips & Orisons';\n    } else if (character.magic.type.divine) {\n      return 'Orisons';\n    } else if (character.magic.type.arcane) {\n      return 'Cantrips';\n    }\n  }\n\n  function displaySLAs(level) {\n    const slas = Object.values(character.magic.slas[level]).map(s => /*#__PURE__*/React.createElement(KnownSLAs, {\n      key: s,\n      value: s,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 14\n      }\n    }));\n    return slas;\n  } //condense SLA code block into function\n\n\n  function spellCodeBlock(level, levelNum, levelRoman) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spellItems\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spellLevelWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"spellLevelHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }\n    }, \"Level \", levelRoman)), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"spellList\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }, displaySLAs(level)), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellItems\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellLevelWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"spellLevelHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, casterType())), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"spellList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }, displaySLAs('zero')), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  })), spellCodeBlock('one', 1, 'I'), spellCodeBlock('two', 2, 'II'), spellCodeBlock('three', 3, 'III'), spellCodeBlock('four', 4, 'IV'), spellCodeBlock('five', 5, 'V'), spellCodeBlock('six', 6, 'VI'), spellCodeBlock('seven', 7, 'VII'), spellCodeBlock('eight', 8, 'VIII'), spellCodeBlock('nine', 9, 'IX')));\n};\n\nconst KnownActiveAbilities = props => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const ability = props.value;\n  const formattedAbility = ability.replace(/_/g, ' ');\n  const buttonAndSpellClass = 'spellButtons ' + ability;\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: buttonAndSpellClass,\n    onClick: () => setToggleInfo(!toggleInfo),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }\n  }, formattedAbility);\n};\n\nconst ActiveAbilities = props => {\n  function displayAbilities() {\n    const abilities = Object.values(character.characterAbilities.active).map(s => /*#__PURE__*/React.createElement(KnownActiveAbilities, {\n      key: s,\n      value: s,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 14\n      }\n    }));\n    return abilities;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellItems\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"spellList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, displayAbilities())));\n};\n\nconst SpellInfo = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"spellInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 5\n    }\n  });\n};\n\nconst Spellbook = props => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const spell = props.value;\n  const formattedSpell = spell.replace(/_/g, ' ');\n  const buttonAndSpellClass = 'spellButtons ' + spell;\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: buttonAndSpellClass,\n    onClick: () => setToggleInfo(!toggleInfo),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 5\n    }\n  }, formattedSpell);\n};\n\nconst PrepSpells = props => {\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo);\n\n  function casterType() {\n    if (character.magic.type.arcane && character.magic.type.divine) {\n      return 'Cantrips & Orisons';\n    } else if (character.magic.type.divine) {\n      return 'Orisons';\n    } else if (character.magic.type.arcane) {\n      return 'Cantrips';\n    }\n  }\n\n  function displaySpells(level) {\n    const spells = Object.values(character.magic.spellbook[level]).map(s => /*#__PURE__*/React.createElement(Spellbook, {\n      key: s,\n      value: s,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 14\n      }\n    }));\n    return spells;\n  }\n\n  function totalSpells(level, levelNum) {\n    return character.magic.spellsPerDay[level] + bonusSpellsPerDay(levelNum);\n  }\n\n  function spellCodeBlock(level, levelNum, levelRoman) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spellItems\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spellLevelWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"spellLevelHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }\n    }, \"Level \", levelRoman), /*#__PURE__*/React.createElement(\"em\", {\n      className: \"remainingSpells\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }\n    }, totalSpells(level, levelNum), \" remaining today\")), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"spellList\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }\n    }, displaySpells(level)), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    id: \"returnToSpells\",\n    onClick: () => setDisplayTwo('Spells'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    class: \"fas fa-arrow-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellItems\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellLevelWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    id: \"levelZeroHeader\",\n    className: \"spellLevelHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }\n  }, casterType()), /*#__PURE__*/React.createElement(\"em\", {\n    className: \"remainingSpells\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }\n  }, totalSpells('zero', 0), \" remaining today\")), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"spellList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 11\n    }\n  }, displaySpells('zero')), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 11\n    }\n  })), \" \", spellCodeBlock('one', 1, 'I'), spellCodeBlock('two', 2, 'II'), spellCodeBlock('three', 3, 'III'), spellCodeBlock('four', 4, 'IV'), spellCodeBlock('five', 5, 'V'), spellCodeBlock('six', 6, 'VI'), spellCodeBlock('seven', 7, 'VII'), spellCodeBlock('eight', 8, 'VIII'), spellCodeBlock('nine', 9, 'IX'))));\n};\n\nconst KnownSpells = props => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const spell = props.value;\n  const formattedSpell = spell.replace(/_/g, ' ');\n  const buttonAndSpellClass = 'spellButtons ' + spell;\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: buttonAndSpellClass,\n    onClick: () => setToggleInfo(!toggleInfo),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 5\n    }\n  }, formattedSpell + ' \\u221e');\n};\n\nconst Spells = props => {\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo); //cantrips or orisons? or both?\n\n  function casterType() {\n    if (character.magic.type.arcane && character.magic.type.divine) {\n      return 'Cantrips & Orisons';\n    } else if (character.magic.type.divine) {\n      return 'Orisons';\n    } else if (character.magic.type.arcane) {\n      return 'Cantrips';\n    }\n  }\n\n  function displaySpells(level) {\n    const spells = Object.values(character.magic.spells[level]).map(s => /*#__PURE__*/React.createElement(KnownSpells, {\n      key: s,\n      value: s,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 14\n      }\n    }));\n    return spells;\n  } //total castings per day\n\n\n  function totalSpells(level, levelNum) {\n    return character.magic.spellsPerDay[level] + bonusSpellsPerDay(levelNum);\n  } //condense spell block into function\n\n\n  function spellCodeBlock(level, levelNum, levelRoman) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spellItems\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spellLevelWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"spellLevelHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 7\n      }\n    }, \"Level \", levelRoman), /*#__PURE__*/React.createElement(\"em\", {\n      className: \"remainingSpells\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 7\n      }\n    }, totalSpells(level, levelNum), \" remaining today\")), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"spellList\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 7\n      }\n    }, displaySpells(level)), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    id: \"prepSpellsButton\",\n    onClick: () => setDisplayTwo('Prep'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    class: \"fas fa-book\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 36\n    }\n  }, \"PREP\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellItems\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellLevelWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    id: \"levelZeroHeader\",\n    className: \"spellLevelHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 13\n    }\n  }, casterType()), /*#__PURE__*/React.createElement(\"em\", {\n    className: \"remainingSpells\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 13\n    }\n  }, character.magic.spellsPerDay.zero, \" remaining today\")), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"spellList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 5\n    }\n  }, displaySpells('zero')), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 5\n    }\n  })), spellCodeBlock('one', 1, 'I'), spellCodeBlock('two', 2, 'II'), spellCodeBlock('three', 3, 'III'), spellCodeBlock('four', 4, 'IV'), spellCodeBlock('five', 5, 'V'), spellCodeBlock('six', 6, 'VI'), spellCodeBlock('seven', 7, 'VII'), spellCodeBlock('eight', 8, 'VIII'), spellCodeBlock('nine', 9, 'IX')));\n};\n\nconst AbilitySelector = props => {\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo);\n\n  function navButtonCodeBlock(name) {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      id: name,\n      onClick: () => setDisplayTwo(name),\n      className: displayTwo === name ? 'navbarItemsOn' : 'navbarItemsOff',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 7\n      }\n    }, name);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    id: \"abilitySelector\",\n    className: \"navbarContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }\n  }, navButtonCodeBlock('Spells'), navButtonCodeBlock('Abilities'), navButtonCodeBlock('SLAs')));\n};\n\nconst KnownPassiveAbilities = props => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const ability = props.value;\n  const formattedAbility = ability.replace(/_/g, ' ');\n  const buttonAndSpellClass = 'spellButtons ' + ability;\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: buttonAndSpellClass,\n    onClick: () => setToggleInfo(!toggleInfo),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 5\n    }\n  }, formattedAbility);\n};\n\nconst PassiveAbilities = props => {\n  function displayAbilities() {\n    const abilities = Object.values(character.characterAbilities.passive).map(s => /*#__PURE__*/React.createElement(KnownPassiveAbilities, {\n      key: s,\n      value: s,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 14\n      }\n    }));\n    return abilities;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellItems\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"spellList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 9\n    }\n  }, displayAbilities())));\n};\n\nconst AbilityScores = props => {\n  const roll = useContext(TossDice);\n\n  function abilityScoreCodeBlock(abilityString, abilityScore, abilityMod) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      className: \"abilityScores\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"rollAbility\",\n      onClick: () => roll(rollDice(20, abilityMod, abilityString)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 7\n      }\n    }, \"roll\"), abilityString, \": \", abilityScore, \" | \", abilityMod);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"statsContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    id: \"abilityScoresHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 5\n    }\n  }, \"Abilities\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"abilityScoresWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 5\n    }\n  }, abilityScoreCodeBlock('STR', str, strMod), abilityScoreCodeBlock('DEX', dex, dexMod), abilityScoreCodeBlock('CON', con, conMod), abilityScoreCodeBlock('INT', int, intMod), abilityScoreCodeBlock('WIS', wis, wisMod), abilityScoreCodeBlock('CHA', cha, chaMod))));\n};\n\nconst SkillsListItem = props => {\n  const roll = useContext(TossDice); // store props to make code simpler\n\n  const skills = props.skills; // replace underscore with space and store\n\n  let formattedSkill = skills[0].replace(/_/g, ' '); // update variable replacing (Know)ledge with :\n\n  formattedSkill = formattedSkill.replace(/ledge/g, ':'); // store skill points separately\n\n  const skillPoints = skills[1]; // confirm class skill to add css class\n\n  function findClassSkills(skill) {\n    if (character.classSkills.hasOwnProperty(skill)) {\n      return 'classSkills';\n    } else {\n      return '';\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: `skills ${findClassSkills(skills[0])} ${skills[0]}`,\n    onClick: () => roll(rollDice(20, skillPoints, formattedSkill)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 5\n    }\n  }, formattedSkill, \" | \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"skillPoints\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 26\n    }\n  }, skillPoints));\n};\n\nconst Skills = props => {\n  //put character's skills into array as [key, value]\n  let skillsArray = Object.keys(character.skills).map(skill => {\n    return [skill, character.skills[skill]];\n  }); // put character's class skills into array as [key, value]\n\n  let classSkillsArray = Object.keys(character.classSkills).map(skill => {\n    return [skill, character.classSkills[skill]];\n  }); // combine both arrays into new array, sorted alphabetically\n\n  let allSkills = [...skillsArray, ...classSkillsArray].sort(); // pass skills to child component\n\n  const skillsBlock = allSkills.map(s => /*#__PURE__*/React.createElement(SkillsListItem, {\n    key: s,\n    skills: s,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 5\n    }\n  }));\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    id: \"skillsHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 5\n    }\n  }, \"Skills\"), /*#__PURE__*/React.createElement(\"ul\", {\n    id: \"skillsListWrapper\",\n    style: {\n      listStyleType: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"skillsWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 7\n    }\n  }, skillsBlock)));\n};\n\nconst StatsSelector = props => {\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo);\n\n  function navButtonCodeBlock(name) {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      id: name,\n      onClick: () => setDisplayTwo(name),\n      className: displayTwo === name ? 'navbarItemsOn' : 'navbarItemsOff',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 7\n      }\n    }, name);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    id: \"statsSelector\",\n    className: \"navbarContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 7\n    }\n  }, navButtonCodeBlock('Skills'), navButtonCodeBlock('Scores'), navButtonCodeBlock('Passive')));\n};\n\nconst BasicInfo = props => {\n  const result = useContext(ReadDice); //toggle for 'more' button\n\n  const [toggle, setToggle] = useState(false); //display conditional more/less\n\n  const moreLess = () => {\n    if (toggle) {\n      return '(less)';\n    } else {\n      return '(more)';\n    }\n  };\n\n  const health = character.hitPoints.total - character.hitPoints.damage + character.hitPoints.temporaryHitPoints;\n  const type = character.type.map(t => /*#__PURE__*/React.createElement(CharacterType, {\n    key: t,\n    value: t,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 12\n    }\n  }));\n  const classList = character.class.map(c => /*#__PURE__*/React.createElement(CharacterClasses, {\n    key: c,\n    value: c,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 12\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"topContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: toggle ? 'moreButtonOn' : 'moreButtonOff',\n    onClick: () => setToggle(!toggle),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    id: \"nameAndLevel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 15\n    }\n  }, character.name, \" (\", character.level, \")\"), /*#__PURE__*/React.createElement(\"em\", {\n    id: \"moreLess\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 15\n    }\n  }, moreLess())), toggle === true && /*#__PURE__*/React.createElement(\"div\", {\n    id: \"characterInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 503,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"characterType\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 15\n    }\n  }, \"type: \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 45\n    }\n  }), \" \", type), /*#__PURE__*/React.createElement(\"ul\", {\n    id: \"classList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 15\n    }\n  }, \"class: \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 41\n    }\n  }), \" \", classList)), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"HPACDiceWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"hpacWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    id: \"hp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 15\n    }\n  }, \"hp: \", health), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"ac\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 15\n    }\n  }, \"ac: \", character.armorClass.ac.total)), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"diceRollResultWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 13\n    }\n  }, result))));\n};\n\nconst CharacterType = props => {\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 5\n    }\n  }, props.value, \" / \");\n};\n\nconst CharacterClasses = props => {\n  return /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 5\n    }\n  }, props.value);\n};\n\nconst MainDisplay = props => {\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo);\n\n  function screenSwitch(display) {\n    switch (display) {\n      case 'Skills':\n        return /*#__PURE__*/React.createElement(Skills, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 16\n          }\n        });\n\n      case 'Scores':\n        return /*#__PURE__*/React.createElement(AbilityScores, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 16\n          }\n        });\n\n      case 'Passive':\n        return /*#__PURE__*/React.createElement(PassiveAbilities, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 16\n          }\n        });\n\n      case 'Spells':\n        return /*#__PURE__*/React.createElement(Spells, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 541,\n            columnNumber: 16\n          }\n        });\n\n      case 'Abilities':\n        return /*#__PURE__*/React.createElement(ActiveAbilities, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 16\n          }\n        });\n\n      case 'SLAs':\n        return /*#__PURE__*/React.createElement(SLAs, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 16\n          }\n        });\n\n      case 'Prep':\n        return /*#__PURE__*/React.createElement(PrepSpells, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 16\n          }\n        });\n\n      case 'Items':\n        return /*#__PURE__*/React.createElement(Items, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 16\n          }\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(Skills, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 16\n          }\n        });\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"mainContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 9\n    }\n  }, screenSwitch(displayTwo)));\n};\n\nconst SecondaryNavbar = props => {\n  function navSwitch(display) {\n    switch (display) {\n      case 'stats':\n        return /*#__PURE__*/React.createElement(StatsSelector, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 16\n          }\n        });\n\n      case 'ability':\n        return /*#__PURE__*/React.createElement(AbilitySelector, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 16\n          }\n        });\n\n      case null:\n        return null;\n\n      default:\n        return /*#__PURE__*/React.createElement(StatsSelector, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 572,\n            columnNumber: 16\n          }\n        });\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"secondaryNavbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 577,\n      columnNumber: 9\n    }\n  }, navSwitch(props.display)));\n};\n\nconst Navbar = props => {\n  const statIcon = /*#__PURE__*/React.createElement(\"i\", {\n    id: \"statIcon\",\n    className: \"far fa-chart-bar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 582,\n      columnNumber: 20\n    }\n  });\n  const abilityIcon = /*#__PURE__*/React.createElement(\"i\", {\n    id: \"spellIcon\",\n    className: \"fas fa-hand-sparkles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 583,\n      columnNumber: 23\n    }\n  });\n  const itemIcon = /*#__PURE__*/React.createElement(\"i\", {\n    id: \"itemIcon\",\n    className: \"fas fa-scroll\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 20\n    }\n  });\n\n  function setBothDisplays(name, secondaryName) {\n    props.setDisplay(name);\n\n    if (secondaryName !== null) {\n      props.setDisplayTwo(secondaryName);\n    }\n  }\n\n  function navButtonCodeBlock(name, icon, secondaryName) {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      id: name,\n      onClick: () => setBothDisplays(name, secondaryName),\n      className: props.display == name ? 'navbarItemsOn' : 'navbarItemsOff',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 7\n      }\n    }, icon);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    id: \"primaryNavbar\",\n    className: \"navbarContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 7\n    }\n  }, navButtonCodeBlock('stats', statIcon, 'Skills'), navButtonCodeBlock('ability', abilityIcon, 'Spells'), navButtonCodeBlock(null, itemIcon, 'Items')));\n};\n\nconst App = () => {\n  const [display, setDisplay] = useState('stats');\n  const [displayTwo, setDisplayTwo] = useState('Skills');\n  const [rollResult, setRollResult] = useState('Good luck,\\n' + character.name);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"appWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"topWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 617,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ReadDice.Provider, {\n    value: rollResult,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 618,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(BasicInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Navbar, {\n    display: display,\n    setDisplay: setDisplay,\n    setDisplayTwo: setDisplayTwo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(GetSetDisplayTwo.Provider, {\n    value: [displayTwo, setDisplayTwo],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 622,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(SecondaryNavbar, {\n    display: display,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(GetSetDisplay.Provider, {\n    value: [display, setDisplay],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 626,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GetSetDisplayTwo.Provider, {\n    value: [displayTwo, setDisplayTwo],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TossDice.Provider, {\n    value: setRollResult,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 628,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MainDisplay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 629,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"bottomSpacer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/highdynamics/repos/dnd_app/src/dnd.js"],"names":["React","character","useState","useContext","useEffect","document","title","name","rollDice","size","mod","use","dice","Math","floor","random","edgeRollClassAssignment","result","TossDice","createContext","ReadDice","GetSetDisplay","GetSetDisplayTwo","str","abilities","score","strength","dex","dexterity","con","constitution","int","intelligence","wis","wisdom","cha","charisma","abilityModifier","ability","strMod","dexMod","conMod","intMod","wisMod","chaMod","primaryModifier","bonusSpellsPerDay","levelNum","ceil","spellSave","ItemsHeld","props","toggleInfo","setToggleInfo","item","value","formattedItem","replace","buttonAndSpellClass","Items","displayItems","items","Object","values","map","s","KnownSLAs","spell","formattedSpell","SLAs","casterType","magic","type","arcane","divine","displaySLAs","level","slas","spellCodeBlock","levelRoman","KnownActiveAbilities","formattedAbility","ActiveAbilities","displayAbilities","characterAbilities","active","SpellInfo","Spellbook","PrepSpells","displayTwo","setDisplayTwo","displaySpells","spells","spellbook","totalSpells","spellsPerDay","KnownSpells","Spells","zero","AbilitySelector","navButtonCodeBlock","KnownPassiveAbilities","PassiveAbilities","passive","AbilityScores","roll","abilityScoreCodeBlock","abilityString","abilityScore","abilityMod","SkillsListItem","skills","formattedSkill","skillPoints","findClassSkills","skill","classSkills","hasOwnProperty","Skills","skillsArray","keys","classSkillsArray","allSkills","sort","skillsBlock","listStyleType","StatsSelector","BasicInfo","toggle","setToggle","moreLess","health","hitPoints","total","damage","temporaryHitPoints","t","classList","class","c","armorClass","ac","CharacterType","CharacterClasses","MainDisplay","screenSwitch","display","SecondaryNavbar","navSwitch","Navbar","statIcon","abilityIcon","itemIcon","setBothDisplays","secondaryName","setDisplay","icon","App","rollResult","setRollResult"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './dnd.css';\nimport { character } from './Arn_Hachem.js'\nconst { useState, useContext, useEffect } = React;\ndocument.title = character.name;\n\n\nfunction rollDice(size, mod, use){\n  const dice = Math.floor((Math.random() * size) +1)\n  function edgeRollClassAssignment(dice){\n    if(dice === 1){\n      return 'natOne'\n    }else if(dice === 20){\n      return 'natTwenty'\n    }else{\n      return null\n    }\n  }\n  const result =\n  <span>\n    <span id='rollUse'>{use}</span>\n    <div id='rollTopLine'>\n      <span id='rollTotal' className={edgeRollClassAssignment(dice)}>{dice}</span> <span id='modTotal'> + {mod} =</span>\n    </div>\n    <p id='rollModTotal'>{dice + mod}</p>\n  </span>\n  return result\n}\nconst TossDice = React.createContext(null)\nconst ReadDice = React.createContext(null)\nconst GetSetDisplay = React.createContext(null)\nconst GetSetDisplayTwo = React.createContext(null)\n/******************************Character Info****************************/\nconst str = character.abilities.score.strength\nconst dex = character.abilities.score.dexterity\nconst con = character.abilities.score.constitution\nconst int = character.abilities.score.intelligence\nconst wis = character.abilities.score.wisdom\nconst cha = character.abilities.score.charisma\nfunction abilityModifier(ability) {\n  if(character.abilities.score[ability] === '--'){\n    return '--'\n  }\n  return Math.floor((character.abilities.score[ability] - 10) / 2)\n}\nconst strMod = abilityModifier('strength')\nconst dexMod = abilityModifier('dexterity')\nconst conMod = abilityModifier('constitution')\nconst intMod = abilityModifier('intelligence')\nconst wisMod = abilityModifier('wisdom')\nconst chaMod = abilityModifier('charisma')\nlet primaryModifier = chaMod\nfunction bonusSpellsPerDay(levelNum){\n  return Math.ceil((primaryModifier - (levelNum - 1)) / 4)\n}\nfunction spellSave(){\n  return Math.floor(10 + character.abilities.primaryModifier('charisma'))\n}\n/******************************Character Info****************************/\nconst ItemsHeld = (props) => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const item = props.value\n  const formattedItem = item.replace(/_/g, ' ')\n  const buttonAndSpellClass = 'spellButtons ' + item\n  return(\n    <button className={buttonAndSpellClass} onClick={() => setToggleInfo(!toggleInfo)}>{formattedItem}</button>\n  )\n}\nconst Items = (props) => {\n  function displayItems(){\n    const items = Object.values(character.items).map(\n      (s) => <ItemsHeld key={s} value={s} />\n    );\n    return items;\n  }\n  return(\n    <div>\n      <h1>Items</h1>\n      <div className='spellContainer'>\n        <div className='spellItems'>\n          <p className='spellList'>{displayItems()}</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst KnownSLAs = (props) => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const spell = props.value\n  const formattedSpell = spell.replace(/_/g, ' ')\n  const buttonAndSpellClass = 'spellButtons ' + spell\n  return(\n    <button className={buttonAndSpellClass} onClick={() => setToggleInfo(!toggleInfo)}>{formattedSpell}</button>\n  )\n}\nconst SLAs = (props) => {\n  //cantrips or orisons? or both?\n  function casterType() {\n    if (character.magic.type.arcane && character.magic.type.divine){\n      return 'Cantrips & Orisons'\n    } else if (character.magic.type.divine){\n      return 'Orisons'\n    } else if (character.magic.type.arcane){\n      return 'Cantrips'\n    }\n  }\n  function displaySLAs(level){\n    const slas = Object.values(character.magic.slas[level]).map(\n      (s) => <KnownSLAs key={s} value={s} />\n    );\n    return slas;\n  }\n  //condense SLA code block into function\n  function spellCodeBlock(level, levelNum, levelRoman){\n    return (\n      <div className='spellItems'>\n        <div className='spellLevelWrapper'>\n          <h2 className='spellLevelHeader'>Level {levelRoman}</h2>\n        </div>\n        <p className='spellList'>{displaySLAs(level)}</p>\n        <hr/>\n      </div>\n    )\n  }\n  return (\n    <div>\n      <div className='spellContainer'>\n        <div className='spellItems'>\n          <div className='spellLevelWrapper'>\n            <h2 className='spellLevelHeader'>{casterType()}</h2>\n          </div>\n          <p className='spellList'>{displaySLAs('zero')}</p>\n          <hr/>\n        </div>\n        {spellCodeBlock('one', 1, 'I')}\n        {spellCodeBlock('two', 2, 'II')}\n        {spellCodeBlock('three', 3, 'III')}\n        {spellCodeBlock('four', 4, 'IV')}\n        {spellCodeBlock('five', 5, 'V')}\n        {spellCodeBlock('six', 6, 'VI')}\n        {spellCodeBlock('seven', 7, 'VII')}\n        {spellCodeBlock('eight', 8, 'VIII')}\n        {spellCodeBlock('nine', 9, 'IX')}\n      </div>\n    </div>\n  );\n}\n\nconst KnownActiveAbilities = (props) => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const ability = props.value\n  const formattedAbility = ability.replace(/_/g, ' ')\n  const buttonAndSpellClass = 'spellButtons ' + ability\n  return(\n    <button className={buttonAndSpellClass} onClick={() => setToggleInfo(!toggleInfo)}>{formattedAbility}</button>\n  )\n}\nconst ActiveAbilities = (props) => {\n  function displayAbilities(){\n    const abilities = Object.values(character.characterAbilities.active).map(\n      (s) => <KnownActiveAbilities key={s} value={s} />\n    );\n    return abilities;\n  }\n  return(\n    <div className='spellContainer'>\n      <div className='spellItems'>\n        <p className='spellList'>{displayAbilities()}</p>\n      </div>\n    </div>\n  )\n}\n\nconst SpellInfo = (props) => {\n\n  return (\n    <div id='spellInfo'>\n    </div>\n  )\n}\nconst Spellbook = (props) => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const spell = props.value\n  const formattedSpell = spell.replace(/_/g, ' ')\n  const buttonAndSpellClass = 'spellButtons ' + spell\n  return(\n    <button className={buttonAndSpellClass} onClick={() => setToggleInfo(!toggleInfo)}>{formattedSpell}</button>\n  )\n}\nconst PrepSpells = (props) => {\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo)\n  function casterType() {\n    if (character.magic.type.arcane && character.magic.type.divine){\n      return 'Cantrips & Orisons'\n    } else if (character.magic.type.divine){\n      return 'Orisons'\n    } else if (character.magic.type.arcane){\n      return 'Cantrips'\n    }\n  }\n  function displaySpells(level){\n    const spells = Object.values(character.magic.spellbook[level]).map(\n      (s) => <Spellbook key={s} value={s} />\n    );\n    return spells;\n  }\n  function totalSpells(level, levelNum) {\n    return character.magic.spellsPerDay[level] + bonusSpellsPerDay(levelNum)\n  }\n  function spellCodeBlock(level, levelNum, levelRoman){\n    return (\n      <div className='spellItems'>\n        <div className='spellLevelWrapper'>\n          <h2 className='spellLevelHeader'>Level {levelRoman}</h2>\n          <em className='remainingSpells'>{totalSpells(level, levelNum)} remaining today</em>\n        </div>\n        <p className='spellList'>{displaySpells(level)}</p>\n        <hr/>\n      </div>\n    )\n  }\n  return (\n    <>\n      <div>\n        <button id='returnToSpells' onClick={() => setDisplayTwo('Spells')}>\n          <i class=\"fas fa-arrow-left\"></i>\n        </button>\n      <div className='spellContainer'>\n        <div className='spellItems'>\n          <div className='spellLevelWrapper'>\n            <h2 id=\"levelZeroHeader\" className='spellLevelHeader'>{casterType()}</h2>\n            <em className='remainingSpells'>{totalSpells('zero', 0)} remaining today</em>\n          </div>\n          <p className='spellList'>{displaySpells('zero')}</p>\n          <hr/>\n        </div> {/*0*/}\n        {spellCodeBlock('one', 1, 'I')}\n        {spellCodeBlock('two', 2, 'II')}\n        {spellCodeBlock('three', 3, 'III')}\n        {spellCodeBlock('four', 4, 'IV')}\n        {spellCodeBlock('five', 5, 'V')}\n        {spellCodeBlock('six', 6, 'VI')}\n        {spellCodeBlock('seven', 7, 'VII')}\n        {spellCodeBlock('eight', 8, 'VIII')}\n        {spellCodeBlock('nine', 9, 'IX')}\n      </div>\n    </div>\n    </>\n  )\n}\nconst KnownSpells = (props) => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const spell = props.value\n  const formattedSpell = spell.replace(/_/g, ' ')\n  const buttonAndSpellClass = 'spellButtons ' + spell\n  return(\n    <button className={buttonAndSpellClass} onClick={() => setToggleInfo(!toggleInfo)}>{formattedSpell + ' \\u221e'}</button>\n  )\n}\nconst Spells = (props) => {\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo);\n  //cantrips or orisons? or both?\n  function casterType() {\n    if (character.magic.type.arcane && character.magic.type.divine){\n      return 'Cantrips & Orisons'\n    } else if (character.magic.type.divine){\n      return 'Orisons'\n    } else if (character.magic.type.arcane){\n      return 'Cantrips'\n    }\n  }\n  function displaySpells(level){\n    const spells = Object.values(character.magic.spells[level]).map(\n      (s) => <KnownSpells key={s} value={s} />\n    );\n    return spells;\n  }\n  //total castings per day\n  function totalSpells(level, levelNum) {\n    return character.magic.spellsPerDay[level] + bonusSpellsPerDay(levelNum)\n  }\n  //condense spell block into function\n  function spellCodeBlock(level, levelNum, levelRoman){\n    return (\n      <div className='spellItems'>\n      <div className='spellLevelWrapper'>\n      <h2 className='spellLevelHeader'>Level {levelRoman}</h2>\n      <em className='remainingSpells'>{totalSpells(level, levelNum)} remaining today</em>\n      </div>\n      <p className='spellList'>{displaySpells(level)}</p>\n      <hr/>\n      </div>\n    )\n  }\n  return (\n    <div>\n      <button id='prepSpellsButton' onClick={() => setDisplayTwo('Prep')}>\n        <i class=\"fas fa-book\"></i><span>PREP</span>\n      </button>\n      <div className='spellContainer'>\n        <div className='spellItems'>\n          <div className='spellLevelWrapper'>\n            <h2 id='levelZeroHeader' className='spellLevelHeader'>{casterType()}</h2>\n            <em className='remainingSpells'>{character.magic.spellsPerDay.zero} remaining today</em>\n          </div>\n    <p className='spellList'>{displaySpells('zero')}</p>\n    <hr/>\n    </div>\n    {spellCodeBlock('one', 1, 'I')}\n    {spellCodeBlock('two', 2, 'II')}\n    {spellCodeBlock('three', 3, 'III')}\n    {spellCodeBlock('four', 4, 'IV')}\n    {spellCodeBlock('five', 5, 'V')}\n    {spellCodeBlock('six', 6, 'VI')}\n    {spellCodeBlock('seven', 7, 'VII')}\n    {spellCodeBlock('eight', 8, 'VIII')}\n    {spellCodeBlock('nine', 9, 'IX')}\n    </div>\n    </div>\n  );\n}\n\nconst AbilitySelector = (props) => {\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo)\n  function navButtonCodeBlock(name){\n    return(\n      <button id={name}\n              onClick={() => setDisplayTwo(name)}\n              className={(displayTwo === name ? 'navbarItemsOn' : 'navbarItemsOff')}>\n          {name}\n      </button>\n    )\n  }\n  return(\n    <div>\n      <ul id='abilitySelector' className='navbarContainer'>\n        {navButtonCodeBlock('Spells')}\n        {navButtonCodeBlock('Abilities')}\n        {navButtonCodeBlock('SLAs')}\n      </ul>\n    </div>\n  )\n}\n\nconst KnownPassiveAbilities = (props) => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const ability = props.value\n  const formattedAbility = ability.replace(/_/g, ' ')\n  const buttonAndSpellClass = 'spellButtons ' + ability\n  return(\n    <button className={buttonAndSpellClass} onClick={() => setToggleInfo(!toggleInfo)}>{formattedAbility}</button>\n  )\n}\nconst PassiveAbilities = (props) => {\n  function displayAbilities(){\n    const abilities = Object.values(character.characterAbilities.passive).map(\n      (s) => <KnownPassiveAbilities key={s} value={s} />\n    );\n    return abilities;\n  }\n  return(\n    <div className='spellContainer'>\n      <div className='spellItems'>\n        <p className='spellList'>{displayAbilities()}</p>\n      </div>\n    </div>\n  )\n}\nconst AbilityScores = (props) => {\n  const roll = useContext(TossDice)\n  function abilityScoreCodeBlock(abilityString, abilityScore, abilityMod){\n    return(\n    <p className='abilityScores'>\n      {/*button appears on same line*/}\n      <button className='rollAbility' onClick={() => roll(rollDice(20, abilityMod, abilityString))}>roll</button>\n      {abilityString}: {abilityScore} | {abilityMod}\n    </p>\n    )\n  }\n  return (\n    <div>\n    <div id='statsContainer'>\n    <h1 id='abilityScoresHeader'>Abilities</h1>\n    <div id='abilityScoresWrapper'>\n      {abilityScoreCodeBlock('STR', str, strMod)}\n      {abilityScoreCodeBlock('DEX', dex, dexMod)}\n      {abilityScoreCodeBlock('CON', con, conMod)}\n      {abilityScoreCodeBlock('INT', int, intMod)}\n      {abilityScoreCodeBlock('WIS', wis, wisMod)}\n      {abilityScoreCodeBlock('CHA', cha, chaMod)}\n    </div>\n    </div>\n    </div>\n  );\n}\nconst SkillsListItem = (props) => {\n  const roll = useContext(TossDice);\n  // store props to make code simpler\n  const skills = props.skills\n  // replace underscore with space and store\n  let formattedSkill = skills[0].replace(/_/g, ' ');\n  // update variable replacing (Know)ledge with :\n  formattedSkill = formattedSkill.replace(/ledge/g, ':')\n  // store skill points separately\n  const skillPoints = skills[1];\n  // confirm class skill to add css class\n  function findClassSkills(skill){\n    if(character.classSkills.hasOwnProperty(skill)){\n      return 'classSkills'\n    }else{\n      return ''\n    }\n  }\n  return (\n    <button\n      className={`skills ${findClassSkills(skills[0])} ${skills[0]}`}\n      onClick={() => roll(rollDice(20, skillPoints, formattedSkill))}>\n      {formattedSkill} | <span className='skillPoints'>{skillPoints}</span>\n    </button>\n  )\n}\nconst Skills = (props) =>  {\n  //put character's skills into array as [key, value]\n  let skillsArray = Object.keys(character.skills).map((skill) => {\n    return [skill, character.skills[skill]]\n  });\n  // put character's class skills into array as [key, value]\n  let classSkillsArray = Object.keys(character.classSkills).map((skill) => {\n    return [skill, character.classSkills[skill]];\n  });\n  // combine both arrays into new array, sorted alphabetically\n  let allSkills = [...skillsArray, ...classSkillsArray].sort();\n  // pass skills to child component\n  const skillsBlock = allSkills.map((s) =>\n    <SkillsListItem key={s} skills={s} />\n  );\nreturn(\n  <>\n    <h1 id='skillsHeader'>Skills</h1>\n    <ul id='skillsListWrapper' style={{listStyleType: 'none'}}>\n      <div id='skillsWrapper'>\n        {skillsBlock}\n      </div>\n    </ul>\n  </>\n);}\nconst StatsSelector = (props) => {\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo);\n  function navButtonCodeBlock(name){\n    return(\n      <button id={name}\n              onClick={() => setDisplayTwo(name)}\n              className={(displayTwo === name ? 'navbarItemsOn' : 'navbarItemsOff')}>\n          {name}\n      </button>\n    )\n  }\n  return(\n    <div>\n      <ul id='statsSelector' className='navbarContainer'>\n        {navButtonCodeBlock('Skills')}\n        {navButtonCodeBlock('Scores')}\n        {navButtonCodeBlock('Passive')}\n      </ul>\n    {/*  <div id='statsDisplay'>\n        {selection(display)}\n      </div>   */}\n    </div>\n  )\n}\n\nconst BasicInfo = (props) => {\n  const result = useContext(ReadDice);\n//toggle for 'more' button\n  const [toggle, setToggle] = useState(false);\n//display conditional more/less\n  const moreLess = () => {\n    if(toggle){\n      return '(less)'\n    } else {\n      return '(more)'\n    }\n  }\n  const health = (\n      character.hitPoints.total - character.hitPoints.damage + character.hitPoints.temporaryHitPoints\n  );\n  const type = (character.type).map(\n    (t) => <CharacterType key={t} value={t} />\n  );\n  const classList = (character.class).map(\n    (c) => <CharacterClasses key={c} value={c} />\n  );\n  return (\n      <div>\n        <div className='topContainer'>\n            <button className={(toggle ? 'moreButtonOn' : 'moreButtonOff')} onClick={() => setToggle(!toggle)}>\n              <h1 id='nameAndLevel'>{character.name} ({character.level})</h1>\n              <em id='moreLess'>{moreLess()}</em>\n            </button>\n\n          {toggle === true &&\n            <div id='characterInfo'>\n              <div id='characterType'>type: <br /> {type}</div>\n              <ul id='classList'>class: <br /> {classList}</ul>\n            </div>\n          }\n          <div id='HPACDiceWrapper'>\n            <div id='hpacWrapper'>\n              <p id='hp'>hp: {health}</p>\n              <p id='ac'>ac: {character.armorClass.ac.total}</p>\n            </div>\n            <div id='diceRollResultWrapper'>{result}</div>\n          </div>\n        </div>\n      </div>\n    );\n}\nconst CharacterType = (props) => {\n  return(\n    <span>{props.value} / </span>\n  )\n}\nconst CharacterClasses = (props) => {\n  return(\n    <li>{props.value}</li>\n  )\n}\n\nconst MainDisplay = (props) => {\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo);\n  function screenSwitch(display){\n    switch(display) {\n      case 'Skills':\n        return <Skills />\n      case 'Scores':\n        return <AbilityScores />\n      case 'Passive':\n        return <PassiveAbilities />\n      case 'Spells':\n        return <Spells />\n      case 'Abilities':\n        return <ActiveAbilities />\n      case 'SLAs':\n        return <SLAs />\n      case 'Prep':\n        return <PrepSpells />\n      case 'Items':\n        return <Items />\n      default:\n        return <Skills />\n    }\n  }\n\n    return(\n      <div>\n        <div id='mainContent'>{screenSwitch(displayTwo)}</div>\n      </div>\n    );\n\n}\nconst SecondaryNavbar = (props) => {\n  function navSwitch(display){\n    switch(display){\n      case 'stats':\n        return <StatsSelector />\n      case 'ability':\n        return <AbilitySelector />\n      case null:\n        return null\n      default:\n        return <StatsSelector />\n    }\n  }\n  return(\n      <>\n        <div id='secondaryNavbar'>{navSwitch(props.display)}</div>\n      </>\n  )\n}\nconst Navbar = (props) => {\n  const statIcon = <i id='statIcon' className=\"far fa-chart-bar\"></i>;\n  const abilityIcon = <i id=\"spellIcon\" className=\"fas fa-hand-sparkles\"></i>;\n  const itemIcon = <i id='itemIcon' className=\"fas fa-scroll\"></i>;\n  function setBothDisplays(name, secondaryName){\n    props.setDisplay(name);\n    if(secondaryName !== null){\n      props.setDisplayTwo(secondaryName)\n    }\n  }\n  function navButtonCodeBlock(name, icon, secondaryName){\n    return(\n      <button id={name}\n              onClick={() => setBothDisplays(name, secondaryName)}\n              className={(props.display == name ? 'navbarItemsOn' : 'navbarItemsOff')}>\n                      {icon}\n      </button>\n    )\n  }\n  return (\n    <div>\n      <ul id='primaryNavbar' className='navbarContainer'>\n        {navButtonCodeBlock('stats', statIcon, 'Skills')}\n        {navButtonCodeBlock('ability', abilityIcon, 'Spells')}\n        {navButtonCodeBlock(null, itemIcon, 'Items')}\n      </ul>\n    </div>\n  );\n}\nconst App = () => {\n  const [display, setDisplay] = useState('stats')\n  const [displayTwo, setDisplayTwo] = useState('Skills')\n  const [rollResult, setRollResult] = useState('Good luck,\\n' + character.name)\n  return (\n    <div id='appWrapper'>\n      <div>\n        <div id='topWrapper'>\n          <ReadDice.Provider value={rollResult}>\n            <BasicInfo />\n          </ReadDice.Provider>\n          <Navbar display={display} setDisplay={setDisplay} setDisplayTwo={setDisplayTwo} />\n          <GetSetDisplayTwo.Provider value={[displayTwo, setDisplayTwo]}>\n            <SecondaryNavbar display={display}/>\n          </GetSetDisplayTwo.Provider>\n        </div>\n        <GetSetDisplay.Provider value={[display, setDisplay]}>\n        <GetSetDisplayTwo.Provider value={[displayTwo, setDisplayTwo]}>\n            <TossDice.Provider value={setRollResult}>\n              <MainDisplay />\n            </TossDice.Provider>\n        </GetSetDisplayTwo.Provider>\n        </GetSetDisplay.Provider>\n        <div id='bottomSpacer'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}