{"ast":null,"code":"var _jsxFileName = \"/home/highdynamics/repos/dnd_app/src/components/Skills.js\";\nimport React, { useState, useContext } from 'react';\nimport { Character, ReadTossDice, rollDice } from './dnd.js';\n\nconst SkillsListItem = props => {\n  const character = useContext(Character);\n  const [rollResult, setRollResult] = useContext(ReadTossDice); // store props to make code simpler\n\n  const skills = props.skills; // replace underscore with space and store\n\n  let formattedSkill = skills[0].replace(/_/g, ' '); // update variable replacing (Know)ledge with :\n\n  formattedSkill = formattedSkill.replace(/ledge/g, ':'); // store skill points separately\n\n  const skillPoints = skills[1]; // confirm class skill to add css class\n\n  function findClassSkills(skill) {\n    if (character.classSkills.hasOwnProperty(skill)) {\n      return 'classSkills';\n    } else {\n      return '';\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: `skills ${findClassSkills(skills[0])} ${skills[0]}`,\n    onClick: () => setRollResult(rollDice(20, skillPoints, formattedSkill)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, formattedSkill, \" | \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"skillPoints\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 26\n    }\n  }, skillPoints));\n};\n\nconst Skills = props => {\n  const character = useContext(Character); //put character's skills into array as [key, value]\n\n  let skillsArray = Object.keys(character.skills).map(skill => {\n    return [skill, character.skills[skill]];\n  }); // put character's class skills into array as [key, value]\n\n  let classSkillsArray = Object.keys(character.classSkills).map(skill => {\n    return [skill, character.classSkills[skill]];\n  }); // combine both arrays into new array, sorted alphabetically\n\n  let allSkills = [...skillsArray, ...classSkillsArray].sort(); // pass skills to child component\n\n  const skillsBlock = allSkills.map(s => /*#__PURE__*/React.createElement(SkillsListItem, {\n    key: s,\n    skills: s,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }));\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    id: \"skillsHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, \"Skills\"), /*#__PURE__*/React.createElement(\"ul\", {\n    id: \"skillsListWrapper\",\n    style: {\n      listStyleType: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"skillsWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, skillsBlock)));\n};\n\nexport default Skills;","map":{"version":3,"sources":["/home/highdynamics/repos/dnd_app/src/components/Skills.js"],"names":["React","useState","useContext","Character","ReadTossDice","rollDice","SkillsListItem","props","character","rollResult","setRollResult","skills","formattedSkill","replace","skillPoints","findClassSkills","skill","classSkills","hasOwnProperty","Skills","skillsArray","Object","keys","map","classSkillsArray","allSkills","sort","skillsBlock","s","listStyleType"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { Character, ReadTossDice, rollDice } from './dnd.js'\n\nconst SkillsListItem = (props) => {\n  const character = useContext(Character)\n  const [rollResult, setRollResult] = useContext(ReadTossDice);\n  // store props to make code simpler\n  const skills = props.skills\n  // replace underscore with space and store\n  let formattedSkill = skills[0].replace(/_/g, ' ');\n  // update variable replacing (Know)ledge with :\n  formattedSkill = formattedSkill.replace(/ledge/g, ':')\n  // store skill points separately\n  const skillPoints = skills[1];\n  // confirm class skill to add css class\n  function findClassSkills(skill){\n    if(character.classSkills.hasOwnProperty(skill)){\n      return 'classSkills'\n    }else{\n      return ''\n    }\n  }\n  return (\n    <button\n      className={`skills ${findClassSkills(skills[0])} ${skills[0]}`}\n      onClick={() => setRollResult(rollDice(20, skillPoints, formattedSkill))}>\n      {formattedSkill} | <span className='skillPoints'>{skillPoints}</span>\n    </button>\n  )\n}\nconst Skills = (props) =>  {\n  const character = useContext(Character)\n  //put character's skills into array as [key, value]\n  let skillsArray = Object.keys(character.skills).map((skill) => {\n    return [skill, character.skills[skill]]\n  });\n  // put character's class skills into array as [key, value]\n  let classSkillsArray = Object.keys(character.classSkills).map((skill) => {\n    return [skill, character.classSkills[skill]];\n  });\n  // combine both arrays into new array, sorted alphabetically\n  let allSkills = [...skillsArray, ...classSkillsArray].sort();\n  // pass skills to child component\n  const skillsBlock = allSkills.map((s) =>\n    <SkillsListItem key={s} skills={s} />\n  );\nreturn(\n  <>\n    <h1 id='skillsHeader'>Skills</h1>\n    <ul id='skillsListWrapper' style={{listStyleType: 'none'}}>\n      <div id='skillsWrapper'>\n        {skillsBlock}\n      </div>\n    </ul>\n  </>\n  );\n}\n\nexport default Skills\n"]},"metadata":{},"sourceType":"module"}