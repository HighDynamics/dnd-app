{"ast":null,"code":"var _jsxFileName = \"/home/highdynamics/repos/dnd_app/src/components/AbilityScores.js\";\nimport React, { useState, useContext } from 'react';\nimport { Character, ReadTossDice, abilityModifier } from './dnd.js';\n\nconst AbilityScores = props => {\n  const character = useContext(Character);\n  const str = character.abilities.score.strength;\n  const dex = character.abilities.score.dexterity;\n  const con = character.abilities.score.constitution;\n  const int = character.abilities.score.intelligence;\n  const wis = character.abilities.score.wisdom;\n  const cha = character.abilities.score.charisma;\n  const strMod = abilityModifier(character, 'strength');\n  const dexMod = abilityModifier(character, 'dexterity');\n  const conMod = abilityModifier(character, 'constitution');\n  const intMod = abilityModifier(character, 'intelligence');\n  const wisMod = abilityModifier(character, 'wisdom');\n  const chaMod = abilityModifier(character, 'charisma');\n  const [rollResult, setRollResult] = useContext(ReadTossDice);\n\n  function abilityScoreCodeBlock(abilityString, abilityScore, abilityMod) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      className: \"abilityScores\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"rollAbility\",\n      onClick: () => setRollResult(rollDice(20, abilityMod, abilityString)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 7\n      }\n    }, \"roll\"), abilityString, \": \", abilityScore, \" | \", abilityMod);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"statsContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    id: \"abilityScoresHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, \"Abilities\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"abilityScoresWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, abilityScoreCodeBlock('STR', str, strMod), abilityScoreCodeBlock('DEX', dex, dexMod), abilityScoreCodeBlock('CON', con, conMod), abilityScoreCodeBlock('INT', int, intMod), abilityScoreCodeBlock('WIS', wis, wisMod), abilityScoreCodeBlock('CHA', cha, chaMod))));\n};\n\nexport default AbilityScores;","map":{"version":3,"sources":["/home/highdynamics/repos/dnd_app/src/components/AbilityScores.js"],"names":["React","useState","useContext","Character","ReadTossDice","abilityModifier","AbilityScores","props","character","str","abilities","score","strength","dex","dexterity","con","constitution","int","intelligence","wis","wisdom","cha","charisma","strMod","dexMod","conMod","intMod","wisMod","chaMod","rollResult","setRollResult","abilityScoreCodeBlock","abilityString","abilityScore","abilityMod","rollDice"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,SAAT,EAAoBC,YAApB,EAAkCC,eAAlC,QAAyD,UAAzD;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,QAAMC,SAAS,GAAGN,UAAU,CAACC,SAAD,CAA5B;AACA,QAAMM,GAAG,GAAGD,SAAS,CAACE,SAAV,CAAoBC,KAApB,CAA0BC,QAAtC;AACA,QAAMC,GAAG,GAAGL,SAAS,CAACE,SAAV,CAAoBC,KAApB,CAA0BG,SAAtC;AACA,QAAMC,GAAG,GAAGP,SAAS,CAACE,SAAV,CAAoBC,KAApB,CAA0BK,YAAtC;AACA,QAAMC,GAAG,GAAGT,SAAS,CAACE,SAAV,CAAoBC,KAApB,CAA0BO,YAAtC;AACA,QAAMC,GAAG,GAAGX,SAAS,CAACE,SAAV,CAAoBC,KAApB,CAA0BS,MAAtC;AACA,QAAMC,GAAG,GAAGb,SAAS,CAACE,SAAV,CAAoBC,KAApB,CAA0BW,QAAtC;AACA,QAAMC,MAAM,GAAGlB,eAAe,CAACG,SAAD,EAAY,UAAZ,CAA9B;AACA,QAAMgB,MAAM,GAAGnB,eAAe,CAACG,SAAD,EAAY,WAAZ,CAA9B;AACA,QAAMiB,MAAM,GAAGpB,eAAe,CAACG,SAAD,EAAY,cAAZ,CAA9B;AACA,QAAMkB,MAAM,GAAGrB,eAAe,CAACG,SAAD,EAAY,cAAZ,CAA9B;AACA,QAAMmB,MAAM,GAAGtB,eAAe,CAACG,SAAD,EAAY,QAAZ,CAA9B;AACA,QAAMoB,MAAM,GAAGvB,eAAe,CAACG,SAAD,EAAY,UAAZ,CAA9B;AAEA,QAAM,CAACqB,UAAD,EAAaC,aAAb,IAA8B5B,UAAU,CAACE,YAAD,CAA9C;;AACA,WAAS2B,qBAAT,CAA+BC,aAA/B,EAA8CC,YAA9C,EAA4DC,UAA5D,EAAuE;AACrE,wBACA;AAAG,MAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAQ,MAAA,SAAS,EAAC,aAAlB;AAAgC,MAAA,OAAO,EAAE,MAAMJ,aAAa,CAACK,QAAQ,CAAC,EAAD,EAAKD,UAAL,EAAiBF,aAAjB,CAAT,CAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAGGA,aAHH,QAGoBC,YAHpB,SAGqCC,UAHrC,CADA;AAOD;;AACD,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAK,IAAA,EAAE,EAAC,gBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAI,IAAA,EAAE,EAAC,qBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADA,eAEA;AAAK,IAAA,EAAE,EAAC,sBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,qBAAqB,CAAC,KAAD,EAAQtB,GAAR,EAAac,MAAb,CADxB,EAEGQ,qBAAqB,CAAC,KAAD,EAAQlB,GAAR,EAAaW,MAAb,CAFxB,EAGGO,qBAAqB,CAAC,KAAD,EAAQhB,GAAR,EAAaU,MAAb,CAHxB,EAIGM,qBAAqB,CAAC,KAAD,EAAQd,GAAR,EAAaS,MAAb,CAJxB,EAKGK,qBAAqB,CAAC,KAAD,EAAQZ,GAAR,EAAaQ,MAAb,CALxB,EAMGI,qBAAqB,CAAC,KAAD,EAAQV,GAAR,EAAaO,MAAb,CANxB,CAFA,CADA,CADF;AAeD,CAxCD;;AA0CA,eAAetB,aAAf","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { Character, ReadTossDice, abilityModifier } from './dnd.js'\n\nconst AbilityScores = (props) => {\n  const character = useContext(Character)\n  const str = character.abilities.score.strength\n  const dex = character.abilities.score.dexterity\n  const con = character.abilities.score.constitution\n  const int = character.abilities.score.intelligence\n  const wis = character.abilities.score.wisdom\n  const cha = character.abilities.score.charisma\n  const strMod = abilityModifier(character, 'strength')\n  const dexMod = abilityModifier(character, 'dexterity')\n  const conMod = abilityModifier(character, 'constitution')\n  const intMod = abilityModifier(character, 'intelligence')\n  const wisMod = abilityModifier(character, 'wisdom')\n  const chaMod = abilityModifier(character, 'charisma')\n\n  const [rollResult, setRollResult] = useContext(ReadTossDice)\n  function abilityScoreCodeBlock(abilityString, abilityScore, abilityMod){\n    return(\n    <p className='abilityScores'>\n      {/*button appears on same line*/}\n      <button className='rollAbility' onClick={() => setRollResult(rollDice(20, abilityMod, abilityString))}>roll</button>\n      {abilityString}: {abilityScore} | {abilityMod}\n    </p>\n    )\n  }\n  return (\n    <div>\n    <div id='statsContainer'>\n    <h1 id='abilityScoresHeader'>Abilities</h1>\n    <div id='abilityScoresWrapper'>\n      {abilityScoreCodeBlock('STR', str, strMod)}\n      {abilityScoreCodeBlock('DEX', dex, dexMod)}\n      {abilityScoreCodeBlock('CON', con, conMod)}\n      {abilityScoreCodeBlock('INT', int, intMod)}\n      {abilityScoreCodeBlock('WIS', wis, wisMod)}\n      {abilityScoreCodeBlock('CHA', cha, chaMod)}\n    </div>\n    </div>\n    </div>\n  );\n}\n\nexport default AbilityScores\n"]},"metadata":{},"sourceType":"module"}