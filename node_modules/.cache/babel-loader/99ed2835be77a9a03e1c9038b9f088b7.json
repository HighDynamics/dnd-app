{"ast":null,"code":"var _jsxFileName = \"/home/highdynamics/repos/dnd_app/src/dnd.js\";\nimport React from 'react';\nimport './dnd.css';\nimport { character } from './Arn_Hachem.js';\nconst {\n  useState\n} = React;\n\nfunction rollDice(size, mod) {\n  const dice = Math.floor(Math.random() * size + 1);\n  sessionStorage.diceRollResult = `${dice} + ${mod} = ${dice + mod}`;\n}\n/******************************Character Info****************************/\n\n\nconst str = character.abilities.score.strength;\nconst dex = character.abilities.score.dexterity;\nconst con = character.abilities.score.constitution;\nconst int = character.abilities.score.intelligence;\nconst wis = character.abilities.score.wisdom;\nconst cha = character.abilities.score.charisma;\n\nfunction abilityModifier(ability) {\n  if (character.abilities.score[ability] === '--') {\n    return '--';\n  }\n\n  return Math.floor((character.abilities.score[ability] - 10) / 2);\n}\n\nconst strMod = abilityModifier('strength');\nconst dexMod = abilityModifier('dexterity');\nconst conMod = abilityModifier('constitution');\nconst intMod = abilityModifier('intelligence');\nconst wisMod = abilityModifier('wisdom');\nconst chaMod = abilityModifier('charisma');\nlet primaryModifier = chaMod;\n\nfunction bonusSpellsPerDay(levelNum) {\n  return Math.ceil((primaryModifier - (levelNum - 1)) / 4);\n}\n\nfunction spellSave() {\n  return Math.floor(10 + character.abilities.primaryModifier('charisma'));\n}\n/******************************Character Info****************************/\n\n\nconst ItemsHeld = props => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const item = props.value;\n  const formattedItem = item.replace(/\\_/g, ' ');\n  const buttonAndSpellClass = 'spellButtons ' + item;\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: buttonAndSpellClass,\n    onClick: () => setToggleInfo(!toggleInfo),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, formattedItem);\n};\n\nconst Items = props => {\n  function displayItems() {\n    const items = Object.values(character.items).map(s => /*#__PURE__*/React.createElement(ItemsHeld, {\n      key: s,\n      value: s,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 14\n      }\n    }));\n    return items;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, \"Items\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellItems\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"spellList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, displayItems()))));\n};\n\nconst KnownSLAs = props => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const spell = props.value;\n  const formattedSpell = spell.replace(/\\_/g, ' ');\n  const buttonAndSpellClass = 'spellButtons ' + spell;\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: buttonAndSpellClass,\n    onClick: () => setToggleInfo(!toggleInfo),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, formattedSpell);\n};\n\nconst SLAs = props => {\n  //cantrips or orisons? or both?\n  function casterType() {\n    if (character.magic.type.arcane && character.magic.type.divine) {\n      return 'Cantrips & Orisons';\n    } else if (character.magic.type.divine) {\n      return 'Orisons';\n    } else if (character.magic.type.arcane) {\n      return 'Cantrips';\n    }\n  }\n\n  function displaySLAs(level) {\n    const slas = Object.values(character.magic.slas[level]).map(s => /*#__PURE__*/React.createElement(KnownSLAs, {\n      key: s,\n      value: s,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 14\n      }\n    }));\n    return slas;\n  } //condense SLA code block into function\n\n\n  function spellCodeBlock(level, levelNum, levelRoman) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spellItems\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spellLevelWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"spellLevelHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }, \"Level \", levelRoman)), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"spellList\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }, displaySLAs(level)), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellItems\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellLevelWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"spellLevelHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, casterType())), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"spellList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, displaySLAs('zero')), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  })), spellCodeBlock('one', 1, 'I'), spellCodeBlock('two', 2, 'II'), spellCodeBlock('three', 3, 'III'), spellCodeBlock('four', 4, 'IV'), spellCodeBlock('five', 5, 'V'), spellCodeBlock('six', 6, 'VI'), spellCodeBlock('seven', 7, 'VII'), spellCodeBlock('eight', 8, 'VIII'), spellCodeBlock('nine', 9, 'IX')));\n};\n\nconst KnownActiveAbilities = props => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const ability = props.value;\n  const formattedAbility = ability.replace(/\\_/g, ' ');\n  const buttonAndSpellClass = 'spellButtons ' + ability;\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: buttonAndSpellClass,\n    onClick: () => setToggleInfo(!toggleInfo),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, formattedAbility);\n};\n\nconst ActiveAbilities = props => {\n  function displayAbilities() {\n    const abilities = Object.values(character.characterAbilities.active).map(s => /*#__PURE__*/React.createElement(KnownActiveAbilities, {\n      key: s,\n      value: s,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 14\n      }\n    }));\n    return abilities;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellItems\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"spellList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, displayAbilities())));\n};\n\nconst UseSpell = props => {\n  const newArray = Object.values(character.magic.spells.zero).map(spell => spell);\n\n  function spellList(level) {\n    if (character.magic.spells[level].length == 0) {\n      return 'LEVEL UP FIRST';\n    } else if (Array.isArray(character.magic.spells[level])) {\n      return '| ' + Object.values(character.magic.spells[level]).map(x => /*#__PURE__*/React.createElement(\"a\", {\n        href: \"#\",\n        key: x,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 9\n        }\n      }, x)).join(' | ') + ' |';\n    }\n\n    return '| ' + character.magic.spells[level] + ' |';\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }\n  }, \"Level 1\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }, Object.values(character.magic.spells.one).map(x => /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  }, `${x}`))));\n};\n\nconst Spellbook = props => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const spell = props.value;\n  const formattedSpell = spell.replace(/\\_/g, ' ');\n  const buttonAndSpellClass = 'spellButtons ' + spell;\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: buttonAndSpellClass,\n    onClick: () => setToggleInfo(!toggleInfo),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 5\n    }\n  }, formattedSpell);\n};\n\nconst PrepSpells = props => {\n  function casterType() {\n    if (character.magic.type.arcane && character.magic.type.divine) {\n      return 'Cantrips & Orisons';\n    } else if (character.magic.type.divine) {\n      return 'Orisons';\n    } else if (character.magic.type.arcane) {\n      return 'Cantrips';\n    }\n  }\n\n  function displaySpells(level) {\n    const spells = Object.values(character.magic.spellbook[level]).map(s => /*#__PURE__*/React.createElement(Spellbook, {\n      key: s,\n      value: s,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 14\n      }\n    }));\n    return spells;\n  }\n\n  function totalSpells(level, levelNum) {\n    return character.magic.spellsPerDay[level] + bonusSpellsPerDay(levelNum);\n  }\n\n  function spellCodeBlock(level, levelNum, levelRoman) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spellItems\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spellLevelWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"spellLevelHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }\n    }, \"Level \", levelRoman), /*#__PURE__*/React.createElement(\"em\", {\n      className: \"remainingSpells\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }\n    }, totalSpells(level, levelNum), \" remaining today\")), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"spellList\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }\n    }, displaySpells(level)), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellItems\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellLevelWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"spellLevelHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }\n  }, casterType()), /*#__PURE__*/React.createElement(\"em\", {\n    className: \"remainingSpells\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }\n  }, totalSpells('zero', 0), \" remaining today\")), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"spellList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 11\n    }\n  }, displaySpells('zero')), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 11\n    }\n  })), \" \", spellCodeBlock('one', 1, 'I'), spellCodeBlock('two', 2, 'II'), spellCodeBlock('three', 3, 'III'), spellCodeBlock('four', 4, 'IV'), spellCodeBlock('five', 5, 'V'), spellCodeBlock('six', 6, 'VI'), spellCodeBlock('seven', 7, 'VII'), spellCodeBlock('eight', 8, 'VIII'), spellCodeBlock('nine', 9, 'IX'))));\n};\n\nconst KnownSpells = props => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const spell = props.value;\n  const formattedSpell = spell.replace(/\\_/g, ' ');\n  const buttonAndSpellClass = 'spellButtons ' + spell;\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: buttonAndSpellClass,\n    onClick: () => setToggleInfo(!toggleInfo),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 5\n    }\n  }, formattedSpell + ' \\u221e');\n};\n\nconst Spells = props => {\n  //cantrips or orisons? or both?\n  function casterType() {\n    if (character.magic.type.arcane && character.magic.type.divine) {\n      return 'Cantrips & Orisons';\n    } else if (character.magic.type.divine) {\n      return 'Orisons';\n    } else if (character.magic.type.arcane) {\n      return 'Cantrips';\n    }\n  }\n\n  function displaySpells(level) {\n    const spells = Object.values(character.magic.spells[level]).map(s => /*#__PURE__*/React.createElement(KnownSpells, {\n      key: s,\n      value: s,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 14\n      }\n    }));\n    return spells;\n  } //total castings per day\n\n\n  function totalSpells(level, levelNum) {\n    return character.magic.spellsPerDay[level] + bonusSpellsPerDay(levelNum);\n  } //condense spell block into function\n\n\n  function spellCodeBlock(level, levelNum, levelRoman) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spellItems\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spellLevelWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"spellLevelHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 7\n      }\n    }, \"Level \", levelRoman), /*#__PURE__*/React.createElement(\"em\", {\n      className: \"remainingSpells\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 7\n      }\n    }, totalSpells(level, levelNum), \" remaining today\")), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"spellList\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 7\n      }\n    }, displaySpells(level)), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellItems\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellLevelWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"spellLevelHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 5\n    }\n  }, casterType()), /*#__PURE__*/React.createElement(\"em\", {\n    className: \"remainingSpells\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 5\n    }\n  }, character.magic.spellsPerDay.zero, \" remaining today\")), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"spellList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 5\n    }\n  }, displaySpells('zero')), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 5\n    }\n  })), spellCodeBlock('one', 1, 'I'), spellCodeBlock('two', 2, 'II'), spellCodeBlock('three', 3, 'III'), spellCodeBlock('four', 4, 'IV'), spellCodeBlock('five', 5, 'V'), spellCodeBlock('six', 6, 'VI'), spellCodeBlock('seven', 7, 'VII'), spellCodeBlock('eight', 8, 'VIII'), spellCodeBlock('nine', 9, 'IX')));\n};\n\nconst AbilitySelector = props => {\n  const [display, setDisplay] = useState('Spells');\n\n  function selection(display) {\n    switch (display) {\n      case 'Spells':\n        return /*#__PURE__*/React.createElement(Spells, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 16\n          }\n        });\n\n      case 'Abilities':\n        return /*#__PURE__*/React.createElement(ActiveAbilities, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 16\n          }\n        });\n\n      case 'SLAs':\n        return /*#__PURE__*/React.createElement(SLAs, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 16\n          }\n        });\n    }\n  }\n\n  function navButtonCodeBlock(name) {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      id: name,\n      onClick: () => setDisplay(name),\n      className: display == name ? 'navbarItemsOn' : 'navbarItemsOff',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 7\n      }\n    }, name);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    id: \"abilitySelector\",\n    className: \"navbarContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 7\n    }\n  }, navButtonCodeBlock('Spells'), navButtonCodeBlock('Abilities'), navButtonCodeBlock('SLAs')), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"abilityDisplay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }\n  }, selection(display)));\n};\n\nconst KnownPassiveAbilities = props => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const ability = props.value;\n  const formattedAbility = ability.replace(/\\_/g, ' ');\n  const buttonAndSpellClass = 'spellButtons ' + ability;\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: buttonAndSpellClass,\n    onClick: () => setToggleInfo(!toggleInfo),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 5\n    }\n  }, formattedAbility);\n};\n\nconst PassiveAbilities = props => {\n  function displayAbilities() {\n    const abilities = Object.values(character.characterAbilities.passive).map(s => /*#__PURE__*/React.createElement(KnownActiveAbilities, {\n      key: s,\n      value: s,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 14\n      }\n    }));\n    return abilities;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellItems\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"spellList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 9\n    }\n  }, displayAbilities())));\n};\n\nconst AbilityScores = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"statsContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    id: \"abilityScoresHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 5\n    }\n  }, \"Abilities\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"abilityScores\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"abilityScores\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 5\n    }\n  }, \"STR: \", str, \" | \", strMod), \" \", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => rollDice(20, strMod),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 60\n    }\n  }, \"roll\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"abilityScores\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 5\n    }\n  }, \"DEX: \", dex, \" | \", dexMod), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"abilityScores\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 5\n    }\n  }, \"CON: \", con, \" | \", conMod), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"abilityScores\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 5\n    }\n  }, \"INT: \", int, \" | \", intMod), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"abilityScores\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 5\n    }\n  }, \"WIS: \", wis, \" | \", wisMod), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"abilityScores\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 5\n    }\n  }, \"CHA: \", cha, \" | \", chaMod))));\n};\n\nconst SkillsListItem = props => {\n  // store props to make code simpler\n  const skills = props.skills; // replace underscore with space and store\n\n  let formattedSkill = skills[0].replace(/\\_/g, ' '); // update variable replacing (Know)ledge with :\n\n  formattedSkill = formattedSkill.replace(/ledge/g, ':'); // store skill points separately\n\n  const skillPoints = skills[1]; // confirm class skill to add css class\n\n  function findClassSkills(skill) {\n    if (character.classSkills.hasOwnProperty(skill)) {\n      return ' classSkills';\n    } else {\n      return '';\n    }\n  }\n\n  console.log(findClassSkills(skills[0]));\n  return /*#__PURE__*/React.createElement(\"li\", {\n    className: `skills${findClassSkills(skills[0])}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 5\n    }\n  }, formattedSkill, \" | \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"skillPoints\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 26\n    }\n  }, skillPoints));\n};\n\nconst Skills = props => {\n  //put character's skills into array as [key, value]\n  let skillsArray = Object.keys(character.skills).map(skill => {\n    return [skill, character.skills[skill]];\n  }); // put character's class skills into array as [key, value]\n\n  let classSkillsArray = Object.keys(character.classSkills).map(skill => {\n    return [skill, character.classSkills[skill]];\n  }); // combine both arrays into new array, sorted alphabetically\n\n  let allSkills = [...skillsArray, ...classSkillsArray].sort(); // pass skills to child component\n\n  const skillsBlock = allSkills.map(s => /*#__PURE__*/React.createElement(SkillsListItem, {\n    key: s,\n    skills: s,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 5\n    }\n  }));\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    id: \"skillsHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 5\n    }\n  }, \"Skills\"), /*#__PURE__*/React.createElement(\"ul\", {\n    id: \"skillsListWrapper\",\n    style: {\n      listStyleType: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"skillsWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 7\n    }\n  }, skillsBlock)));\n};\n\nconst StatsSelector = props => {\n  const [display, setDisplay] = useState('Skills');\n\n  function selection(display) {\n    switch (display) {\n      case 'Skills':\n        return /*#__PURE__*/React.createElement(Skills, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 16\n          }\n        });\n\n      case 'Scores':\n        return /*#__PURE__*/React.createElement(AbilityScores, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 16\n          }\n        });\n\n      case 'Passive':\n        return /*#__PURE__*/React.createElement(PassiveAbilities, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 16\n          }\n        });\n    }\n  }\n\n  function navButtonCodeBlock(name) {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      id: name,\n      onClick: () => setDisplay(name),\n      className: display == name ? 'navbarItemsOn' : 'navbarItemsOff',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 7\n      }\n    }, name);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    id: \"statsSelector\",\n    className: \"navbarContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 7\n    }\n  }, navButtonCodeBlock('Skills'), navButtonCodeBlock('Scores'), navButtonCodeBlock('Passive')), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"statsDisplay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 7\n    }\n  }, selection(display)));\n};\n\nconst BasicInfo = props => {\n  //toggle for 'more' button\n  const [toggle, setToggle] = useState(false); //display conditional more/less\n\n  const moreLess = () => {\n    if (toggle) {\n      return '(less)';\n    } else {\n      return '(more)';\n    }\n  };\n\n  const health = character.hitPoints.total - character.hitPoints.damage + character.hitPoints.temporaryHitPoints;\n  const type = character.type.map(t => /*#__PURE__*/React.createElement(CharacterType, {\n    key: t,\n    value: t,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 12\n    }\n  }));\n  const classList = character.class.map(c => /*#__PURE__*/React.createElement(CharacterClasses, {\n    key: c,\n    value: c,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 12\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"topContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: toggle ? 'moreButtonOn' : 'moreButtonOff',\n    onClick: () => setToggle(!toggle),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    id: \"nameAndLevel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 15\n    }\n  }, character.name, \" (\", character.level, \")\"), /*#__PURE__*/React.createElement(\"em\", {\n    id: \"moreLess\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 15\n    }\n  }, moreLess())), toggle == true && /*#__PURE__*/React.createElement(\"div\", {\n    id: \"characterInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"characterType\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 15\n    }\n  }, \"type: \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 45\n    }\n  }), \" \", type), /*#__PURE__*/React.createElement(\"ul\", {\n    id: \"classList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 15\n    }\n  }, \"class: \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 41\n    }\n  }), \" \", classList)), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"HPACDiceWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"hpacWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    id: \"hp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 503,\n      columnNumber: 15\n    }\n  }, \"hp: \", health), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"ac\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 15\n    }\n  }, \"ac: \", character.armorClass.ac.total)), /*#__PURE__*/React.createElement(\"span\", {\n    id: \"diceRollResult\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 13\n    }\n  }, sessionStorage.diceRollResult))));\n};\n\nconst CharacterType = props => {\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 5\n    }\n  }, props.value, \" / \");\n};\n\nconst CharacterClasses = props => {\n  return /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 5\n    }\n  }, props.value);\n};\n\nconst MainDisplay = props => {\n  function screenSwitch(display) {\n    switch (display) {\n      case 'stats':\n        return /*#__PURE__*/React.createElement(StatsSelector, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 16\n          }\n        });\n\n      case 'ability':\n        return /*#__PURE__*/React.createElement(AbilitySelector, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 16\n          }\n        });\n\n      case 'items':\n        return /*#__PURE__*/React.createElement(Items, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 16\n          }\n        });\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 7\n    }\n  }, screenSwitch(props.display));\n};\n\nconst Navbar = props => {\n  const statIcon = /*#__PURE__*/React.createElement(\"i\", {\n    id: \"statIcon\",\n    className: \"far fa-chart-bar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 20\n    }\n  });\n  const abilityIcon = /*#__PURE__*/React.createElement(\"i\", {\n    id: \"spellIcon\",\n    className: \"fas fa-hand-sparkles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 23\n    }\n  });\n  const itemIcon = /*#__PURE__*/React.createElement(\"i\", {\n    id: \"itemIcon\",\n    className: \"fas fa-scroll\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 20\n    }\n  });\n\n  function navButtonCodeBlock(name, icon) {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      id: name,\n      onClick: () => props.setDisplay(name),\n      className: props.display == name ? 'navbarItemsOn' : 'navbarItemsOff',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 7\n      }\n    }, icon);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"navbarContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 7\n    }\n  }, navButtonCodeBlock('stats', statIcon), navButtonCodeBlock('ability', abilityIcon), navButtonCodeBlock('items', itemIcon)));\n};\n\nconst App = () => {\n  const [display, setDisplay] = useState('stats');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"appWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 569,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"topWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 571,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BasicInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Navbar, {\n    display: display,\n    setDisplay: setDisplay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"mainContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MainDisplay, {\n    display: display,\n    setDisplay: setDisplay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 576,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/highdynamics/repos/dnd_app/src/dnd.js"],"names":["React","character","useState","rollDice","size","mod","dice","Math","floor","random","sessionStorage","diceRollResult","str","abilities","score","strength","dex","dexterity","con","constitution","int","intelligence","wis","wisdom","cha","charisma","abilityModifier","ability","strMod","dexMod","conMod","intMod","wisMod","chaMod","primaryModifier","bonusSpellsPerDay","levelNum","ceil","spellSave","ItemsHeld","props","toggleInfo","setToggleInfo","item","value","formattedItem","replace","buttonAndSpellClass","Items","displayItems","items","Object","values","map","s","KnownSLAs","spell","formattedSpell","SLAs","casterType","magic","type","arcane","divine","displaySLAs","level","slas","spellCodeBlock","levelRoman","KnownActiveAbilities","formattedAbility","ActiveAbilities","displayAbilities","characterAbilities","active","UseSpell","newArray","spells","zero","spellList","length","Array","isArray","x","join","one","Spellbook","PrepSpells","displaySpells","spellbook","totalSpells","spellsPerDay","KnownSpells","Spells","AbilitySelector","display","setDisplay","selection","navButtonCodeBlock","name","KnownPassiveAbilities","PassiveAbilities","passive","AbilityScores","SkillsListItem","skills","formattedSkill","skillPoints","findClassSkills","skill","classSkills","hasOwnProperty","console","log","Skills","skillsArray","keys","classSkillsArray","allSkills","sort","skillsBlock","listStyleType","StatsSelector","BasicInfo","toggle","setToggle","moreLess","health","hitPoints","total","damage","temporaryHitPoints","t","classList","class","c","armorClass","ac","CharacterType","CharacterClasses","MainDisplay","screenSwitch","Navbar","statIcon","abilityIcon","itemIcon","icon","App"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './dnd.css';\nimport { character } from './Arn_Hachem.js'\nconst { useState } = React;\n\nfunction rollDice(size, mod){\n  const dice = Math.floor((Math.random() * size) +1)\n  sessionStorage.diceRollResult = `${dice} + ${mod} = ${dice + mod}`\n}\n/******************************Character Info****************************/\nconst str = character.abilities.score.strength\nconst dex = character.abilities.score.dexterity\nconst con = character.abilities.score.constitution\nconst int = character.abilities.score.intelligence\nconst wis = character.abilities.score.wisdom\nconst cha = character.abilities.score.charisma\nfunction abilityModifier(ability) {\n  if(character.abilities.score[ability] === '--'){\n    return '--'\n  }\n  return Math.floor((character.abilities.score[ability] - 10) / 2)\n}\nconst strMod = abilityModifier('strength')\nconst dexMod = abilityModifier('dexterity')\nconst conMod = abilityModifier('constitution')\nconst intMod = abilityModifier('intelligence')\nconst wisMod = abilityModifier('wisdom')\nconst chaMod = abilityModifier('charisma')\nlet primaryModifier = chaMod\nfunction bonusSpellsPerDay(levelNum){\n  return Math.ceil((primaryModifier - (levelNum - 1)) / 4)\n}\nfunction spellSave(){\n  return Math.floor(10 + character.abilities.primaryModifier('charisma'))\n}\n/******************************Character Info****************************/\nconst ItemsHeld = (props) => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const item = props.value\n  const formattedItem = item.replace(/\\_/g, ' ')\n  const buttonAndSpellClass = 'spellButtons ' + item\n  return(\n    <button className={buttonAndSpellClass} onClick={() => setToggleInfo(!toggleInfo)}>{formattedItem}</button>\n  )\n}\nconst Items = (props) => {\n  function displayItems(){\n    const items = Object.values(character.items).map(\n      (s) => <ItemsHeld key={s} value={s} />\n    );\n    return items;\n  }\n  return(\n    <div>\n      <h1>Items</h1>\n      <div className='spellContainer'>\n        <div className='spellItems'>\n          <p className='spellList'>{displayItems()}</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst KnownSLAs = (props) => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const spell = props.value\n  const formattedSpell = spell.replace(/\\_/g, ' ')\n  const buttonAndSpellClass = 'spellButtons ' + spell\n  return(\n    <button className={buttonAndSpellClass} onClick={() => setToggleInfo(!toggleInfo)}>{formattedSpell}</button>\n  )\n}\nconst SLAs = (props) => {\n  //cantrips or orisons? or both?\n  function casterType() {\n    if (character.magic.type.arcane && character.magic.type.divine){\n      return 'Cantrips & Orisons'\n    } else if (character.magic.type.divine){\n      return 'Orisons'\n    } else if (character.magic.type.arcane){\n      return 'Cantrips'\n    }\n  }\n  function displaySLAs(level){\n    const slas = Object.values(character.magic.slas[level]).map(\n      (s) => <KnownSLAs key={s} value={s} />\n    );\n    return slas;\n  }\n  //condense SLA code block into function\n  function spellCodeBlock(level, levelNum, levelRoman){\n    return (\n      <div className='spellItems'>\n        <div className='spellLevelWrapper'>\n          <h2 className='spellLevelHeader'>Level {levelRoman}</h2>\n        </div>\n        <p className='spellList'>{displaySLAs(level)}</p>\n        <hr/>\n      </div>\n    )\n  }\n  return (\n    <div>\n      <div className='spellContainer'>\n        <div className='spellItems'>\n          <div className='spellLevelWrapper'>\n            <h2 className='spellLevelHeader'>{casterType()}</h2>\n          </div>\n          <p className='spellList'>{displaySLAs('zero')}</p>\n          <hr/>\n        </div>\n        {spellCodeBlock('one', 1, 'I')}\n        {spellCodeBlock('two', 2, 'II')}\n        {spellCodeBlock('three', 3, 'III')}\n        {spellCodeBlock('four', 4, 'IV')}\n        {spellCodeBlock('five', 5, 'V')}\n        {spellCodeBlock('six', 6, 'VI')}\n        {spellCodeBlock('seven', 7, 'VII')}\n        {spellCodeBlock('eight', 8, 'VIII')}\n        {spellCodeBlock('nine', 9, 'IX')}\n      </div>\n    </div>\n  );\n}\n\nconst KnownActiveAbilities = (props) => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const ability = props.value\n  const formattedAbility = ability.replace(/\\_/g, ' ')\n  const buttonAndSpellClass = 'spellButtons ' + ability\n  return(\n    <button className={buttonAndSpellClass} onClick={() => setToggleInfo(!toggleInfo)}>{formattedAbility}</button>\n  )\n}\nconst ActiveAbilities = (props) => {\n  function displayAbilities(){\n    const abilities = Object.values(character.characterAbilities.active).map(\n      (s) => <KnownActiveAbilities key={s} value={s} />\n    );\n    return abilities;\n  }\n  return(\n    <div className='spellContainer'>\n      <div className='spellItems'>\n        <p className='spellList'>{displayAbilities()}</p>\n      </div>\n    </div>\n  )\n}\n\nconst UseSpell = (props) => {\n  const newArray = Object.values(character.magic.spells.zero).map(spell => spell)\n  function spellList(level) {\n    if (character.magic.spells[level].length == 0){\n      return 'LEVEL UP FIRST'\n    }else if (Array.isArray(character.magic.spells[level])) {\n      return '| ' + Object.values(character.magic.spells[level]).map(x => (\n        <a href='#' key={x}>{x}</a>))\n        .join(' | ') + ' |'\n    }\n    return '| ' + character.magic.spells[level] + ' |'\n  }\n  return (\n    <div>\n      <h1>Level 1</h1>\n      <p>{Object.values(character.magic.spells.one).map(x => (\n        <a href='#'>{`${x}`}</a>\n      ))}</p>\n    </div>\n  )\n}\nconst Spellbook = (props) => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const spell = props.value\n  const formattedSpell = spell.replace(/\\_/g, ' ')\n  const buttonAndSpellClass = 'spellButtons ' + spell\n  return(\n    <button className={buttonAndSpellClass} onClick={() => setToggleInfo(!toggleInfo)}>{formattedSpell}</button>\n  )\n}\nconst PrepSpells = (props) => {\n  function casterType() {\n    if (character.magic.type.arcane && character.magic.type.divine){\n      return 'Cantrips & Orisons'\n    } else if (character.magic.type.divine){\n      return 'Orisons'\n    } else if (character.magic.type.arcane){\n      return 'Cantrips'\n    }\n  }\n  function displaySpells(level){\n    const spells = Object.values(character.magic.spellbook[level]).map(\n      (s) => <Spellbook key={s} value={s} />\n    );\n    return spells;\n  }\n  function totalSpells(level, levelNum) {\n    return character.magic.spellsPerDay[level] + bonusSpellsPerDay(levelNum)\n  }\n  function spellCodeBlock(level, levelNum, levelRoman){\n    return (\n      <div className='spellItems'>\n        <div className='spellLevelWrapper'>\n          <h2 className='spellLevelHeader'>Level {levelRoman}</h2>\n          <em className='remainingSpells'>{totalSpells(level, levelNum)} remaining today</em>\n        </div>\n        <p className='spellList'>{displaySpells(level)}</p>\n        <hr/>\n      </div>\n    )\n  }\n  return (\n    <>\n      <div>\n      <div className='spellContainer'>\n        <div className='spellItems'>\n          <div className='spellLevelWrapper'>\n            <h2 className='spellLevelHeader'>{casterType()}</h2>\n            <em className='remainingSpells'>{totalSpells('zero', 0)} remaining today</em>\n          </div>\n          <p className='spellList'>{displaySpells('zero')}</p>\n          <hr/>\n        </div> {/*0*/}\n        {spellCodeBlock('one', 1, 'I')}\n        {spellCodeBlock('two', 2, 'II')}\n        {spellCodeBlock('three', 3, 'III')}\n        {spellCodeBlock('four', 4, 'IV')}\n        {spellCodeBlock('five', 5, 'V')}\n        {spellCodeBlock('six', 6, 'VI')}\n        {spellCodeBlock('seven', 7, 'VII')}\n        {spellCodeBlock('eight', 8, 'VIII')}\n        {spellCodeBlock('nine', 9, 'IX')}\n      </div>\n    </div>\n    </>\n  )\n}\nconst KnownSpells = (props) => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const spell = props.value\n  const formattedSpell = spell.replace(/\\_/g, ' ')\n  const buttonAndSpellClass = 'spellButtons ' + spell\n  return(\n    <button className={buttonAndSpellClass} onClick={() => setToggleInfo(!toggleInfo)}>{formattedSpell + ' \\u221e'}</button>\n  )\n}\nconst Spells = (props) => {\n  //cantrips or orisons? or both?\n  function casterType() {\n    if (character.magic.type.arcane && character.magic.type.divine){\n      return 'Cantrips & Orisons'\n    } else if (character.magic.type.divine){\n      return 'Orisons'\n    } else if (character.magic.type.arcane){\n      return 'Cantrips'\n    }\n  }\n  function displaySpells(level){\n    const spells = Object.values(character.magic.spells[level]).map(\n      (s) => <KnownSpells key={s} value={s} />\n    );\n    return spells;\n  }\n  //total castings per day\n  function totalSpells(level, levelNum) {\n    return character.magic.spellsPerDay[level] + bonusSpellsPerDay(levelNum)\n  }\n  //condense spell block into function\n  function spellCodeBlock(level, levelNum, levelRoman){\n    return (\n      <div className='spellItems'>\n      <div className='spellLevelWrapper'>\n      <h2 className='spellLevelHeader'>Level {levelRoman}</h2>\n      <em className='remainingSpells'>{totalSpells(level, levelNum)} remaining today</em>\n      </div>\n      <p className='spellList'>{displaySpells(level)}</p>\n      <hr/>\n      </div>\n    )\n  }\n  return (\n    <div>\n    <div className='spellContainer'>\n    <div className='spellItems'>\n    <div className='spellLevelWrapper'>\n    <h2 className='spellLevelHeader'>{casterType()}</h2>\n    <em className='remainingSpells'>{character.magic.spellsPerDay.zero} remaining today</em>\n    </div>\n    <p className='spellList'>{displaySpells('zero')}</p>\n    <hr/>\n    </div>\n    {spellCodeBlock('one', 1, 'I')}\n    {spellCodeBlock('two', 2, 'II')}\n    {spellCodeBlock('three', 3, 'III')}\n    {spellCodeBlock('four', 4, 'IV')}\n    {spellCodeBlock('five', 5, 'V')}\n    {spellCodeBlock('six', 6, 'VI')}\n    {spellCodeBlock('seven', 7, 'VII')}\n    {spellCodeBlock('eight', 8, 'VIII')}\n    {spellCodeBlock('nine', 9, 'IX')}\n    </div>\n    </div>\n  );\n}\n\nconst AbilitySelector = (props) => {\n  const [display, setDisplay] = useState('Spells')\n  function selection(display){\n    switch(display){\n      case 'Spells':\n        return <Spells />\n      case 'Abilities':\n        return <ActiveAbilities />\n      case 'SLAs':\n        return <SLAs />\n    }\n  }\n  function navButtonCodeBlock(name){\n    return(\n      <button id={name}\n              onClick={() => setDisplay(name)}\n              className={(display == name ? 'navbarItemsOn' : 'navbarItemsOff')}>\n          {name}\n      </button>\n    )\n  }\n  return(\n    <div>\n      <ul id='abilitySelector' className='navbarContainer'>\n        {navButtonCodeBlock('Spells')}\n        {navButtonCodeBlock('Abilities')}\n        {navButtonCodeBlock('SLAs')}\n      </ul>\n      <div id='abilityDisplay'>\n        {selection(display)}\n      </div>\n    </div>\n  )\n}\n\nconst KnownPassiveAbilities = (props) => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const ability = props.value\n  const formattedAbility = ability.replace(/\\_/g, ' ')\n  const buttonAndSpellClass = 'spellButtons ' + ability\n  return(\n    <button className={buttonAndSpellClass} onClick={() => setToggleInfo(!toggleInfo)}>{formattedAbility}</button>\n  )\n}\nconst PassiveAbilities = (props) => {\n  function displayAbilities(){\n    const abilities = Object.values(character.characterAbilities.passive).map(\n      (s) => <KnownActiveAbilities key={s} value={s} />\n    );\n    return abilities;\n  }\n  return(\n    <div className='spellContainer'>\n      <div className='spellItems'>\n        <p className='spellList'>{displayAbilities()}</p>\n      </div>\n    </div>\n  )\n}\nconst AbilityScores = (props) => {\n  return (\n    <div>\n    <div className='statsContainer'>\n    <h1 id='abilityScoresHeader'>Abilities</h1>\n    <div id='abilityScores'>\n    <p className='abilityScores'>STR: {str} | {strMod}</p> <button onClick={() => rollDice(20, strMod)}>roll</button>\n    <p className='abilityScores'>DEX: {dex} | {dexMod}</p>\n    <p className='abilityScores'>CON: {con} | {conMod}</p>\n    <p className='abilityScores'>INT: {int} | {intMod}</p>\n    <p className='abilityScores'>WIS: {wis} | {wisMod}</p>\n    <p className='abilityScores'>CHA: {cha} | {chaMod}</p>\n    </div>\n    </div>\n    </div>\n  );\n}\nconst SkillsListItem = (props) => {\n  // store props to make code simpler\n  const skills = props.skills\n  // replace underscore with space and store\n  let formattedSkill = skills[0].replace(/\\_/g, ' ');\n  // update variable replacing (Know)ledge with :\n  formattedSkill = formattedSkill.replace(/ledge/g, ':')\n  // store skill points separately\n  const skillPoints = skills[1];\n  // confirm class skill to add css class\n  function findClassSkills(skill){\n    if(character.classSkills.hasOwnProperty(skill)){\n      return ' classSkills'\n    }else{\n      return ''\n    }\n  }\n  console.log(findClassSkills(skills[0]))\n  return (\n    <li className={`skills${findClassSkills(skills[0])}`}>\n      {formattedSkill} | <span className='skillPoints'>{skillPoints}</span>\n    </li>\n  )\n}\nconst Skills = (props) =>  {\n  //put character's skills into array as [key, value]\n  let skillsArray = Object.keys(character.skills).map((skill) => {\n    return [skill, character.skills[skill]]\n  });\n  // put character's class skills into array as [key, value]\n  let classSkillsArray = Object.keys(character.classSkills).map((skill) => {\n    return [skill, character.classSkills[skill]];\n  });\n  // combine both arrays into new array, sorted alphabetically\n  let allSkills = [...skillsArray, ...classSkillsArray].sort();\n  // pass skills to child component\n  const skillsBlock = allSkills.map((s) =>\n    <SkillsListItem key={s} skills={s} />\n  );\nreturn(\n  <>\n    <h1 id='skillsHeader'>Skills</h1>\n    <ul id='skillsListWrapper' style={{listStyleType: 'none'}}>\n      <div id='skillsWrapper'>\n        {skillsBlock}\n      </div>\n    </ul>\n  </>\n);}\nconst StatsSelector = (props) => {\n  const [display, setDisplay] = useState('Skills')\n  function selection(display){\n    switch(display){\n      case 'Skills':\n        return <Skills />\n      case 'Scores':\n        return <AbilityScores />\n      case 'Passive':\n        return <PassiveAbilities />\n    }\n  }\n  function navButtonCodeBlock(name){\n    return(\n      <button id={name}\n              onClick={() => setDisplay(name)}\n              className={(display == name ? 'navbarItemsOn' : 'navbarItemsOff')}>\n          {name}\n      </button>\n    )\n  }\n  return(\n    <div>\n      <ul id='statsSelector' className='navbarContainer'>\n        {navButtonCodeBlock('Skills')}\n        {navButtonCodeBlock('Scores')}\n        {navButtonCodeBlock('Passive')}\n      </ul>\n      <div id='statsDisplay'>\n        {selection(display)}\n      </div>\n    </div>\n  )\n}\n\nconst BasicInfo = (props) => {\n//toggle for 'more' button\n  const [toggle, setToggle] = useState(false);\n//display conditional more/less\n  const moreLess = () => {\n    if(toggle){\n      return '(less)'\n    } else {\n      return '(more)'\n    }\n  }\n  const health = (\n      character.hitPoints.total - character.hitPoints.damage + character.hitPoints.temporaryHitPoints\n  );\n  const type = (character.type).map(\n    (t) => <CharacterType key={t} value={t} />\n  );\n  const classList = (character.class).map(\n    (c) => <CharacterClasses key={c} value={c} />\n  );\n  return (\n      <div>\n        <div className='topContainer'>\n            <button className={(toggle ? 'moreButtonOn' : 'moreButtonOff')} onClick={() => setToggle(!toggle)}>\n              <h1 id='nameAndLevel'>{character.name} ({character.level})</h1>\n              <em id='moreLess'>{moreLess()}</em>\n            </button>\n\n          {toggle == true &&\n            <div id='characterInfo'>\n              <div id='characterType'>type: <br /> {type}</div>\n              <ul id='classList'>class: <br /> {classList}</ul>\n            </div>\n          }\n          <div id='HPACDiceWrapper'>\n            <div id='hpacWrapper'>\n              <p id='hp'>hp: {health}</p>\n              <p id='ac'>ac: {character.armorClass.ac.total}</p>\n            </div>\n            <span id='diceRollResult'>{sessionStorage.diceRollResult}</span>\n          </div>\n        </div>\n      </div>\n    );\n}\nconst CharacterType = (props) => {\n  return(\n    <span>{props.value} / </span>\n  )\n}\nconst CharacterClasses = (props) => {\n  return(\n    <li>{props.value}</li>\n  )\n}\n\nconst MainDisplay = (props) => {\n  function screenSwitch(display) {\n    switch(display) {\n      case 'stats':\n        return <StatsSelector />\n      case 'ability':\n        return <AbilitySelector />\n      case 'items':\n        return <Items />\n    }\n  }\n\n    return(\n      <div>\n        {screenSwitch(props.display)}\n      </div>\n    );\n\n}\n\nconst Navbar = (props) => {\n  const statIcon = <i id='statIcon' className=\"far fa-chart-bar\"></i>;\n  const abilityIcon = <i id=\"spellIcon\" className=\"fas fa-hand-sparkles\"></i>;\n  const itemIcon = <i id='itemIcon' className=\"fas fa-scroll\"></i>;\n  function navButtonCodeBlock(name, icon){\n    return(\n      <button id={name}\n              onClick={() => props.setDisplay(name)}\n              className={(props.display == name ? 'navbarItemsOn' : 'navbarItemsOff')}>\n                      {icon}\n      </button>\n    )\n  }\n  return (\n    <div>\n      <ul className='navbarContainer'>\n        {navButtonCodeBlock('stats', statIcon)}\n        {navButtonCodeBlock('ability', abilityIcon)}\n        {navButtonCodeBlock('items', itemIcon)}\n      </ul>\n    </div>\n  );\n}\nconst App = () => {\n  const [display, setDisplay] = useState('stats')\n  return (\n    <div id='appWrapper'>\n      <div>\n        <div id='topWrapper'>\n          <BasicInfo />\n          <Navbar display={display} setDisplay={setDisplay} />\n        </div>\n        <div id='mainContent'>\n          <MainDisplay display={display} setDisplay={setDisplay} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}