{"ast":null,"code":"var _jsxFileName = \"/home/highdynamics/repos/dnd_app/src/components/dnd.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport useSWR from 'swr';\nimport Items from './Items.js';\nimport SLAs from './SLAs.js';\nimport './dnd.css';\n\nfunction rollDice(size, mod, use) {\n  const dice = Math.floor(Math.random() * size + 1);\n\n  function edgeRollClassAssignment(dice) {\n    if (dice === 1) {\n      return 'natOne';\n    } else if (dice === 20) {\n      return 'natTwenty';\n    } else {\n      return null;\n    }\n  }\n\n  const result = /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"rollUse\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, use), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"rollTopLine\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"rollTotal\",\n    className: edgeRollClassAssignment(dice),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, dice), \" \", /*#__PURE__*/React.createElement(\"span\", {\n    id: \"modTotal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 84\n    }\n  }, \" + \", mod, \" =\")), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"rollModTotal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, dice + mod));\n  return result;\n}\n\nexport const ReadTossDice = React.createContext(null);\nexport const GetSetDisplay = React.createContext(null);\nexport const GetSetDisplayTwo = React.createContext(null);\nexport const ToggleInfo = React.createContext(null);\nexport const Selection = React.createContext(null);\nexport const Character = React.createContext(null);\nexport const PrimaryModifier = React.createContext(null);\n/******************************Character Info****************************/\n\nfunction abilityModifier(character, ability) {\n  if (character.abilities.score[ability] === '--') {\n    return '--';\n  }\n\n  return Math.floor((character.abilities.score[ability] - 10) / 2);\n}\n\nfunction totalSpells(character, primaryModifier, level, levelNum) {\n  function bonusSpellsPerDay(levelNum) {\n    return Math.ceil((primaryModifier - (levelNum - 1)) / 4);\n  }\n\n  return character.magic.spellsPerDay[level] + bonusSpellsPerDay(levelNum);\n}\n\nfunction spellSave(character) {\n  return Math.floor(10 + character.abilities.primaryModifier('charisma'));\n}\n/******************************Character Info****************************/\n\n/*const ItemsHeld = (props) => {\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  const item = props.value\n  const formattedItem = item.replace(/_/g, ' ')\n  const buttonAndSpellClass = 'spellButtons ' + item\n  return(\n    <button className={buttonAndSpellClass} onClick={() => setToggleInfo(!toggleInfo)}>{formattedItem}</button>\n  )\n}\nconst Items = (props) => {\n  const character = useContext(Character)\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  function displayItems(){\n    const items = Object.values(character.items).map(\n      (s) => <ItemsHeld key={s} value={s} />\n    );\n    return items;\n  }\n  return(\n    <div>\n      <h1>Items</h1>\n      <div className='spellContainer'>\n        <div className='spellItems'>\n          <p className='spellList'>{displayItems()}</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst KnownSLAs = (props) => {\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  const spell = props.value\n  const formattedSpell = spell.replace(/_/g, ' ')\n  const buttonAndSpellClass = 'spellButtons ' + spell\n  return(\n    <button className={buttonAndSpellClass} onClick={() => setToggleInfo(!toggleInfo)}>{formattedSpell}</button>\n  )\n}\nconst SLAs = (props) => {\n  const character = useContext(Character)\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  //cantrips or orisons? or both?\n  function casterType() {\n    if (character.magic.type.arcane && character.magic.type.divine){\n      return 'Cantrips & Orisons'\n    } else if (character.magic.type.divine){\n      return 'Orisons'\n    } else if (character.magic.type.arcane){\n      return 'Cantrips'\n    }\n  }\n  function displaySLAs(level){\n    const slas = Object.values(character.magic.slas[level]).map(\n      (s) => <KnownSLAs key={s} value={s} />\n    );\n    return slas;\n  }\n  //condense SLA code block into function\n  function spellCodeBlock(level, levelNum, levelRoman){\n    return (\n      <div className='spellItems'>\n        <div className='spellLevelWrapper'>\n          <h2 className='spellLevelHeader'>Level {levelRoman}</h2>\n        </div>\n        <p className='spellList'>{displaySLAs(level)}</p>\n        <hr/>\n      </div>\n    )\n  }\n  return (\n    <div>\n      <div className='spellContainer'>\n        <div className='spellItems'>\n          <div className='spellLevelWrapper'>\n            <h2 className='spellLevelHeader'>{casterType()}</h2>\n          </div>\n          <p className='spellList'>{displaySLAs('zero')}</p>\n          <hr/>\n        </div>\n        {spellCodeBlock('one', 1, 'I')}\n        {spellCodeBlock('two', 2, 'II')}\n        {spellCodeBlock('three', 3, 'III')}\n        {spellCodeBlock('four', 4, 'IV')}\n        {spellCodeBlock('five', 5, 'V')}\n        {spellCodeBlock('six', 6, 'VI')}\n        {spellCodeBlock('seven', 7, 'VII')}\n        {spellCodeBlock('eight', 8, 'VIII')}\n        {spellCodeBlock('nine', 9, 'IX')}\n      </div>\n    </div>\n  );\n}\n*/\n\n\nconst KnownActiveAbilities = props => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const ability = props.value;\n  const formattedAbility = ability.replace(/_/g, ' ');\n  const buttonAndSpellClass = 'spellButtons ' + ability;\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: buttonAndSpellClass,\n    onClick: () => setToggleInfo(!toggleInfo),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 5\n    }\n  }, formattedAbility);\n};\n\nconst ActiveAbilities = props => {\n  const character = useContext(Character);\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n\n  function displayAbilities() {\n    const abilities = Object.values(character.characterAbilities.active).map(s => /*#__PURE__*/React.createElement(KnownActiveAbilities, {\n      key: s,\n      value: s,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 14\n      }\n    }));\n    return abilities;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellItems\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"spellList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }, displayAbilities())));\n};\n\nconst SpellInfo = props => {\n  //bring in react context\n  const character = useContext(Character);\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  const [selection, setSelection] = useContext(Selection); //edit string for render\n\n  const formattedSpell = selection.replace(/_/g, ' ');\n\n  function getSpellLevel(selection) {\n    let foundLevel = null;\n    Object.keys(character.magic.spells).forEach(level => {\n      if (Object.values(character.magic.spells[level]).includes(selection)) {\n        foundLevel = level;\n      }\n    });\n    return foundLevel;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"spellInfo\",\n    className: \"infoSheet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    id: \"useSpell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }\n  }, \"Use Spell\"), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"closeButton\",\n    onClick: () => setToggleInfo('Off'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }\n  }, \"x\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }\n  }, formattedSpell), \"Level: \", getSpellLevel(selection), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 40\n    }\n  }), \"Components:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 18\n    }\n  }), \"Casting Time:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 20\n    }\n  }), \"Range:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }\n  }), \"Target or Area:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 22\n    }\n  }), \"Duration:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 16\n    }\n  }), \"Saving Throw:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 20\n    }\n  }), \"SpellResistance:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 23\n    }\n  }));\n};\n\nconst Spellbook = props => {\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  const spell = props.value;\n  const formattedSpell = spell.replace(/_/g, ' ');\n  const buttonAndSpellClass = 'spellButtons ' + spell;\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: buttonAndSpellClass,\n    onClick: () => setToggleInfo(!toggleInfo),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 5\n    }\n  }, formattedSpell);\n};\n\nconst PrepSpells = props => {\n  const character = useContext(Character);\n  const primaryModifier = useContext(PrimaryModifier);\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo);\n\n  function casterType() {\n    if (character.magic.type.arcane && character.magic.type.divine) {\n      return 'Cantrips & Orisons';\n    } else if (character.magic.type.divine) {\n      return 'Orisons';\n    } else if (character.magic.type.arcane) {\n      return 'Cantrips';\n    }\n  }\n\n  function displaySpells(level) {\n    const spells = Object.values(character.magic.spellbook[level]).map(s => /*#__PURE__*/React.createElement(Spellbook, {\n      key: s,\n      value: s,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 14\n      }\n    }));\n    return spells;\n  }\n\n  function spellCodeBlock(level, levelNum, levelRoman) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spellItems\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spellLevelWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"spellLevelHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }\n    }, \"Level \", levelRoman), /*#__PURE__*/React.createElement(\"em\", {\n      className: \"remainingSpells\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }\n    }, totalSpells(character, primaryModifier, level, levelNum), \" remaining today\")), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"spellList\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }\n    }, displaySpells(level)), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    id: \"returnToSpells\",\n    onClick: () => setDisplayTwo('Spells'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-arrow-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellItems\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellLevelWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    id: \"levelZeroHeaderPrep\",\n    className: \"spellLevelHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }\n  }, casterType()), /*#__PURE__*/React.createElement(\"em\", {\n    className: \"remainingSpells\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }\n  }, totalSpells(character, primaryModifier, 'zero', 0), \" remaining today\")), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"spellList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 11\n    }\n  }, displaySpells('zero')), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 11\n    }\n  })), \" \", spellCodeBlock('one', 1, 'I'), spellCodeBlock('two', 2, 'II'), spellCodeBlock('three', 3, 'III'), spellCodeBlock('four', 4, 'IV'), spellCodeBlock('five', 5, 'V'), spellCodeBlock('six', 6, 'VI'), spellCodeBlock('seven', 7, 'VII'), spellCodeBlock('eight', 8, 'VIII'), spellCodeBlock('nine', 9, 'IX'))));\n};\n\nconst KnownSpells = props => {\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  const [selection, setSelection] = useContext(Selection);\n  const spell = props.value;\n  const formattedSpell = spell.replace(/_/g, ' ');\n  const buttonAndSpellClass = 'spellButtons ' + spell;\n\n  function displayInfo(spell) {\n    setToggleInfo('Spell');\n    setSelection(spell);\n  }\n\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: buttonAndSpellClass,\n    onClick: () => displayInfo(spell),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 5\n    }\n  }, formattedSpell + ' \\u221e');\n};\n\nconst Spells = props => {\n  const character = useContext(Character);\n  const primaryModifier = useContext(PrimaryModifier);\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo); //cantrips or orisons? or both?\n\n  function casterType() {\n    if (character.magic.type.arcane && character.magic.type.divine) {\n      return 'Cantrips & Orisons';\n    } else if (character.magic.type.divine) {\n      return 'Orisons';\n    } else if (character.magic.type.arcane) {\n      return 'Cantrips';\n    }\n  }\n\n  function displaySpells(level) {\n    const spells = Object.values(character.magic.spells[level]).map(s => /*#__PURE__*/React.createElement(KnownSpells, {\n      key: s,\n      value: s,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 14\n      }\n    }));\n    return spells;\n  } //condense spell block into function\n\n\n  function spellCodeBlock(level, levelNum, levelRoman) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spellItems\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spellLevelWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"spellLevelHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 7\n      }\n    }, \"Level \", levelRoman), /*#__PURE__*/React.createElement(\"em\", {\n      className: \"remainingSpells\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 7\n      }\n    }, totalSpells(character, primaryModifier, level, levelNum), \" remaining today\")), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"spellList\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 7\n      }\n    }, displaySpells(level)), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    id: \"prepSpellsButton\",\n    onClick: () => setDisplayTwo('Prep'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-book\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 40\n    }\n  }, \"PREP\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellItems\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellLevelWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    id: \"levelZeroHeader\",\n    className: \"spellLevelHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 13\n    }\n  }, casterType()), /*#__PURE__*/React.createElement(\"em\", {\n    className: \"remainingSpells\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 13\n    }\n  }, totalSpells(character, primaryModifier, 'zero', 0), \" remaining today\")), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"spellList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 5\n    }\n  }, displaySpells('zero')), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 5\n    }\n  })), spellCodeBlock('one', 1, 'I'), spellCodeBlock('two', 2, 'II'), spellCodeBlock('three', 3, 'III'), spellCodeBlock('four', 4, 'IV'), spellCodeBlock('five', 5, 'V'), spellCodeBlock('six', 6, 'VI'), spellCodeBlock('seven', 7, 'VII'), spellCodeBlock('eight', 8, 'VIII'), spellCodeBlock('nine', 9, 'IX')));\n};\n\nconst AbilitySelector = props => {\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo);\n\n  function navButtonCodeBlock(name) {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      id: name,\n      onClick: () => setDisplayTwo(name),\n      className: displayTwo === name ? 'navbarItemsOn' : 'navbarItemsOff',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 7\n      }\n    }, name);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    id: \"abilitySelector\",\n    className: \"navbarContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 7\n    }\n  }, navButtonCodeBlock('Spells'), navButtonCodeBlock('Abilities'), navButtonCodeBlock('SLAs')));\n};\n\nconst KnownPassiveAbilities = props => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const ability = props.value;\n  const formattedAbility = ability.replace(/_/g, ' ');\n  const buttonAndSpellClass = 'spellButtons ' + ability;\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: buttonAndSpellClass,\n    onClick: () => setToggleInfo(!toggleInfo),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 5\n    }\n  }, formattedAbility);\n};\n\nconst PassiveAbilities = props => {\n  const character = useContext(Character);\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n\n  function displayAbilities() {\n    const abilities = Object.values(character.characterAbilities.passive).map(s => /*#__PURE__*/React.createElement(KnownPassiveAbilities, {\n      key: s,\n      value: s,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 14\n      }\n    }));\n    return abilities;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spellItems\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"spellList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 9\n    }\n  }, displayAbilities())));\n};\n\nconst AbilityScores = props => {\n  const character = useContext(Character);\n  const str = character.abilities.score.strength;\n  const dex = character.abilities.score.dexterity;\n  const con = character.abilities.score.constitution;\n  const int = character.abilities.score.intelligence;\n  const wis = character.abilities.score.wisdom;\n  const cha = character.abilities.score.charisma;\n  const strMod = abilityModifier(character, 'strength');\n  const dexMod = abilityModifier(character, 'dexterity');\n  const conMod = abilityModifier(character, 'constitution');\n  const intMod = abilityModifier(character, 'intelligence');\n  const wisMod = abilityModifier(character, 'wisdom');\n  const chaMod = abilityModifier(character, 'charisma');\n  const [rollResult, setRollResult] = useContext(ReadTossDice);\n\n  function abilityScoreCodeBlock(abilityString, abilityScore, abilityMod) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      className: \"abilityScores\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"rollAbility\",\n      onClick: () => setRollResult(rollDice(20, abilityMod, abilityString)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 7\n      }\n    }, \"roll\"), abilityString, \": \", abilityScore, \" | \", abilityMod);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"statsContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    id: \"abilityScoresHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 5\n    }\n  }, \"Abilities\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"abilityScoresWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 5\n    }\n  }, abilityScoreCodeBlock('STR', str, strMod), abilityScoreCodeBlock('DEX', dex, dexMod), abilityScoreCodeBlock('CON', con, conMod), abilityScoreCodeBlock('INT', int, intMod), abilityScoreCodeBlock('WIS', wis, wisMod), abilityScoreCodeBlock('CHA', cha, chaMod))));\n};\n\nconst SkillsListItem = props => {\n  const character = useContext(Character);\n  const [rollResult, setRollResult] = useContext(ReadTossDice); // store props to make code simpler\n\n  const skills = props.skills; // replace underscore with space and store\n\n  let formattedSkill = skills[0].replace(/_/g, ' '); // update variable replacing (Know)ledge with :\n\n  formattedSkill = formattedSkill.replace(/ledge/g, ':'); // store skill points separately\n\n  const skillPoints = skills[1]; // confirm class skill to add css class\n\n  function findClassSkills(skill) {\n    if (character.classSkills.hasOwnProperty(skill)) {\n      return 'classSkills';\n    } else {\n      return '';\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: `skills ${findClassSkills(skills[0])} ${skills[0]}`,\n    onClick: () => setRollResult(rollDice(20, skillPoints, formattedSkill)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 5\n    }\n  }, formattedSkill, \" | \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"skillPoints\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 26\n    }\n  }, skillPoints));\n};\n\nconst Skills = props => {\n  const character = useContext(Character); //put character's skills into array as [key, value]\n\n  let skillsArray = Object.keys(character.skills).map(skill => {\n    return [skill, character.skills[skill]];\n  }); // put character's class skills into array as [key, value]\n\n  let classSkillsArray = Object.keys(character.classSkills).map(skill => {\n    return [skill, character.classSkills[skill]];\n  }); // combine both arrays into new array, sorted alphabetically\n\n  let allSkills = [...skillsArray, ...classSkillsArray].sort(); // pass skills to child component\n\n  const skillsBlock = allSkills.map(s => /*#__PURE__*/React.createElement(SkillsListItem, {\n    key: s,\n    skills: s,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 5\n    }\n  }));\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    id: \"skillsHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 5\n    }\n  }, \"Skills\"), /*#__PURE__*/React.createElement(\"ul\", {\n    id: \"skillsListWrapper\",\n    style: {\n      listStyleType: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"skillsWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 7\n    }\n  }, skillsBlock)));\n};\n\nconst StatsSelector = props => {\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo);\n\n  function navButtonCodeBlock(name) {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      id: name,\n      onClick: () => setDisplayTwo(name),\n      className: displayTwo === name ? 'navbarItemsOn' : 'navbarItemsOff',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 7\n      }\n    }, name);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    id: \"statsSelector\",\n    className: \"navbarContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 7\n    }\n  }, navButtonCodeBlock('Skills'), navButtonCodeBlock('Scores'), navButtonCodeBlock('Passive')));\n};\n\nconst BasicInfo = props => {\n  const character = useContext(Character);\n  const [rollResult, setRollResult] = useContext(ReadTossDice); //toggle for 'more' button\n\n  const [toggle, setToggle] = useState(false); //display conditional more/less\n\n  const moreLess = () => {\n    if (toggle) {\n      return '(less)';\n    } else {\n      return '(more)';\n    }\n  };\n\n  const health = character.hitPoints.total - character.hitPoints.damage + character.hitPoints.temporaryHitPoints;\n  const type = character.type.map(t => /*#__PURE__*/React.createElement(CharacterType, {\n    key: t,\n    value: t,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 12\n    }\n  }));\n  const classList = character.class.map(c => /*#__PURE__*/React.createElement(CharacterClasses, {\n    key: c,\n    value: c,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 12\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"topContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: toggle ? 'moreButtonOn' : 'moreButtonOff',\n    onClick: () => setToggle(!toggle),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    id: \"nameAndLevel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 15\n    }\n  }, character.name, \" (\", character.level, \")\"), /*#__PURE__*/React.createElement(\"em\", {\n    id: \"moreLess\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 548,\n      columnNumber: 15\n    }\n  }, moreLess())), toggle === true && /*#__PURE__*/React.createElement(\"div\", {\n    id: \"characterInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"characterType\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 15\n    }\n  }, \"type: \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 45\n    }\n  }), \" \", type), /*#__PURE__*/React.createElement(\"ul\", {\n    id: \"classList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 15\n    }\n  }, \"class: \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 41\n    }\n  }), \" \", classList)), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"HPACDiceWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"hpacWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    id: \"hp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 15\n    }\n  }, \"hp: \", health), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"ac\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 15\n    }\n  }, \"ac: \", character.armorClass.ac.total)), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"diceRollResultWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 13\n    }\n  }, rollResult))));\n};\n\nconst CharacterType = props => {\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 5\n    }\n  }, props.value, \" / \");\n};\n\nconst CharacterClasses = props => {\n  return /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 5\n    }\n  }, props.value);\n};\n\nconst MainDisplay = props => {\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo);\n  const [selection, setSelection] = useState('');\n\n  function screenSwitch(display) {\n    switch (display) {\n      case 'Skills':\n        return /*#__PURE__*/React.createElement(Skills, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 16\n          }\n        });\n\n      case 'Scores':\n        return /*#__PURE__*/React.createElement(AbilityScores, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 588,\n            columnNumber: 16\n          }\n        });\n\n      case 'Passive':\n        return /*#__PURE__*/React.createElement(PassiveAbilities, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 590,\n            columnNumber: 16\n          }\n        });\n\n      case 'Spells':\n        return /*#__PURE__*/React.createElement(Spells, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 592,\n            columnNumber: 16\n          }\n        });\n\n      case 'Abilities':\n        return /*#__PURE__*/React.createElement(ActiveAbilities, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 16\n          }\n        });\n\n      case 'SLAs':\n        return /*#__PURE__*/React.createElement(SLAs, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 596,\n            columnNumber: 16\n          }\n        });\n\n      case 'Prep':\n        return /*#__PURE__*/React.createElement(PrepSpells, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 598,\n            columnNumber: 16\n          }\n        });\n\n      case 'Items':\n        return /*#__PURE__*/React.createElement(Items, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 16\n          }\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(Skills, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 602,\n            columnNumber: 16\n          }\n        });\n    }\n  }\n\n  function infoSheet(toggleInfo) {\n    switch (toggleInfo) {\n      case 'Spell':\n        return /*#__PURE__*/React.createElement(SpellInfo, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 16\n          }\n        });\n\n      case 'Off':\n        return null;\n\n      default:\n        return null;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Selection.Provider, {\n    value: [selection, setSelection],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 617,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"infoSheet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 618,\n      columnNumber: 11\n    }\n  }, infoSheet(toggleInfo)), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"mainContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 11\n    }\n  }, screenSwitch(displayTwo))));\n};\n\nconst SecondaryNavbar = props => {\n  function navSwitch(display) {\n    switch (display) {\n      case 'stats':\n        return /*#__PURE__*/React.createElement(StatsSelector, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 629,\n            columnNumber: 16\n          }\n        });\n\n      case 'ability':\n        return /*#__PURE__*/React.createElement(AbilitySelector, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 631,\n            columnNumber: 16\n          }\n        });\n\n      case null:\n        return null;\n\n      default:\n        return /*#__PURE__*/React.createElement(StatsSelector, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 635,\n            columnNumber: 16\n          }\n        });\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"secondaryNavbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 640,\n      columnNumber: 9\n    }\n  }, navSwitch(props.display)));\n};\n\nconst Navbar = props => {\n  const statIcon = /*#__PURE__*/React.createElement(\"i\", {\n    id: \"statIcon\",\n    className: \"far fa-chart-bar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 645,\n      columnNumber: 20\n    }\n  });\n  const abilityIcon = /*#__PURE__*/React.createElement(\"i\", {\n    id: \"spellIcon\",\n    className: \"fas fa-hand-sparkles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 646,\n      columnNumber: 23\n    }\n  });\n  const itemIcon = /*#__PURE__*/React.createElement(\"i\", {\n    id: \"itemIcon\",\n    className: \"fas fa-scroll\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 647,\n      columnNumber: 20\n    }\n  });\n\n  function setBothDisplays(name, secondaryName) {\n    props.setDisplay(name);\n\n    if (secondaryName !== null) {\n      props.setDisplayTwo(secondaryName);\n    }\n  }\n\n  function navButtonCodeBlock(name, icon, secondaryName) {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      id: name,\n      onClick: () => setBothDisplays(name, secondaryName),\n      className: props.display == name ? 'navbarItemsOn' : 'navbarItemsOff',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 7\n      }\n    }, icon);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    id: \"primaryNavbar\",\n    className: \"navbarContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 7\n    }\n  }, navButtonCodeBlock('stats', statIcon, 'Skills'), navButtonCodeBlock('ability', abilityIcon, 'Spells'), navButtonCodeBlock(null, itemIcon, 'Items')));\n};\n\nconst App = props => {\n  const [display, setDisplay] = useState('stats');\n  const [displayTwo, setDisplayTwo] = useState('Skills');\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const [rollResult, setRollResult] = useState('Good luck,\\n' + props.character.name);\n  const [primaryModifier, setPrimaryModifier] = useState(abilityModifier(props.character, 'charisma'));\n  useEffect(function setDocTitle() {\n    document.title = props.character.name;\n  }, [props.character]);\n  return /*#__PURE__*/React.createElement(Character.Provider, {\n    value: props.character,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 686,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"appWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 688,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 689,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"topWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ReadTossDice.Provider, {\n    value: [rollResult, setRollResult],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 691,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(BasicInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 692,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Navbar, {\n    display: display,\n    setDisplay: setDisplay,\n    setDisplayTwo: setDisplayTwo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 694,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(GetSetDisplayTwo.Provider, {\n    value: [displayTwo, setDisplayTwo],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 695,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SecondaryNavbar, {\n    display: display,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 696,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(GetSetDisplay.Provider, {\n    value: [display, setDisplay],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 699,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(GetSetDisplayTwo.Provider, {\n    value: [displayTwo, setDisplayTwo],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 700,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ToggleInfo.Provider, {\n    value: [toggleInfo, setToggleInfo],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 701,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ReadTossDice.Provider, {\n    value: [rollResult, setRollResult],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 702,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(PrimaryModifier.Provider, {\n    value: [primaryModifier, setPrimaryModifier],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 703,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(MainDisplay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 704,\n      columnNumber: 19\n    }\n  })))))), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"bottomSpacer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 710,\n      columnNumber: 11\n    }\n  }))));\n};\n\nconst LoadApp = () => {\n  // Load data from the characters server endpoint\n  const {\n    data\n  } = useSWR('/api/characters'); // Before the data is loaded, it will be `undefined`\n\n  return data ? /*#__PURE__*/React.createElement(App, {\n    character: data.characters[0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 723,\n      columnNumber: 5\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, \"Loading...\");\n};\n\nexport default LoadApp;","map":{"version":3,"sources":["/home/highdynamics/repos/dnd_app/src/components/dnd.js"],"names":["React","useState","useContext","useEffect","useSWR","Items","SLAs","rollDice","size","mod","use","dice","Math","floor","random","edgeRollClassAssignment","result","ReadTossDice","createContext","GetSetDisplay","GetSetDisplayTwo","ToggleInfo","Selection","Character","PrimaryModifier","abilityModifier","character","ability","abilities","score","totalSpells","primaryModifier","level","levelNum","bonusSpellsPerDay","ceil","magic","spellsPerDay","spellSave","KnownActiveAbilities","props","toggleInfo","setToggleInfo","value","formattedAbility","replace","buttonAndSpellClass","ActiveAbilities","displayAbilities","Object","values","characterAbilities","active","map","s","SpellInfo","selection","setSelection","formattedSpell","getSpellLevel","foundLevel","keys","spells","forEach","includes","Spellbook","spell","PrepSpells","displayTwo","setDisplayTwo","casterType","type","arcane","divine","displaySpells","spellbook","spellCodeBlock","levelRoman","KnownSpells","displayInfo","Spells","AbilitySelector","navButtonCodeBlock","name","KnownPassiveAbilities","PassiveAbilities","passive","AbilityScores","str","strength","dex","dexterity","con","constitution","int","intelligence","wis","wisdom","cha","charisma","strMod","dexMod","conMod","intMod","wisMod","chaMod","rollResult","setRollResult","abilityScoreCodeBlock","abilityString","abilityScore","abilityMod","SkillsListItem","skills","formattedSkill","skillPoints","findClassSkills","skill","classSkills","hasOwnProperty","Skills","skillsArray","classSkillsArray","allSkills","sort","skillsBlock","listStyleType","StatsSelector","BasicInfo","toggle","setToggle","moreLess","health","hitPoints","total","damage","temporaryHitPoints","t","classList","class","c","armorClass","ac","CharacterType","CharacterClasses","MainDisplay","screenSwitch","display","infoSheet","SecondaryNavbar","navSwitch","Navbar","statIcon","abilityIcon","itemIcon","setBothDisplays","secondaryName","setDisplay","icon","App","setPrimaryModifier","setDocTitle","document","title","LoadApp","data","characters"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport useSWR from 'swr';\n\nimport Items from './Items.js'\nimport SLAs from './SLAs.js'\n\nimport './dnd.css';\n\nfunction rollDice(size, mod, use){\n  const dice = Math.floor((Math.random() * size) +1)\n  function edgeRollClassAssignment(dice){\n    if(dice === 1){\n      return 'natOne'\n    }else if(dice === 20){\n      return 'natTwenty'\n    }else{\n      return null\n    }\n  }\n  const result =\n  <span>\n    <span id='rollUse'>{use}</span>\n    <div id='rollTopLine'>\n      <span id='rollTotal' className={edgeRollClassAssignment(dice)}>{dice}</span> <span id='modTotal'> + {mod} =</span>\n    </div>\n    <p id='rollModTotal'>{dice + mod}</p>\n  </span>\n  return result\n}\nexport const ReadTossDice = React.createContext(null)\nexport const GetSetDisplay = React.createContext(null)\nexport const GetSetDisplayTwo = React.createContext(null)\nexport const ToggleInfo = React.createContext(null)\nexport const Selection = React.createContext(null)\nexport const Character = React.createContext(null)\nexport const PrimaryModifier = React.createContext(null)\n/******************************Character Info****************************/\nfunction abilityModifier(character, ability) {\n  if(character.abilities.score[ability] === '--'){\n    return '--'\n  }\n  return Math.floor((character.abilities.score[ability] - 10) / 2)\n}\n\nfunction totalSpells(character, primaryModifier, level, levelNum) {\n  function bonusSpellsPerDay(levelNum){\n    return Math.ceil((primaryModifier - (levelNum - 1)) / 4)\n  }\n  return character.magic.spellsPerDay[level] + bonusSpellsPerDay(levelNum)\n}\nfunction spellSave(character){\n  return Math.floor(10 + character.abilities.primaryModifier('charisma'))\n}\n/******************************Character Info****************************/\n/*const ItemsHeld = (props) => {\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  const item = props.value\n  const formattedItem = item.replace(/_/g, ' ')\n  const buttonAndSpellClass = 'spellButtons ' + item\n  return(\n    <button className={buttonAndSpellClass} onClick={() => setToggleInfo(!toggleInfo)}>{formattedItem}</button>\n  )\n}\nconst Items = (props) => {\n  const character = useContext(Character)\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  function displayItems(){\n    const items = Object.values(character.items).map(\n      (s) => <ItemsHeld key={s} value={s} />\n    );\n    return items;\n  }\n  return(\n    <div>\n      <h1>Items</h1>\n      <div className='spellContainer'>\n        <div className='spellItems'>\n          <p className='spellList'>{displayItems()}</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst KnownSLAs = (props) => {\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  const spell = props.value\n  const formattedSpell = spell.replace(/_/g, ' ')\n  const buttonAndSpellClass = 'spellButtons ' + spell\n  return(\n    <button className={buttonAndSpellClass} onClick={() => setToggleInfo(!toggleInfo)}>{formattedSpell}</button>\n  )\n}\nconst SLAs = (props) => {\n  const character = useContext(Character)\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  //cantrips or orisons? or both?\n  function casterType() {\n    if (character.magic.type.arcane && character.magic.type.divine){\n      return 'Cantrips & Orisons'\n    } else if (character.magic.type.divine){\n      return 'Orisons'\n    } else if (character.magic.type.arcane){\n      return 'Cantrips'\n    }\n  }\n  function displaySLAs(level){\n    const slas = Object.values(character.magic.slas[level]).map(\n      (s) => <KnownSLAs key={s} value={s} />\n    );\n    return slas;\n  }\n  //condense SLA code block into function\n  function spellCodeBlock(level, levelNum, levelRoman){\n    return (\n      <div className='spellItems'>\n        <div className='spellLevelWrapper'>\n          <h2 className='spellLevelHeader'>Level {levelRoman}</h2>\n        </div>\n        <p className='spellList'>{displaySLAs(level)}</p>\n        <hr/>\n      </div>\n    )\n  }\n  return (\n    <div>\n      <div className='spellContainer'>\n        <div className='spellItems'>\n          <div className='spellLevelWrapper'>\n            <h2 className='spellLevelHeader'>{casterType()}</h2>\n          </div>\n          <p className='spellList'>{displaySLAs('zero')}</p>\n          <hr/>\n        </div>\n        {spellCodeBlock('one', 1, 'I')}\n        {spellCodeBlock('two', 2, 'II')}\n        {spellCodeBlock('three', 3, 'III')}\n        {spellCodeBlock('four', 4, 'IV')}\n        {spellCodeBlock('five', 5, 'V')}\n        {spellCodeBlock('six', 6, 'VI')}\n        {spellCodeBlock('seven', 7, 'VII')}\n        {spellCodeBlock('eight', 8, 'VIII')}\n        {spellCodeBlock('nine', 9, 'IX')}\n      </div>\n    </div>\n  );\n}\n*/\nconst KnownActiveAbilities = (props) => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const ability = props.value\n  const formattedAbility = ability.replace(/_/g, ' ')\n  const buttonAndSpellClass = 'spellButtons ' + ability\n  return(\n    <button className={buttonAndSpellClass} onClick={() => setToggleInfo(!toggleInfo)}>{formattedAbility}</button>\n  )\n}\nconst ActiveAbilities = (props) => {\n  const character = useContext(Character)\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  function displayAbilities(){\n    const abilities = Object.values(character.characterAbilities.active).map(\n      (s) => <KnownActiveAbilities key={s} value={s} />\n    );\n    return abilities;\n  }\n  return(\n    <div className='spellContainer'>\n      <div className='spellItems'>\n        <p className='spellList'>{displayAbilities()}</p>\n      </div>\n    </div>\n  )\n}\nconst SpellInfo = (props) => {\n  //bring in react context\n  const character = useContext(Character)\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  const [selection, setSelection] = useContext(Selection);\n  //edit string for render\n  const formattedSpell = selection.replace(/_/g, ' ')\n  function getSpellLevel(selection){\n    let foundLevel = null;\n    Object.keys(character.magic.spells).forEach((level) => {\n      if(Object.values(character.magic.spells[level]).includes(selection)){\n        foundLevel = level;\n      }\n    })\n    return foundLevel;\n  }\n  return (\n    <div id='spellInfo' className='infoSheet'>\n      <button id='useSpell'>Use Spell</button>\n      <button id='closeButton' onClick={() => setToggleInfo('Off')}>x</button>\n      <h3>{formattedSpell}</h3>\n      Level: {getSpellLevel(selection)}<br />\n      Components:<br />\n      Casting Time:<br />\n      Range:<br />\n      Target or Area:<br />\n      Duration:<br />\n      Saving Throw:<br />\n      SpellResistance:<br />\n    </div>\n  )\n}\nconst Spellbook = (props) => {\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  const spell = props.value\n  const formattedSpell = spell.replace(/_/g, ' ')\n  const buttonAndSpellClass = 'spellButtons ' + spell\n  return(\n    <button className={buttonAndSpellClass} onClick={() => setToggleInfo(!toggleInfo)}>{formattedSpell}</button>\n  )\n}\nconst PrepSpells = (props) => {\n  const character = useContext(Character)\n  const primaryModifier = useContext(PrimaryModifier)\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo)\n  function casterType() {\n    if (character.magic.type.arcane && character.magic.type.divine){\n      return 'Cantrips & Orisons'\n    } else if (character.magic.type.divine){\n      return 'Orisons'\n    } else if (character.magic.type.arcane){\n      return 'Cantrips'\n    }\n  }\n  function displaySpells(level){\n    const spells = Object.values(character.magic.spellbook[level]).map(\n      (s) => <Spellbook key={s} value={s} />\n    );\n    return spells;\n  }\n  function spellCodeBlock(level, levelNum, levelRoman){\n    return (\n      <div className='spellItems'>\n        <div className='spellLevelWrapper'>\n          <h2 className='spellLevelHeader'>Level {levelRoman}</h2>\n          <em className='remainingSpells'>{totalSpells(character, primaryModifier, level, levelNum)} remaining today</em>\n        </div>\n        <p className='spellList'>{displaySpells(level)}</p>\n        <hr/>\n      </div>\n    )\n  }\n  return (\n    <>\n      <div>\n        <button id='returnToSpells' onClick={() => setDisplayTwo('Spells')}>\n          <i className=\"fas fa-arrow-left\"></i>\n        </button>\n      <div className='spellContainer'>\n        <div className='spellItems'>\n          <div className='spellLevelWrapper'>\n            <h2 id=\"levelZeroHeaderPrep\" className='spellLevelHeader'>{casterType()}</h2>\n            <em className='remainingSpells'>{totalSpells(character, primaryModifier, 'zero', 0)} remaining today</em>\n          </div>\n          <p className='spellList'>{displaySpells('zero')}</p>\n          <hr/>\n        </div> {/*0*/}\n        {spellCodeBlock('one', 1, 'I')}\n        {spellCodeBlock('two', 2, 'II')}\n        {spellCodeBlock('three', 3, 'III')}\n        {spellCodeBlock('four', 4, 'IV')}\n        {spellCodeBlock('five', 5, 'V')}\n        {spellCodeBlock('six', 6, 'VI')}\n        {spellCodeBlock('seven', 7, 'VII')}\n        {spellCodeBlock('eight', 8, 'VIII')}\n        {spellCodeBlock('nine', 9, 'IX')}\n      </div>\n    </div>\n    </>\n  )\n}\nconst KnownSpells = (props) => {\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  const [selection, setSelection] = useContext(Selection);\n  const spell = props.value;\n  const formattedSpell = spell.replace(/_/g, ' ');\n  const buttonAndSpellClass = 'spellButtons ' + spell;\n  function displayInfo(spell){\n    setToggleInfo('Spell');\n    setSelection(spell);\n  }\n  return(\n    <button className={buttonAndSpellClass} onClick={() => displayInfo(spell)}>{formattedSpell + ' \\u221e'}</button>\n  )\n}\nconst Spells = (props) => {\n  const character = useContext(Character)\n  const primaryModifier = useContext(PrimaryModifier)\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo);\n  //cantrips or orisons? or both?\n  function casterType() {\n    if (character.magic.type.arcane && character.magic.type.divine){\n      return 'Cantrips & Orisons'\n    } else if (character.magic.type.divine){\n      return 'Orisons'\n    } else if (character.magic.type.arcane){\n      return 'Cantrips'\n    }\n  }\n  function displaySpells(level){\n    const spells = Object.values(character.magic.spells[level]).map(\n      (s) => <KnownSpells key={s} value={s} />\n    );\n    return spells;\n  }\n  //condense spell block into function\n  function spellCodeBlock(level, levelNum, levelRoman){\n    return (\n      <div className='spellItems'>\n      <div className='spellLevelWrapper'>\n      <h2 className='spellLevelHeader'>Level {levelRoman}</h2>\n      <em className='remainingSpells'>{totalSpells(character, primaryModifier, level, levelNum)} remaining today</em>\n      </div>\n      <p className='spellList'>{displaySpells(level)}</p>\n      <hr/>\n      </div>\n    )\n  }\n  return (\n    <div>\n      <button id='prepSpellsButton' onClick={() => setDisplayTwo('Prep')}>\n        <i className=\"fas fa-book\"></i><span>PREP</span>\n      </button>\n      <div className='spellContainer'>\n        <div className='spellItems'>\n          <div className='spellLevelWrapper'>\n            <h2 id='levelZeroHeader' className='spellLevelHeader'>{casterType()}</h2>\n            <em className='remainingSpells'>{totalSpells(character, primaryModifier, 'zero', 0)} remaining today</em>\n          </div>\n    <p className='spellList'>{displaySpells('zero')}</p>\n    <hr/>\n    </div>\n    {spellCodeBlock('one', 1, 'I')}\n    {spellCodeBlock('two', 2, 'II')}\n    {spellCodeBlock('three', 3, 'III')}\n    {spellCodeBlock('four', 4, 'IV')}\n    {spellCodeBlock('five', 5, 'V')}\n    {spellCodeBlock('six', 6, 'VI')}\n    {spellCodeBlock('seven', 7, 'VII')}\n    {spellCodeBlock('eight', 8, 'VIII')}\n    {spellCodeBlock('nine', 9, 'IX')}\n    </div>\n    </div>\n  );\n}\n\nconst AbilitySelector = (props) => {\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo)\n  function navButtonCodeBlock(name){\n    return(\n      <button id={name}\n              onClick={() => setDisplayTwo(name)}\n              className={(displayTwo === name ? 'navbarItemsOn' : 'navbarItemsOff')}>\n          {name}\n      </button>\n    )\n  }\n  return(\n    <div>\n      <ul id='abilitySelector' className='navbarContainer'>\n        {navButtonCodeBlock('Spells')}\n        {navButtonCodeBlock('Abilities')}\n        {navButtonCodeBlock('SLAs')}\n      </ul>\n    </div>\n  )\n}\n\nconst KnownPassiveAbilities = (props) => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const ability = props.value\n  const formattedAbility = ability.replace(/_/g, ' ')\n  const buttonAndSpellClass = 'spellButtons ' + ability\n  return(\n    <button className={buttonAndSpellClass} onClick={() => setToggleInfo(!toggleInfo)}>{formattedAbility}</button>\n  )\n}\nconst PassiveAbilities = (props) => {\n  const character = useContext(Character)\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  function displayAbilities(){\n    const abilities = Object.values(character.characterAbilities.passive).map(\n      (s) => <KnownPassiveAbilities key={s} value={s} />\n    );\n    return abilities;\n  }\n  return(\n    <div className='spellContainer'>\n      <div className='spellItems'>\n        <p className='spellList'>{displayAbilities()}</p>\n      </div>\n    </div>\n  )\n}\n\n\nconst AbilityScores = (props) => {\n  const character = useContext(Character)\n  const str = character.abilities.score.strength\n  const dex = character.abilities.score.dexterity\n  const con = character.abilities.score.constitution\n  const int = character.abilities.score.intelligence\n  const wis = character.abilities.score.wisdom\n  const cha = character.abilities.score.charisma\n  const strMod = abilityModifier(character, 'strength')\n  const dexMod = abilityModifier(character, 'dexterity')\n  const conMod = abilityModifier(character, 'constitution')\n  const intMod = abilityModifier(character, 'intelligence')\n  const wisMod = abilityModifier(character, 'wisdom')\n  const chaMod = abilityModifier(character, 'charisma')\n\n  const [rollResult, setRollResult] = useContext(ReadTossDice)\n  function abilityScoreCodeBlock(abilityString, abilityScore, abilityMod){\n    return(\n    <p className='abilityScores'>\n      {/*button appears on same line*/}\n      <button className='rollAbility' onClick={() => setRollResult(rollDice(20, abilityMod, abilityString))}>roll</button>\n      {abilityString}: {abilityScore} | {abilityMod}\n    </p>\n    )\n  }\n  return (\n    <div>\n    <div id='statsContainer'>\n    <h1 id='abilityScoresHeader'>Abilities</h1>\n    <div id='abilityScoresWrapper'>\n      {abilityScoreCodeBlock('STR', str, strMod)}\n      {abilityScoreCodeBlock('DEX', dex, dexMod)}\n      {abilityScoreCodeBlock('CON', con, conMod)}\n      {abilityScoreCodeBlock('INT', int, intMod)}\n      {abilityScoreCodeBlock('WIS', wis, wisMod)}\n      {abilityScoreCodeBlock('CHA', cha, chaMod)}\n    </div>\n    </div>\n    </div>\n  );\n}\nconst SkillsListItem = (props) => {\n  const character = useContext(Character)\n  const [rollResult, setRollResult] = useContext(ReadTossDice);\n  // store props to make code simpler\n  const skills = props.skills\n  // replace underscore with space and store\n  let formattedSkill = skills[0].replace(/_/g, ' ');\n  // update variable replacing (Know)ledge with :\n  formattedSkill = formattedSkill.replace(/ledge/g, ':')\n  // store skill points separately\n  const skillPoints = skills[1];\n  // confirm class skill to add css class\n  function findClassSkills(skill){\n    if(character.classSkills.hasOwnProperty(skill)){\n      return 'classSkills'\n    }else{\n      return ''\n    }\n  }\n  return (\n    <button\n      className={`skills ${findClassSkills(skills[0])} ${skills[0]}`}\n      onClick={() => setRollResult(rollDice(20, skillPoints, formattedSkill))}>\n      {formattedSkill} | <span className='skillPoints'>{skillPoints}</span>\n    </button>\n  )\n}\nconst Skills = (props) =>  {\n  const character = useContext(Character)\n  //put character's skills into array as [key, value]\n  let skillsArray = Object.keys(character.skills).map((skill) => {\n    return [skill, character.skills[skill]]\n  });\n  // put character's class skills into array as [key, value]\n  let classSkillsArray = Object.keys(character.classSkills).map((skill) => {\n    return [skill, character.classSkills[skill]];\n  });\n  // combine both arrays into new array, sorted alphabetically\n  let allSkills = [...skillsArray, ...classSkillsArray].sort();\n  // pass skills to child component\n  const skillsBlock = allSkills.map((s) =>\n    <SkillsListItem key={s} skills={s} />\n  );\nreturn(\n  <>\n    <h1 id='skillsHeader'>Skills</h1>\n    <ul id='skillsListWrapper' style={{listStyleType: 'none'}}>\n      <div id='skillsWrapper'>\n        {skillsBlock}\n      </div>\n    </ul>\n  </>\n);}\nconst StatsSelector = (props) => {\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo);\n  function navButtonCodeBlock(name){\n    return(\n      <button id={name}\n              onClick={() => setDisplayTwo(name)}\n              className={(displayTwo === name ? 'navbarItemsOn' : 'navbarItemsOff')}>\n          {name}\n      </button>\n    )\n  }\n  return(\n    <div>\n      <ul id='statsSelector' className='navbarContainer'>\n        {navButtonCodeBlock('Skills')}\n        {navButtonCodeBlock('Scores')}\n        {navButtonCodeBlock('Passive')}\n      </ul>\n    {/*  <div id='statsDisplay'>\n        {selection(display)}\n      </div>   */}\n    </div>\n  )\n}\n\nconst BasicInfo = (props) => {\n  const character = useContext(Character)\n  const [rollResult, setRollResult] = useContext(ReadTossDice);\n//toggle for 'more' button\n  const [toggle, setToggle] = useState(false);\n//display conditional more/less\n  const moreLess = () => {\n    if(toggle){\n      return '(less)'\n    } else {\n      return '(more)'\n    }\n  }\n  const health = (\n      character.hitPoints.total - character.hitPoints.damage + character.hitPoints.temporaryHitPoints\n  );\n  const type = (character.type).map(\n    (t) => <CharacterType key={t} value={t} />\n  );\n  const classList = (character.class).map(\n    (c) => <CharacterClasses key={c} value={c} />\n  );\n  return (\n      <div>\n        <div className='topContainer'>\n            <button className={(toggle ? 'moreButtonOn' : 'moreButtonOff')} onClick={() => setToggle(!toggle)}>\n              <h1 id='nameAndLevel'>{character.name} ({character.level})</h1>\n              <em id='moreLess'>{moreLess()}</em>\n            </button>\n\n          {toggle === true &&\n            <div id='characterInfo'>\n              <div id='characterType'>type: <br /> {type}</div>\n              <ul id='classList'>class: <br /> {classList}</ul>\n            </div>\n          }\n          <div id='HPACDiceWrapper'>\n            <div id='hpacWrapper'>\n              <p id='hp'>hp: {health}</p>\n              <p id='ac'>ac: {character.armorClass.ac.total}</p>\n            </div>\n            <div id='diceRollResultWrapper'>{rollResult}</div>\n          </div>\n        </div>\n      </div>\n    );\n}\nconst CharacterType = (props) => {\n  return(\n    <span>{props.value} / </span>\n  )\n}\nconst CharacterClasses = (props) => {\n  return(\n    <li>{props.value}</li>\n  )\n}\n\nconst MainDisplay = (props) => {\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo);\n  const [selection, setSelection] = useState('')\n  function screenSwitch(display){\n    switch(display) {\n      case 'Skills':\n        return <Skills />\n      case 'Scores':\n        return <AbilityScores />\n      case 'Passive':\n        return <PassiveAbilities />\n      case 'Spells':\n        return <Spells />\n      case 'Abilities':\n        return <ActiveAbilities />\n      case 'SLAs':\n        return <SLAs />\n      case 'Prep':\n        return <PrepSpells />\n      case 'Items':\n        return <Items />\n      default:\n        return <Skills />\n    }\n  }\n  function infoSheet(toggleInfo){\n    switch(toggleInfo){\n      case 'Spell':\n        return <SpellInfo />\n      case 'Off':\n        return null\n      default:\n        return null\n    }\n  }\n    return(\n      <div>\n        <Selection.Provider value={[selection, setSelection]}>\n          <div id='infoSheet'>{infoSheet(toggleInfo)}</div>\n          <div id='mainContent'>{screenSwitch(displayTwo)}</div>\n        </Selection.Provider>\n      </div>\n    );\n\n}\nconst SecondaryNavbar = (props) => {\n  function navSwitch(display){\n    switch(display){\n      case 'stats':\n        return <StatsSelector />\n      case 'ability':\n        return <AbilitySelector />\n      case null:\n        return null\n      default:\n        return <StatsSelector />\n    }\n  }\n  return(\n      <>\n        <div id='secondaryNavbar'>{navSwitch(props.display)}</div>\n      </>\n  )\n}\nconst Navbar = (props) => {\n  const statIcon = <i id='statIcon' className=\"far fa-chart-bar\"></i>;\n  const abilityIcon = <i id=\"spellIcon\" className=\"fas fa-hand-sparkles\"></i>;\n  const itemIcon = <i id='itemIcon' className=\"fas fa-scroll\"></i>;\n  function setBothDisplays(name, secondaryName){\n    props.setDisplay(name);\n    if(secondaryName !== null){\n      props.setDisplayTwo(secondaryName)\n    }\n  }\n  function navButtonCodeBlock(name, icon, secondaryName){\n    return(\n      <button id={name}\n              onClick={() => setBothDisplays(name, secondaryName)}\n              className={(props.display == name ? 'navbarItemsOn' : 'navbarItemsOff')}>\n                      {icon}\n      </button>\n    )\n  }\n  return (\n    <div>\n      <ul id='primaryNavbar' className='navbarContainer'>\n        {navButtonCodeBlock('stats', statIcon, 'Skills')}\n        {navButtonCodeBlock('ability', abilityIcon, 'Spells')}\n        {navButtonCodeBlock(null, itemIcon, 'Items')}\n      </ul>\n    </div>\n  );\n}\n\nconst App = (props) => {\n  const [display, setDisplay] = useState('stats')\n  const [displayTwo, setDisplayTwo] = useState('Skills')\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const [rollResult, setRollResult] = useState('Good luck,\\n' + props.character.name)\n  const [primaryModifier, setPrimaryModifier] = useState(abilityModifier(props.character, 'charisma'))\n\n  useEffect(function setDocTitle() {\n    document.title = props.character.name;\n  }, [props.character])\n\n  return (\n    <Character.Provider value={props.character}>\n\n      <div id='appWrapper'>\n        <div>\n          <div id='topWrapper'>\n            <ReadTossDice.Provider value={[rollResult, setRollResult]}>\n              <BasicInfo />\n            </ReadTossDice.Provider>\n            <Navbar display={display} setDisplay={setDisplay} setDisplayTwo={setDisplayTwo} />\n            <GetSetDisplayTwo.Provider value={[displayTwo, setDisplayTwo]}>\n              <SecondaryNavbar display={display}/>\n            </GetSetDisplayTwo.Provider>\n          </div>\n          <GetSetDisplay.Provider value={[display, setDisplay]}>\n          <GetSetDisplayTwo.Provider value={[displayTwo, setDisplayTwo]}>\n            <ToggleInfo.Provider value={[toggleInfo, setToggleInfo]}>\n              <ReadTossDice.Provider value={[rollResult, setRollResult]}>\n                <PrimaryModifier.Provider value={[primaryModifier, setPrimaryModifier]}>\n                  <MainDisplay />\n                </PrimaryModifier.Provider>\n              </ReadTossDice.Provider>\n            </ToggleInfo.Provider>\n          </GetSetDisplayTwo.Provider>\n          </GetSetDisplay.Provider>\n          <div id='bottomSpacer'></div>\n        </div>\n      </div>\n    </Character.Provider>\n  )\n}\n\nconst LoadApp = () => {\n  // Load data from the characters server endpoint\n  const {data} = useSWR('/api/characters')\n\n  // Before the data is loaded, it will be `undefined`\n  return data ? (\n    <App character={data.characters[0]} />\n  ) : <>Loading...</>\n}\n\nexport default LoadApp\n"]},"metadata":{},"sourceType":"module"}