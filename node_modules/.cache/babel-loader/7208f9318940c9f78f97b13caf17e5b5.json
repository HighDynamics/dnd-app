{"ast":null,"code":"var _jsxFileName = \"/home/highdynamics/repos/dnd_app/src/components/dnd.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport useSWR from 'swr';\nimport Items from './Items.js';\nimport SLAs from './SLAs.js';\nimport ActiveAbilities from './ActiveAbilities.js';\nimport SpellInfo from './SpellInfo.js';\nimport PrepSpells from './PrepSpells.js';\nimport Spells from './Spells.js';\nimport PassiveAbilities from './PassiveAbilities.js';\nimport * as Navbar from './Navbars.js';\nimport AbilityScores from './AbilityScores.js';\nimport Skills from './Skills.js';\nimport './dnd.css';\nexport function rollDice(size, mod, use) {\n  const dice = Math.floor(Math.random() * size + 1);\n\n  function edgeRollClassAssignment(dice) {\n    if (dice === 1) {\n      return 'natOne';\n    } else if (dice === 20) {\n      return 'natTwenty';\n    } else {\n      return null;\n    }\n  }\n\n  const result = /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"rollUse\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, use), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"rollTopLine\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"rollTotal\",\n    className: edgeRollClassAssignment(dice),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, dice), \" \", /*#__PURE__*/React.createElement(\"span\", {\n    id: \"modTotal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 84\n    }\n  }, \" + \", mod, \" =\")), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"rollModTotal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, dice + mod));\n  return result;\n}\nexport const ReadTossDice = React.createContext(null);\nexport const GetSetDisplay = React.createContext(null);\nexport const GetSetDisplayTwo = React.createContext(null);\nexport const ToggleInfo = React.createContext(null);\nexport const Selection = React.createContext(null);\nexport const Character = React.createContext(null);\nexport const PrimaryModifier = React.createContext(null);\n/******************************Character Info****************************/\n\nexport function abilityModifier(character, ability) {\n  if (character.abilities.score[ability] === '--') {\n    return '--';\n  }\n\n  return Math.floor((character.abilities.score[ability] - 10) / 2);\n}\nexport function totalSpells(character, primaryModifier, level, levelNum) {\n  function bonusSpellsPerDay(levelNum) {\n    return Math.ceil((primaryModifier - (levelNum - 1)) / 4);\n  }\n\n  return character.magic.spellsPerDay[level] + bonusSpellsPerDay(levelNum);\n}\n/******************************Character Info****************************/\n\n/*const AbilityScores = (props) => {\n  const character = useContext(Character)\n  const str = character.abilities.score.strength\n  const dex = character.abilities.score.dexterity\n  const con = character.abilities.score.constitution\n  const int = character.abilities.score.intelligence\n  const wis = character.abilities.score.wisdom\n  const cha = character.abilities.score.charisma\n  const strMod = abilityModifier(character, 'strength')\n  const dexMod = abilityModifier(character, 'dexterity')\n  const conMod = abilityModifier(character, 'constitution')\n  const intMod = abilityModifier(character, 'intelligence')\n  const wisMod = abilityModifier(character, 'wisdom')\n  const chaMod = abilityModifier(character, 'charisma')\n\n  const [rollResult, setRollResult] = useContext(ReadTossDice)\n  function abilityScoreCodeBlock(abilityString, abilityScore, abilityMod){\n    return(\n    <p className='abilityScores'>\n      {/*button appears on same line*}\n      <button className='rollAbility' onClick={() => setRollResult(rollDice(20, abilityMod, abilityString))}>roll</button>\n      {abilityString}: {abilityScore} | {abilityMod}\n    </p>\n    )\n  }\n  return (\n    <div>\n    <div id='statsContainer'>\n    <h1 id='abilityScoresHeader'>Abilities</h1>\n    <div id='abilityScoresWrapper'>\n      {abilityScoreCodeBlock('STR', str, strMod)}\n      {abilityScoreCodeBlock('DEX', dex, dexMod)}\n      {abilityScoreCodeBlock('CON', con, conMod)}\n      {abilityScoreCodeBlock('INT', int, intMod)}\n      {abilityScoreCodeBlock('WIS', wis, wisMod)}\n      {abilityScoreCodeBlock('CHA', cha, chaMod)}\n    </div>\n    </div>\n    </div>\n  );\n}\n\nconst SkillsListItem = (props) => {\n  const character = useContext(Character)\n  const [rollResult, setRollResult] = useContext(ReadTossDice);\n  // store props to make code simpler\n  const skills = props.skills\n  // replace underscore with space and store\n  let formattedSkill = skills[0].replace(/_/g, ' ');\n  // update variable replacing (Know)ledge with :\n  formattedSkill = formattedSkill.replace(/ledge/g, ':')\n  // store skill points separately\n  const skillPoints = skills[1];\n  // confirm class skill to add css class\n  function findClassSkills(skill){\n    if(character.classSkills.hasOwnProperty(skill)){\n      return 'classSkills'\n    }else{\n      return ''\n    }\n  }\n  return (\n    <button\n      className={`skills ${findClassSkills(skills[0])} ${skills[0]}`}\n      onClick={() => setRollResult(rollDice(20, skillPoints, formattedSkill))}>\n      {formattedSkill} | <span className='skillPoints'>{skillPoints}</span>\n    </button>\n  )\n}\nconst Skills = (props) =>  {\n  const character = useContext(Character)\n  //put character's skills into array as [key, value]\n  let skillsArray = Object.keys(character.skills).map((skill) => {\n    return [skill, character.skills[skill]]\n  });\n  // put character's class skills into array as [key, value]\n  let classSkillsArray = Object.keys(character.classSkills).map((skill) => {\n    return [skill, character.classSkills[skill]];\n  });\n  // combine both arrays into new array, sorted alphabetically\n  let allSkills = [...skillsArray, ...classSkillsArray].sort();\n  // pass skills to child component\n  const skillsBlock = allSkills.map((s) =>\n    <SkillsListItem key={s} skills={s} />\n  );\nreturn(\n  <>\n    <h1 id='skillsHeader'>Skills</h1>\n    <ul id='skillsListWrapper' style={{listStyleType: 'none'}}>\n      <div id='skillsWrapper'>\n        {skillsBlock}\n      </div>\n    </ul>\n  </>\n  );\n}\n\nconst StatsSelector = (props) => {\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo);\n  function navButtonCodeBlock(name){\n    return(\n      <button id={name}\n              onClick={() => setDisplayTwo(name)}\n              className={(displayTwo === name ? 'navbarItemsOn' : 'navbarItemsOff')}>\n          {name}\n      </button>\n    )\n  }\n  return(\n    <div>\n      <ul id='statsSelector' className='navbarContainer'>\n        {navButtonCodeBlock('Skills')}\n        {navButtonCodeBlock('Scores')}\n        {navButtonCodeBlock('Passive')}\n      </ul>\n    </div>\n  )\n}\n*/\n\nconst BasicInfo = props => {\n  const character = useContext(Character);\n  const [rollResult, setRollResult] = useContext(ReadTossDice); //toggle for 'more' button\n\n  const [toggle, setToggle] = useState(false); //display conditional more/less\n\n  const moreLess = () => {\n    if (toggle) {\n      return '(less)';\n    } else {\n      return '(more)';\n    }\n  };\n\n  const health = character.hitPoints.total - character.hitPoints.damage + character.hitPoints.temporaryHitPoints;\n  const type = character.type.map(t => /*#__PURE__*/React.createElement(CharacterType, {\n    key: t,\n    value: t,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 12\n    }\n  }));\n  const classList = character.class.map(c => /*#__PURE__*/React.createElement(CharacterClasses, {\n    key: c,\n    value: c,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 12\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"topContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: toggle ? 'moreButtonOn' : 'moreButtonOff',\n    onClick: () => setToggle(!toggle),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    id: \"nameAndLevel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 15\n    }\n  }, character.name, \" (\", character.level, \")\"), /*#__PURE__*/React.createElement(\"em\", {\n    id: \"moreLess\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 15\n    }\n  }, moreLess())), toggle === true && /*#__PURE__*/React.createElement(\"div\", {\n    id: \"characterInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"characterType\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 15\n    }\n  }, \"type: \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 45\n    }\n  }), \" \", type), /*#__PURE__*/React.createElement(\"ul\", {\n    id: \"classList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 15\n    }\n  }, \"class: \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 41\n    }\n  }), \" \", classList)), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"HPACDiceWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"hpacWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    id: \"hp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 15\n    }\n  }, \"hp: \", health), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"ac\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 15\n    }\n  }, \"ac: \", character.armorClass.ac.total)), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"diceRollResultWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }\n  }, rollResult))));\n};\n\nconst CharacterType = props => {\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 5\n    }\n  }, props.value, \" / \");\n};\n\nconst CharacterClasses = props => {\n  return /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 5\n    }\n  }, props.value);\n};\n\nconst MainDisplay = props => {\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo);\n  const [selection, setSelection] = useState('');\n\n  function screenSwitch(display) {\n    switch (display) {\n      case 'Skills':\n        return /*#__PURE__*/React.createElement(Skills, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 16\n          }\n        });\n\n      case 'Scores':\n        return /*#__PURE__*/React.createElement(AbilityScores, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 16\n          }\n        });\n\n      case 'Passive':\n        return /*#__PURE__*/React.createElement(PassiveAbilities, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 16\n          }\n        });\n\n      case 'Spells':\n        return /*#__PURE__*/React.createElement(Spells, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 16\n          }\n        });\n\n      case 'Abilities':\n        return /*#__PURE__*/React.createElement(ActiveAbilities, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 16\n          }\n        });\n\n      case 'SLAs':\n        return /*#__PURE__*/React.createElement(SLAs, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 16\n          }\n        });\n\n      case 'Prep':\n        return /*#__PURE__*/React.createElement(PrepSpells, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 16\n          }\n        });\n\n      case 'Items':\n        return /*#__PURE__*/React.createElement(Items, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 16\n          }\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(Skills, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 16\n          }\n        });\n    }\n  }\n\n  function infoSheet(toggleInfo) {\n    switch (toggleInfo) {\n      case 'Spell':\n        return /*#__PURE__*/React.createElement(SpellInfo, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 16\n          }\n        });\n\n      case 'Off':\n        return null;\n\n      default:\n        return null;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Selection.Provider, {\n    value: [selection, setSelection],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"infoSheet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 11\n    }\n  }, infoSheet(toggleInfo)), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"mainContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 11\n    }\n  }, screenSwitch(displayTwo))));\n};\n/*\nconst SecondaryNavbar = (props) => {\n  function navSwitch(display){\n    switch(display){\n      case 'stats':\n        return <Navbar.StatsSelector />\n      case 'ability':\n        return <Navbar.AbilitySelector />\n      case null:\n        return null\n      default:\n        return <Navbar.StatsSelector />\n    }\n  }\n  return(\n      <>\n        <div id='secondaryNavbar'>{navSwitch(props.display)}</div>\n      </>\n  )\n}\n\nconst Navbar = (props) => {\n  const statIcon = <i id='statIcon' className=\"far fa-chart-bar\"></i>;\n  const abilityIcon = <i id=\"spellIcon\" className=\"fas fa-hand-sparkles\"></i>;\n  const itemIcon = <i id='itemIcon' className=\"fas fa-scroll\"></i>;\n  function setBothDisplays(name, secondaryName){\n    props.setDisplay(name);\n    if(secondaryName !== null){\n      props.setDisplayTwo(secondaryName)\n    }\n  }\n  function navButtonCodeBlock(name, icon, secondaryName){\n    return(\n      <button id={name}\n              onClick={() => setBothDisplays(name, secondaryName)}\n              className={(props.display == name ? 'navbarItemsOn' : 'navbarItemsOff')}>\n                      {icon}\n      </button>\n    )\n  }\n  return (\n    <div>\n      <ul id='primaryNavbar' className='navbarContainer'>\n        {navButtonCodeBlock('stats', statIcon, 'Skills')}\n        {navButtonCodeBlock('ability', abilityIcon, 'Spells')}\n        {navButtonCodeBlock(null, itemIcon, 'Items')}\n      </ul>\n    </div>\n  );\n}\n*/\n\n\nconst App = props => {\n  const [display, setDisplay] = useState('stats');\n  const [displayTwo, setDisplayTwo] = useState('Skills');\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const [rollResult, setRollResult] = useState('Good luck,\\n' + props.character.name);\n  const [primaryModifier, setPrimaryModifier] = useState(abilityModifier(props.character, 'charisma'));\n  useEffect(function setDocTitle() {\n    document.title = props.character.name;\n  }, [props.character]);\n  return /*#__PURE__*/React.createElement(Character.Provider, {\n    value: props.character,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"appWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"topWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ReadTossDice.Provider, {\n    value: [rollResult, setRollResult],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(BasicInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Navbar.PrimaryNavbar, {\n    display: display,\n    setDisplay: setDisplay,\n    setDisplayTwo: setDisplayTwo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(GetSetDisplayTwo.Provider, {\n    value: [displayTwo, setDisplayTwo],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Navbar.SecondaryNavbar, {\n    display: display,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(GetSetDisplay.Provider, {\n    value: [display, setDisplay],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(GetSetDisplayTwo.Provider, {\n    value: [displayTwo, setDisplayTwo],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ToggleInfo.Provider, {\n    value: [toggleInfo, setToggleInfo],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ReadTossDice.Provider, {\n    value: [rollResult, setRollResult],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(PrimaryModifier.Provider, {\n    value: [primaryModifier, setPrimaryModifier],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(MainDisplay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 19\n    }\n  })))))), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"bottomSpacer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 11\n    }\n  }))));\n};\n\nconst LoadApp = () => {\n  // Load data from the characters server endpoint\n  const {\n    data\n  } = useSWR('/api/characters'); // Before the data is loaded, it will be `undefined`\n\n  return data ? /*#__PURE__*/React.createElement(App, {\n    character: data.characters[0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 5\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, \"Loading...\");\n};\n\nexport default LoadApp;","map":{"version":3,"sources":["/home/highdynamics/repos/dnd_app/src/components/dnd.js"],"names":["React","useState","useContext","useEffect","useSWR","Items","SLAs","ActiveAbilities","SpellInfo","PrepSpells","Spells","PassiveAbilities","Navbar","AbilityScores","Skills","rollDice","size","mod","use","dice","Math","floor","random","edgeRollClassAssignment","result","ReadTossDice","createContext","GetSetDisplay","GetSetDisplayTwo","ToggleInfo","Selection","Character","PrimaryModifier","abilityModifier","character","ability","abilities","score","totalSpells","primaryModifier","level","levelNum","bonusSpellsPerDay","ceil","magic","spellsPerDay","BasicInfo","props","rollResult","setRollResult","toggle","setToggle","moreLess","health","hitPoints","total","damage","temporaryHitPoints","type","map","t","classList","class","c","name","armorClass","ac","CharacterType","value","CharacterClasses","MainDisplay","toggleInfo","setToggleInfo","displayTwo","setDisplayTwo","selection","setSelection","screenSwitch","display","infoSheet","App","setDisplay","setPrimaryModifier","setDocTitle","document","title","LoadApp","data","characters"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport useSWR from 'swr';\n\nimport Items from './Items.js'\nimport SLAs from './SLAs.js'\nimport ActiveAbilities from './ActiveAbilities.js'\nimport SpellInfo from './SpellInfo.js'\nimport PrepSpells from './PrepSpells.js'\nimport Spells from './Spells.js'\nimport PassiveAbilities from './PassiveAbilities.js'\nimport * as Navbar from './Navbars.js'\nimport AbilityScores from './AbilityScores.js'\nimport Skills from './Skills.js'\n\nimport './dnd.css';\n\nexport function rollDice(size, mod, use){\n  const dice = Math.floor((Math.random() * size) +1)\n  function edgeRollClassAssignment(dice){\n    if(dice === 1){\n      return 'natOne'\n    }else if(dice === 20){\n      return 'natTwenty'\n    }else{\n      return null\n    }\n  }\n  const result =\n  <span>\n    <span id='rollUse'>{use}</span>\n    <div id='rollTopLine'>\n      <span id='rollTotal' className={edgeRollClassAssignment(dice)}>{dice}</span> <span id='modTotal'> + {mod} =</span>\n    </div>\n    <p id='rollModTotal'>{dice + mod}</p>\n  </span>\n  return result\n}\nexport const ReadTossDice = React.createContext(null)\nexport const GetSetDisplay = React.createContext(null)\nexport const GetSetDisplayTwo = React.createContext(null)\nexport const ToggleInfo = React.createContext(null)\nexport const Selection = React.createContext(null)\nexport const Character = React.createContext(null)\nexport const PrimaryModifier = React.createContext(null)\n/******************************Character Info****************************/\nexport function abilityModifier(character, ability) {\n  if(character.abilities.score[ability] === '--'){\n    return '--'\n  }\n  return Math.floor((character.abilities.score[ability] - 10) / 2)\n}\n\nexport function totalSpells(character, primaryModifier, level, levelNum) {\n  function bonusSpellsPerDay(levelNum){\n    return Math.ceil((primaryModifier - (levelNum - 1)) / 4)\n  }\n  return character.magic.spellsPerDay[level] + bonusSpellsPerDay(levelNum)\n}\n\n/******************************Character Info****************************/\n/*const AbilityScores = (props) => {\n  const character = useContext(Character)\n  const str = character.abilities.score.strength\n  const dex = character.abilities.score.dexterity\n  const con = character.abilities.score.constitution\n  const int = character.abilities.score.intelligence\n  const wis = character.abilities.score.wisdom\n  const cha = character.abilities.score.charisma\n  const strMod = abilityModifier(character, 'strength')\n  const dexMod = abilityModifier(character, 'dexterity')\n  const conMod = abilityModifier(character, 'constitution')\n  const intMod = abilityModifier(character, 'intelligence')\n  const wisMod = abilityModifier(character, 'wisdom')\n  const chaMod = abilityModifier(character, 'charisma')\n\n  const [rollResult, setRollResult] = useContext(ReadTossDice)\n  function abilityScoreCodeBlock(abilityString, abilityScore, abilityMod){\n    return(\n    <p className='abilityScores'>\n      {/*button appears on same line*}\n      <button className='rollAbility' onClick={() => setRollResult(rollDice(20, abilityMod, abilityString))}>roll</button>\n      {abilityString}: {abilityScore} | {abilityMod}\n    </p>\n    )\n  }\n  return (\n    <div>\n    <div id='statsContainer'>\n    <h1 id='abilityScoresHeader'>Abilities</h1>\n    <div id='abilityScoresWrapper'>\n      {abilityScoreCodeBlock('STR', str, strMod)}\n      {abilityScoreCodeBlock('DEX', dex, dexMod)}\n      {abilityScoreCodeBlock('CON', con, conMod)}\n      {abilityScoreCodeBlock('INT', int, intMod)}\n      {abilityScoreCodeBlock('WIS', wis, wisMod)}\n      {abilityScoreCodeBlock('CHA', cha, chaMod)}\n    </div>\n    </div>\n    </div>\n  );\n}\n\nconst SkillsListItem = (props) => {\n  const character = useContext(Character)\n  const [rollResult, setRollResult] = useContext(ReadTossDice);\n  // store props to make code simpler\n  const skills = props.skills\n  // replace underscore with space and store\n  let formattedSkill = skills[0].replace(/_/g, ' ');\n  // update variable replacing (Know)ledge with :\n  formattedSkill = formattedSkill.replace(/ledge/g, ':')\n  // store skill points separately\n  const skillPoints = skills[1];\n  // confirm class skill to add css class\n  function findClassSkills(skill){\n    if(character.classSkills.hasOwnProperty(skill)){\n      return 'classSkills'\n    }else{\n      return ''\n    }\n  }\n  return (\n    <button\n      className={`skills ${findClassSkills(skills[0])} ${skills[0]}`}\n      onClick={() => setRollResult(rollDice(20, skillPoints, formattedSkill))}>\n      {formattedSkill} | <span className='skillPoints'>{skillPoints}</span>\n    </button>\n  )\n}\nconst Skills = (props) =>  {\n  const character = useContext(Character)\n  //put character's skills into array as [key, value]\n  let skillsArray = Object.keys(character.skills).map((skill) => {\n    return [skill, character.skills[skill]]\n  });\n  // put character's class skills into array as [key, value]\n  let classSkillsArray = Object.keys(character.classSkills).map((skill) => {\n    return [skill, character.classSkills[skill]];\n  });\n  // combine both arrays into new array, sorted alphabetically\n  let allSkills = [...skillsArray, ...classSkillsArray].sort();\n  // pass skills to child component\n  const skillsBlock = allSkills.map((s) =>\n    <SkillsListItem key={s} skills={s} />\n  );\nreturn(\n  <>\n    <h1 id='skillsHeader'>Skills</h1>\n    <ul id='skillsListWrapper' style={{listStyleType: 'none'}}>\n      <div id='skillsWrapper'>\n        {skillsBlock}\n      </div>\n    </ul>\n  </>\n  );\n}\n\nconst StatsSelector = (props) => {\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo);\n  function navButtonCodeBlock(name){\n    return(\n      <button id={name}\n              onClick={() => setDisplayTwo(name)}\n              className={(displayTwo === name ? 'navbarItemsOn' : 'navbarItemsOff')}>\n          {name}\n      </button>\n    )\n  }\n  return(\n    <div>\n      <ul id='statsSelector' className='navbarContainer'>\n        {navButtonCodeBlock('Skills')}\n        {navButtonCodeBlock('Scores')}\n        {navButtonCodeBlock('Passive')}\n      </ul>\n    </div>\n  )\n}\n*/\nconst BasicInfo = (props) => {\n  const character = useContext(Character)\n  const [rollResult, setRollResult] = useContext(ReadTossDice);\n//toggle for 'more' button\n  const [toggle, setToggle] = useState(false);\n//display conditional more/less\n  const moreLess = () => {\n    if(toggle){\n      return '(less)'\n    } else {\n      return '(more)'\n    }\n  }\n  const health = (\n      character.hitPoints.total - character.hitPoints.damage + character.hitPoints.temporaryHitPoints\n  );\n  const type = (character.type).map(\n    (t) => <CharacterType key={t} value={t} />\n  );\n  const classList = (character.class).map(\n    (c) => <CharacterClasses key={c} value={c} />\n  );\n  return (\n      <div>\n        <div className='topContainer'>\n            <button className={(toggle ? 'moreButtonOn' : 'moreButtonOff')} onClick={() => setToggle(!toggle)}>\n              <h1 id='nameAndLevel'>{character.name} ({character.level})</h1>\n              <em id='moreLess'>{moreLess()}</em>\n            </button>\n\n          {toggle === true &&\n            <div id='characterInfo'>\n              <div id='characterType'>type: <br /> {type}</div>\n              <ul id='classList'>class: <br /> {classList}</ul>\n            </div>\n          }\n          <div id='HPACDiceWrapper'>\n            <div id='hpacWrapper'>\n              <p id='hp'>hp: {health}</p>\n              <p id='ac'>ac: {character.armorClass.ac.total}</p>\n            </div>\n            <div id='diceRollResultWrapper'>{rollResult}</div>\n          </div>\n        </div>\n      </div>\n    );\n}\nconst CharacterType = (props) => {\n  return(\n    <span>{props.value} / </span>\n  )\n}\nconst CharacterClasses = (props) => {\n  return(\n    <li>{props.value}</li>\n  )\n}\n\nconst MainDisplay = (props) => {\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo);\n  const [selection, setSelection] = useState('')\n  function screenSwitch(display){\n    switch(display) {\n      case 'Skills':\n        return <Skills />\n      case 'Scores':\n        return <AbilityScores />\n      case 'Passive':\n        return <PassiveAbilities />\n      case 'Spells':\n        return <Spells />\n      case 'Abilities':\n        return <ActiveAbilities />\n      case 'SLAs':\n        return <SLAs />\n      case 'Prep':\n        return <PrepSpells />\n      case 'Items':\n        return <Items />\n      default:\n        return <Skills />\n    }\n  }\n  function infoSheet(toggleInfo){\n    switch(toggleInfo){\n      case 'Spell':\n        return <SpellInfo />\n      case 'Off':\n        return null\n      default:\n        return null\n    }\n  }\n    return(\n      <div>\n        <Selection.Provider value={[selection, setSelection]}>\n          <div id='infoSheet'>{infoSheet(toggleInfo)}</div>\n          <div id='mainContent'>{screenSwitch(displayTwo)}</div>\n        </Selection.Provider>\n      </div>\n    );\n\n}\n/*\nconst SecondaryNavbar = (props) => {\n  function navSwitch(display){\n    switch(display){\n      case 'stats':\n        return <Navbar.StatsSelector />\n      case 'ability':\n        return <Navbar.AbilitySelector />\n      case null:\n        return null\n      default:\n        return <Navbar.StatsSelector />\n    }\n  }\n  return(\n      <>\n        <div id='secondaryNavbar'>{navSwitch(props.display)}</div>\n      </>\n  )\n}\n\nconst Navbar = (props) => {\n  const statIcon = <i id='statIcon' className=\"far fa-chart-bar\"></i>;\n  const abilityIcon = <i id=\"spellIcon\" className=\"fas fa-hand-sparkles\"></i>;\n  const itemIcon = <i id='itemIcon' className=\"fas fa-scroll\"></i>;\n  function setBothDisplays(name, secondaryName){\n    props.setDisplay(name);\n    if(secondaryName !== null){\n      props.setDisplayTwo(secondaryName)\n    }\n  }\n  function navButtonCodeBlock(name, icon, secondaryName){\n    return(\n      <button id={name}\n              onClick={() => setBothDisplays(name, secondaryName)}\n              className={(props.display == name ? 'navbarItemsOn' : 'navbarItemsOff')}>\n                      {icon}\n      </button>\n    )\n  }\n  return (\n    <div>\n      <ul id='primaryNavbar' className='navbarContainer'>\n        {navButtonCodeBlock('stats', statIcon, 'Skills')}\n        {navButtonCodeBlock('ability', abilityIcon, 'Spells')}\n        {navButtonCodeBlock(null, itemIcon, 'Items')}\n      </ul>\n    </div>\n  );\n}\n*/\nconst App = (props) => {\n  const [display, setDisplay] = useState('stats')\n  const [displayTwo, setDisplayTwo] = useState('Skills')\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const [rollResult, setRollResult] = useState('Good luck,\\n' + props.character.name)\n  const [primaryModifier, setPrimaryModifier] = useState(abilityModifier(props.character, 'charisma'))\n  useEffect(function setDocTitle() {\n    document.title = props.character.name;\n  }, [props.character])\n  return (\n    <Character.Provider value={props.character}>\n\n      <div id='appWrapper'>\n        <div>\n          <div id='topWrapper'>\n            <ReadTossDice.Provider value={[rollResult, setRollResult]}>\n              <BasicInfo />\n            </ReadTossDice.Provider>\n            <Navbar.PrimaryNavbar display={display} setDisplay={setDisplay} setDisplayTwo={setDisplayTwo} />\n            <GetSetDisplayTwo.Provider value={[displayTwo, setDisplayTwo]}>\n              <Navbar.SecondaryNavbar display={display}/>\n            </GetSetDisplayTwo.Provider>\n          </div>\n          <GetSetDisplay.Provider value={[display, setDisplay]}>\n          <GetSetDisplayTwo.Provider value={[displayTwo, setDisplayTwo]}>\n            <ToggleInfo.Provider value={[toggleInfo, setToggleInfo]}>\n              <ReadTossDice.Provider value={[rollResult, setRollResult]}>\n                <PrimaryModifier.Provider value={[primaryModifier, setPrimaryModifier]}>\n                  <MainDisplay />\n                </PrimaryModifier.Provider>\n              </ReadTossDice.Provider>\n            </ToggleInfo.Provider>\n          </GetSetDisplayTwo.Provider>\n          </GetSetDisplay.Provider>\n          <div id='bottomSpacer'></div>\n        </div>\n      </div>\n    </Character.Provider>\n  )\n}\n\nconst LoadApp = () => {\n  // Load data from the characters server endpoint\n  const {data} = useSWR('/api/characters')\n\n  // Before the data is loaded, it will be `undefined`\n  return data ? (\n    <App character={data.characters[0]} />\n  ) : <>Loading...</>\n}\n\nexport default LoadApp\n"]},"metadata":{},"sourceType":"module"}