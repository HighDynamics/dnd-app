{"ast":null,"code":"var _jsxFileName = \"/home/highdynamics/repos/dnd_app/src/components/SpellInfo.js\";\nimport React, { useState, useContext } from 'react';\nimport { Character, ToggleInfo, Selection } from './dnd.js';\n\nconst SpellInfo = props => {\n  //bring in react context\n  const character = useContext(Character);\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  const [selection, setSelection] = useContext(Selection); //edit string for render\n\n  const formattedSpell = selection.replace(/_/g, ' ');\n\n  function getSpellLevel(selection) {\n    let foundLevel = null;\n    Object.keys(character.magic.spells).forEach(level => {\n      if (Object.values(character.magic.spells[level]).includes(selection)) {\n        foundLevel = level;\n      }\n    });\n    return foundLevel;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"spellInfo\",\n    className: \"infoSheet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    id: \"useSpell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, \"Use Spell\"), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"closeButton\",\n    onClick: () => setToggleInfo('Off'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, \"x\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, formattedSpell), \"Level: \", getSpellLevel(selection), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 40\n    }\n  }), \"Components:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 18\n    }\n  }), \"Casting Time:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 20\n    }\n  }), \"Range:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }), \"Target or Area:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 22\n    }\n  }), \"Duration:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 16\n    }\n  }), \"Saving Throw:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 20\n    }\n  }), \"SpellResistance:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 23\n    }\n  }));\n};\n\nexport default SpellInfo;","map":{"version":3,"sources":["/home/highdynamics/repos/dnd_app/src/components/SpellInfo.js"],"names":["React","useState","useContext","Character","ToggleInfo","Selection","SpellInfo","props","character","toggleInfo","setToggleInfo","selection","setSelection","formattedSpell","replace","getSpellLevel","foundLevel","Object","keys","magic","spells","forEach","level","values","includes"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,SAAhC,QAAiD,UAAjD;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAC3B;AACA,QAAMC,SAAS,GAAGN,UAAU,CAACC,SAAD,CAA5B;AACA,QAAM,CAACM,UAAD,EAAaC,aAAb,IAA8BR,UAAU,CAACE,UAAD,CAA9C;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BV,UAAU,CAACG,SAAD,CAA5C,CAJ2B,CAK3B;;AACA,QAAMQ,cAAc,GAAGF,SAAS,CAACG,OAAV,CAAkB,IAAlB,EAAwB,GAAxB,CAAvB;;AACA,WAASC,aAAT,CAAuBJ,SAAvB,EAAiC;AAC/B,QAAIK,UAAU,GAAG,IAAjB;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYV,SAAS,CAACW,KAAV,CAAgBC,MAA5B,EAAoCC,OAApC,CAA6CC,KAAD,IAAW;AACrD,UAAGL,MAAM,CAACM,MAAP,CAAcf,SAAS,CAACW,KAAV,CAAgBC,MAAhB,CAAuBE,KAAvB,CAAd,EAA6CE,QAA7C,CAAsDb,SAAtD,CAAH,EAAoE;AAClEK,QAAAA,UAAU,GAAGM,KAAb;AACD;AACF,KAJD;AAKA,WAAON,UAAP;AACD;;AACD,sBACE;AAAK,IAAA,EAAE,EAAC,WAAR;AAAoB,IAAA,SAAS,EAAC,WAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,EAAE,EAAC,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,eAEE;AAAQ,IAAA,EAAE,EAAC,aAAX;AAAyB,IAAA,OAAO,EAAE,MAAMN,aAAa,CAAC,KAAD,CAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKG,cAAL,CAHF,aAIUE,aAAa,CAACJ,SAAD,CAJvB,eAImC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJnC,8BAKa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALb,gCAMe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANf,yBAOQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPR,kCAQiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARjB,4BASW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATX,gCAUe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVf,mCAWkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXlB,CADF;AAeD,CA/BD;;AAiCA,eAAeL,SAAf","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { Character, ToggleInfo, Selection } from './dnd.js'\n\nconst SpellInfo = (props) => {\n  //bring in react context\n  const character = useContext(Character)\n  const [toggleInfo, setToggleInfo] = useContext(ToggleInfo);\n  const [selection, setSelection] = useContext(Selection);\n  //edit string for render\n  const formattedSpell = selection.replace(/_/g, ' ')\n  function getSpellLevel(selection){\n    let foundLevel = null;\n    Object.keys(character.magic.spells).forEach((level) => {\n      if(Object.values(character.magic.spells[level]).includes(selection)){\n        foundLevel = level;\n      }\n    })\n    return foundLevel;\n  }\n  return (\n    <div id='spellInfo' className='infoSheet'>\n      <button id='useSpell'>Use Spell</button>\n      <button id='closeButton' onClick={() => setToggleInfo('Off')}>x</button>\n      <h3>{formattedSpell}</h3>\n      Level: {getSpellLevel(selection)}<br />\n      Components:<br />\n      Casting Time:<br />\n      Range:<br />\n      Target or Area:<br />\n      Duration:<br />\n      Saving Throw:<br />\n      SpellResistance:<br />\n    </div>\n  )\n}\n\nexport default SpellInfo\n"]},"metadata":{},"sourceType":"module"}