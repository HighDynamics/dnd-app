{"ast":null,"code":"var _jsxFileName = \"/home/highdynamics/repos/dnd_app/src/components/Navbars.js\";\nimport React, { useContext } from 'react';\nimport { GetSetDisplayTwo } from './dnd.js';\n\nconst AbilitySelector = props => {\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo);\n\n  function navButtonCodeBlock(name) {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      id: name,\n      onClick: () => setDisplayTwo(name),\n      className: displayTwo === name ? 'navbarItemsOn' : 'navbarItemsOff',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 7\n      }\n    }, name);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    id: \"abilitySelector\",\n    className: \"navbarContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, navButtonCodeBlock('Spells'), navButtonCodeBlock('Abilities'), navButtonCodeBlock('SLAs')));\n};\n\nconst StatsSelector = props => {\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo);\n\n  function navButtonCodeBlock(name) {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      id: name,\n      onClick: () => setDisplayTwo(name),\n      className: displayTwo === name ? 'navbarItemsOn' : 'navbarItemsOff',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }\n    }, name);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    id: \"statsSelector\",\n    className: \"navbarContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, navButtonCodeBlock('Skills'), navButtonCodeBlock('Scores'), navButtonCodeBlock('Passive')));\n};\n\nconst PrimaryNavbar = props => {\n  const statIcon = /*#__PURE__*/React.createElement(\"i\", {\n    id: \"statIcon\",\n    className: \"far fa-chart-bar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 20\n    }\n  });\n  const abilityIcon = /*#__PURE__*/React.createElement(\"i\", {\n    id: \"spellIcon\",\n    className: \"fas fa-hand-sparkles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 23\n    }\n  });\n  const itemIcon = /*#__PURE__*/React.createElement(\"i\", {\n    id: \"itemIcon\",\n    className: \"fas fa-scroll\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 20\n    }\n  });\n\n  function setBothDisplays(name, secondaryName) {\n    props.setDisplay(name);\n\n    if (secondaryName !== null) {\n      props.setDisplayTwo(secondaryName);\n    }\n  }\n\n  function navButtonCodeBlock(name, icon, secondaryName) {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      id: name,\n      onClick: () => setBothDisplays(name, secondaryName),\n      className: props.display == name ? 'navbarItemsOn' : 'navbarItemsOff',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, icon);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    id: \"primaryNavbar\",\n    className: \"navbarContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, navButtonCodeBlock('stats', statIcon, 'Skills'), navButtonCodeBlock('ability', abilityIcon, 'Spells'), navButtonCodeBlock(null, itemIcon, 'Items')));\n};\n\nexport { AbilitySelector, StatsSelector, PrimaryNavbar };","map":{"version":3,"sources":["/home/highdynamics/repos/dnd_app/src/components/Navbars.js"],"names":["React","useContext","GetSetDisplayTwo","AbilitySelector","props","displayTwo","setDisplayTwo","navButtonCodeBlock","name","StatsSelector","PrimaryNavbar","statIcon","abilityIcon","itemIcon","setBothDisplays","secondaryName","setDisplay","icon","display"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport { GetSetDisplayTwo } from './dnd.js'\n\nconst AbilitySelector = (props) => {\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo)\n  function navButtonCodeBlock(name){\n    return(\n      <button id={name}\n              onClick={() => setDisplayTwo(name)}\n              className={(displayTwo === name ? 'navbarItemsOn' : 'navbarItemsOff')}>\n          {name}\n      </button>\n    )\n  }\n  return(\n    <div>\n      <ul id='abilitySelector' className='navbarContainer'>\n        {navButtonCodeBlock('Spells')}\n        {navButtonCodeBlock('Abilities')}\n        {navButtonCodeBlock('SLAs')}\n      </ul>\n    </div>\n  )\n}\nconst StatsSelector = (props) => {\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo);\n  function navButtonCodeBlock(name){\n    return(\n      <button id={name}\n              onClick={() => setDisplayTwo(name)}\n              className={(displayTwo === name ? 'navbarItemsOn' : 'navbarItemsOff')}>\n          {name}\n      </button>\n    )\n  }\n  return(\n    <div>\n      <ul id='statsSelector' className='navbarContainer'>\n        {navButtonCodeBlock('Skills')}\n        {navButtonCodeBlock('Scores')}\n        {navButtonCodeBlock('Passive')}\n      </ul>\n    </div>\n  )\n}\nconst PrimaryNavbar = (props) => {\n  const statIcon = <i id='statIcon' className=\"far fa-chart-bar\"></i>;\n  const abilityIcon = <i id=\"spellIcon\" className=\"fas fa-hand-sparkles\"></i>;\n  const itemIcon = <i id='itemIcon' className=\"fas fa-scroll\"></i>;\n  function setBothDisplays(name, secondaryName){\n    props.setDisplay(name);\n    if(secondaryName !== null){\n      props.setDisplayTwo(secondaryName)\n    }\n  }\n  function navButtonCodeBlock(name, icon, secondaryName){\n    return(\n      <button id={name}\n              onClick={() => setBothDisplays(name, secondaryName)}\n              className={(props.display == name ? 'navbarItemsOn' : 'navbarItemsOff')}>\n                      {icon}\n      </button>\n    )\n  }\n  return (\n    <div>\n      <ul id='primaryNavbar' className='navbarContainer'>\n        {navButtonCodeBlock('stats', statIcon, 'Skills')}\n        {navButtonCodeBlock('ability', abilityIcon, 'Spells')}\n        {navButtonCodeBlock(null, itemIcon, 'Items')}\n      </ul>\n    </div>\n  );\n}\nexport { AbilitySelector, StatsSelector, PrimaryNavbar }\n"]},"metadata":{},"sourceType":"module"}