{"version":3,"sources":["Arn_Hachem.js","dnd.js","serviceWorker.js","index.js"],"names":["character","name","type","hitPoints","dieSize","total","damage","temporaryHitPoints","armorClass","ac","armor","shield","dexterity","size","naturalArmor","deflection","misc","touch","flatFooted","alignment","abilities","score","strength","constitution","intelligence","wisdom","charisma","speed","level","class","skills","Balance","Climb","Concentration","Craft_Tailor","Escape_Artist","Hide","Jump","Listen","Move_Silently","Ride","Search","Spot","Survival","Swim","Use_Rope","classSkills","Appraise","Bluff","Decipher_Script","Diplomacy","Diguise","Forgery","Gather_Information","Heal","Intimidate","Knowledge_Arcana","Knowledge_Dungeoneering","Knowledge_Religion","Knowledge_Planes","Perception","Perform_Acting","Perform_Dancing","SenseMotive","Spellcraft","Stealth","Use_Magic_Device","characterAbilities","active","passive","magic","slas","zero","one","two","three","four","five","six","seven","eight","nine","spellcaster","arcane","divine","spells","spellbook","spellsPerDay","items","useState","React","useContext","useEffect","rollDice","mod","use","dice","Math","floor","random","id","className","edgeRollClassAssignment","document","title","TossDice","createContext","ReadDice","GetSetDisplay","GetSetDisplayTwo","str","dex","con","int","wis","cha","abilityModifier","ability","strMod","dexMod","conMod","intMod","wisMod","chaMod","primaryModifier","bonusSpellsPerDay","levelNum","ceil","ItemsHeld","props","toggleInfo","setToggleInfo","item","value","formattedItem","replace","buttonAndSpellClass","onClick","Items","Object","values","map","s","key","KnownSLAs","spell","formattedSpell","SLAs","displaySLAs","spellCodeBlock","levelRoman","KnownActiveAbilities","formattedAbility","ActiveAbilities","Spellbook","PrepSpells","setDisplay","displaySpells","totalSpells","KnownSpells","Spells","AbilitySelector","displayTwo","setDisplayTwo","navButtonCodeBlock","KnownPassiveAbilities","PassiveAbilities","AbilityScores","roll","abilityScoreCodeBlock","abilityString","abilityScore","abilityMod","SkillsListItem","formattedSkill","skill","skillPoints","hasOwnProperty","Skills","skillsArray","keys","classSkillsArray","skillsBlock","sort","style","listStyleType","StatsSelector","BasicInfo","result","toggle","setToggle","health","t","classList","c","CharacterType","CharacterClasses","MainDisplay","display","screenSwitch","SecondaryNavbar","navSwitch","Navbar","statIcon","abilityIcon","itemIcon","icon","secondaryName","setBothDisplays","App","rollResult","setRollResult","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2JAAWA,EAAY,CACrBC,KAAM,aACNC,KAAM,CAAC,QAAS,aAAc,YAAa,gBAAiB,YAC5DC,UAAW,CACTC,QAAS,GACTC,MAAO,IACPC,OAAQ,EACRC,mBAAoB,GAEtBC,WAAY,CACVC,GAAI,CACFJ,MAAO,GACPK,MAAO,EACPC,OAAQ,EACRC,UAAW,GACXC,KAAM,EACNC,aAAc,EACdC,WAAY,EACZC,KAAM,GAERC,MAAO,GACPC,WAAY,IAEdL,KAAM,SACNM,UAAW,cACXC,UAAW,CACTC,MAAO,CACLC,SAAU,GACVV,UAAW,GACXW,aAAc,KACdC,aAAc,GACdC,OAAQ,GACRC,SAAU,KAGdC,MAAO,GACPC,MAAO,KACPC,MAAO,CAAC,cAAe,gBAAiB,iBAAkB,iBAAkB,YAAa,UAAW,sBACpGC,OAAQ,CACNC,QAAS,GACTC,MAAO,EACPC,cAAe,GACfC,aAAc,GACdC,cAAe,GACfC,KAAM,GACNC,KAAM,EACNC,OAAQ,EACRC,cAAe,GACfC,KAAM,GACNC,OAAQ,EACRC,KAAM,EACNC,SAAU,EACVC,KAAM,GACNC,SAAU,IAEZC,YAAa,CACXC,SAAU,GACVC,MAAO,GACPC,gBAAiB,GACjBC,UAAW,GACXC,QAAS,GACTC,QAAS,EACTC,mBAAoB,EACpBC,KAAM,GACNC,WAAY,GACZC,iBAAkB,GAClBC,wBAAyB,GACzBC,mBAAoB,GACpBC,iBAAkB,EAClBC,WAAY,GACZC,eAAgB,GAChBC,gBAAiB,GACjBC,YAAa,GACbC,WAAY,GACZC,QAAS,GACTC,iBAAkB,IAEpBC,mBAAoB,CAClBC,OAAQ,CAAC,YAAa,mBAAoB,wBAAyB,eAEnEC,QAAS,CAAC,mBAEZC,MAAO,CACLC,KAAM,CACJC,KAAM,GACNC,IAAK,CAAC,cAAe,iBACrBC,IAAK,CAAC,iBAAkB,cACxBC,MAAO,CAAC,iBAAkB,iBAC1BC,KAAM,CAAC,aAAc,cACrBC,KAAM,CAAC,wBAA0B,iBACjCC,IAAK,CAAC,eACNC,MAAO,GACPC,MAAO,GACPC,KAAM,IAERC,aAAa,EACbhF,KAAM,CACJiF,QAAQ,EACRC,QAAQ,GAEVC,OAAQ,CACNb,KAAM,CAAC,UAAW,cAAe,cAAe,eAAgB,YAAa,UAAW,QAAS,aAAc,cAAe,UAAW,iBAAkB,aAAc,oBACzKC,IAAK,CAAC,eAAgB,gBAAiB,gBAAiB,aAAc,gBACtEC,IAAK,CAAC,cAAe,cAAe,QAAS,gBAAiB,iBAC9DC,MAAO,CAAC,cAAe,WAAY,oBAAqB,mBACxDC,KAAM,CAAC,mBAAoB,eAAgB,iBAAkB,aAC7DC,KAAM,CAAC,cAAe,UAAW,WAAY,yBAA0B,cACvEC,IAAK,CAAC,eAAgB,kBAAmB,iBAAkB,mBAC3DC,MAAO,CAAC,kBAAmB,WAAY,uBACvCC,MAAO,CAAC,uBAAwB,iBAAkB,0BAA2B,iBAC7EC,KAAM,CAAC,oBAAqB,iCAAkC,kBAEhEK,UAAW,CACTd,KAAM,CAAC,cAAe,mBAAoB,YAAa,aAAc,iBAAkB,mBAAoB,UAAW,UAAW,aAAc,iBAAkB,WAAY,eAAgB,iBAC7LC,IAAK,CAAC,KACNC,IAAK,CAAC,KACNC,MAAO,CAAC,KACRC,KAAM,CAAC,KACPC,KAAM,CAAC,KACPC,IAAK,CAAC,KACNC,MAAO,CAAC,KACRC,MAAO,CAAC,KACRC,KAAM,CAAC,MAETM,aAAc,CACZf,KAAM,EACNC,IAAK,EACLC,IAAK,EACLC,MAAO,EACPC,KAAM,EACNC,KAAM,EACNC,IAAK,EACLC,MAAO,EACPC,MAAO,EACPC,KAAM,IAGVO,MAAO,CACL,qBAAuB,gBAAkB,iBAAkB,8BCvIvDC,EAAoCC,IAApCD,SAAUE,EAA0BD,IAA1BC,WAA0BD,IAAdE,UAI9B,SAASC,EAAShF,EAAMiF,EAAKC,GAC3B,IAAMC,EAAOC,KAAKC,MAAOD,KAAKE,SAAWtF,EAAO,GAkBhD,OAPA,8BACE,0BAAMuF,GAAG,WAAWL,GACpB,yBAAKK,GAAG,eACN,0BAAMA,GAAG,YAAYC,UAbzB,SAAiCL,GAC/B,OAAY,IAATA,EACM,SACS,KAATA,EACA,YAEA,KAOyBM,CAAwBN,IAAQA,GADlE,IAC+E,0BAAMI,GAAG,YAAT,MAAwBN,EAAxB,OAE/E,uBAAGM,GAAG,gBAAgBJ,EAAOF,IApBjCS,SAASC,MAAQxG,EAAUC,KAwB3B,IAAMwG,EAAWf,IAAMgB,cAAc,MAC/BC,EAAWjB,IAAMgB,cAAc,MAC/BE,EAAgBlB,IAAMgB,cAAc,MACpCG,EAAmBnB,IAAMgB,cAAc,MAEvCI,EAAM9G,EAAUoB,UAAUC,MAAMC,SAChCyF,EAAM/G,EAAUoB,UAAUC,MAAMT,UAChCoG,EAAMhH,EAAUoB,UAAUC,MAAME,aAChC0F,EAAMjH,EAAUoB,UAAUC,MAAMG,aAChC0F,EAAMlH,EAAUoB,UAAUC,MAAMI,OAChC0F,EAAMnH,EAAUoB,UAAUC,MAAMK,SACtC,SAAS0F,EAAgBC,GACvB,MAA0C,OAAvCrH,EAAUoB,UAAUC,MAAMgG,GACpB,KAEFpB,KAAKC,OAAOlG,EAAUoB,UAAUC,MAAMgG,GAAW,IAAM,GAEhE,IAAMC,EAASF,EAAgB,YACzBG,EAASH,EAAgB,aACzBI,EAASJ,EAAgB,gBACzBK,EAASL,EAAgB,gBACzBM,EAASN,EAAgB,UACzBO,EAASP,EAAgB,YAC3BQ,EAAkBD,EACtB,SAASE,EAAkBC,GACzB,OAAO7B,KAAK8B,MAAMH,GAAmBE,EAAW,IAAM,GAMxD,IAAME,EAAY,SAACC,GAAW,IAAD,EACSxC,GAAS,GADlB,mBACpByC,EADoB,KACRC,EADQ,KAErBC,EAAOH,EAAMI,MACbC,EAAgBF,EAAKG,QAAQ,KAAM,KACnCC,EAAsB,gBAAkBJ,EAC9C,OACE,4BAAQ/B,UAAWmC,EAAqBC,QAAS,kBAAMN,GAAeD,KAAcI,IAGlFI,EAAQ,SAACT,GAOb,OACE,6BACE,qCACA,yBAAK5B,UAAU,kBACb,yBAAKA,UAAU,cACb,uBAAGA,UAAU,aAVLsC,OAAOC,OAAO5I,EAAUwF,OAAOqD,KAC3C,SAACC,GAAD,OAAO,kBAAC,EAAD,CAAWC,IAAKD,EAAGT,MAAOS,YAgBjCE,EAAY,SAACf,GAAW,IAAD,EACSxC,GAAS,GADlB,mBACpByC,EADoB,KACRC,EADQ,KAErBc,EAAQhB,EAAMI,MACda,EAAiBD,EAAMV,QAAQ,KAAM,KACrCC,EAAsB,gBAAkBS,EAC9C,OACE,4BAAQ5C,UAAWmC,EAAqBC,QAAS,kBAAMN,GAAeD,KAAcgB,IAGlFC,EAAO,SAAClB,GAWZ,SAASmB,EAAYxH,GAInB,OAHa+G,OAAOC,OAAO5I,EAAUsE,MAAMC,KAAK3C,IAAQiH,KACtD,SAACC,GAAD,OAAO,kBAAC,EAAD,CAAWC,IAAKD,EAAGT,MAAOS,OAKrC,SAASO,EAAezH,EAAOkG,EAAUwB,GACvC,OACE,yBAAKjD,UAAU,cACb,yBAAKA,UAAU,qBACb,wBAAIA,UAAU,oBAAd,SAAwCiD,IAE1C,uBAAGjD,UAAU,aAAa+C,EAAYxH,IACtC,8BAIN,OACE,6BACE,yBAAKyE,UAAU,kBACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,qBACb,wBAAIA,UAAU,oBA/BlBrG,EAAUsE,MAAMpE,KAAKiF,QAAUnF,EAAUsE,MAAMpE,KAAKkF,OAC/C,qBACEpF,EAAUsE,MAAMpE,KAAKkF,OACvB,UACEpF,EAAUsE,MAAMpE,KAAKiF,OACvB,gBADF,IA6BD,uBAAGkB,UAAU,aAAa+C,EAAY,SACtC,8BAEDC,EAAe,MAAO,EAAG,KACzBA,EAAe,MAAO,EAAG,MACzBA,EAAe,QAAS,EAAG,OAC3BA,EAAe,OAAQ,EAAG,MAC1BA,EAAe,OAAQ,EAAG,KAC1BA,EAAe,MAAO,EAAG,MACzBA,EAAe,QAAS,EAAG,OAC3BA,EAAe,QAAS,EAAG,QAC3BA,EAAe,OAAQ,EAAG,SAM7BE,EAAuB,SAACtB,GAAW,IAAD,EACFxC,GAAS,GADP,mBAC/ByC,EAD+B,KACnBC,EADmB,KAEhCd,EAAUY,EAAMI,MAChBmB,EAAmBnC,EAAQkB,QAAQ,KAAM,KACzCC,EAAsB,gBAAkBnB,EAC9C,OACE,4BAAQhB,UAAWmC,EAAqBC,QAAS,kBAAMN,GAAeD,KAAcsB,IAGlFC,EAAkB,SAACxB,GAOvB,OACE,yBAAK5B,UAAU,kBACb,yBAAKA,UAAU,cACb,uBAAGA,UAAU,aARCsC,OAAOC,OAAO5I,EAAUmE,mBAAmBC,QAAQyE,KACnE,SAACC,GAAD,OAAO,kBAAC,EAAD,CAAsBC,IAAKD,EAAGT,MAAOS,WAkC5CY,EAAY,SAACzB,GAAW,IAAD,EACSxC,GAAS,GADlB,mBACpByC,EADoB,KACRC,EADQ,KAErBc,EAAQhB,EAAMI,MACda,EAAiBD,EAAMV,QAAQ,KAAM,KACrCC,EAAsB,gBAAkBS,EAC9C,OACE,4BAAQ5C,UAAWmC,EAAqBC,QAAS,kBAAMN,GAAeD,KAAcgB,IAGlFS,EAAa,SAAC1B,GAClB,IAAM2B,EAAajE,EAAWiB,GAU9B,SAASiD,EAAcjI,GAIrB,OAHe+G,OAAOC,OAAO5I,EAAUsE,MAAMgB,UAAU1D,IAAQiH,KAC7D,SAACC,GAAD,OAAO,kBAAC,EAAD,CAAWC,IAAKD,EAAGT,MAAOS,OAIrC,SAASgB,EAAYlI,EAAOkG,GAC1B,OAAO9H,EAAUsE,MAAMiB,aAAa3D,GAASiG,EAAkBC,GAEjE,SAASuB,EAAezH,EAAOkG,EAAUwB,GACvC,OACE,yBAAKjD,UAAU,cACb,yBAAKA,UAAU,qBACb,wBAAIA,UAAU,oBAAd,SAAwCiD,GACxC,wBAAIjD,UAAU,mBAAmByD,EAAYlI,EAAOkG,GAApD,qBAEF,uBAAGzB,UAAU,aAAawD,EAAcjI,IACxC,8BAIN,OACE,oCACE,6BACE,4BAAQwE,GAAG,iBAAiBqC,QAAS,kBAAMmB,EAAW,YACpD,uBAAG/H,MAAM,uBAEb,yBAAKwE,UAAU,kBACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,qBACb,wBAAIA,UAAU,oBAtClBrG,EAAUsE,MAAMpE,KAAKiF,QAAUnF,EAAUsE,MAAMpE,KAAKkF,OAC/C,qBACEpF,EAAUsE,MAAMpE,KAAKkF,OACvB,UACEpF,EAAUsE,MAAMpE,KAAKiF,OACvB,gBADF,GAmCC,wBAAIkB,UAAU,mBAAmByD,EAAY,OAAQ,GAArD,qBAEF,uBAAGzD,UAAU,aAAawD,EAAc,SACxC,8BAPJ,IASGR,EAAe,MAAO,EAAG,KACzBA,EAAe,MAAO,EAAG,MACzBA,EAAe,QAAS,EAAG,OAC3BA,EAAe,OAAQ,EAAG,MAC1BA,EAAe,OAAQ,EAAG,KAC1BA,EAAe,MAAO,EAAG,MACzBA,EAAe,QAAS,EAAG,OAC3BA,EAAe,QAAS,EAAG,QAC3BA,EAAe,OAAQ,EAAG,UAM7BU,EAAc,SAAC9B,GAAW,IAAD,EACOxC,GAAS,GADhB,mBACtByC,EADsB,KACVC,EADU,KAEvBc,EAAQhB,EAAMI,MACda,EAAiBD,EAAMV,QAAQ,KAAM,KACrCC,EAAsB,gBAAkBS,EAC9C,OACE,4BAAQ5C,UAAWmC,EAAqBC,QAAS,kBAAMN,GAAeD,KAAcgB,EAAiB,YAGnGc,EAAS,SAAC/B,GAAW,IAAD,EACMtC,EAAWiB,GADjB,mBACRgD,GADQ,WAYxB,SAASC,EAAcjI,GAIrB,OAHe+G,OAAOC,OAAO5I,EAAUsE,MAAMe,OAAOzD,IAAQiH,KAC1D,SAACC,GAAD,OAAO,kBAAC,EAAD,CAAaC,IAAKD,EAAGT,MAAOS,OASvC,SAASO,EAAezH,EAAOkG,EAAUwB,GACvC,OACE,yBAAKjD,UAAU,cACf,yBAAKA,UAAU,qBACf,wBAAIA,UAAU,oBAAd,SAAwCiD,GACxC,wBAAIjD,UAAU,mBATlB,SAAqBzE,EAAOkG,GAC1B,OAAO9H,EAAUsE,MAAMiB,aAAa3D,GAASiG,EAAkBC,GAQ5BgC,CAAYlI,EAAOkG,GAApD,qBAEA,uBAAGzB,UAAU,aAAawD,EAAcjI,IACxC,8BAIJ,OACE,6BACE,4BAAQwE,GAAG,mBAAmBqC,QAAS,kBAAMmB,EAAW,UACtD,uBAAG/H,MAAM,gBAAkB,uCAE7B,yBAAKwE,UAAU,kBACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,qBACb,wBAAID,GAAG,kBAAkBC,UAAU,oBAvCvCrG,EAAUsE,MAAMpE,KAAKiF,QAAUnF,EAAUsE,MAAMpE,KAAKkF,OAC/C,qBACEpF,EAAUsE,MAAMpE,KAAKkF,OACvB,UACEpF,EAAUsE,MAAMpE,KAAKiF,OACvB,gBADF,GAoCC,wBAAIkB,UAAU,mBAAmBrG,EAAUsE,MAAMiB,aAAaf,KAA9D,qBAER,uBAAG6B,UAAU,aAAawD,EAAc,SACxC,8BAECR,EAAe,MAAO,EAAG,KACzBA,EAAe,MAAO,EAAG,MACzBA,EAAe,QAAS,EAAG,OAC3BA,EAAe,OAAQ,EAAG,MAC1BA,EAAe,OAAQ,EAAG,KAC1BA,EAAe,MAAO,EAAG,MACzBA,EAAe,QAAS,EAAG,OAC3BA,EAAe,QAAS,EAAG,QAC3BA,EAAe,OAAQ,EAAG,SAMzBY,EAAkB,SAAChC,GAAW,IAAD,EACGtC,EAAWkB,GADd,mBAC1BqD,EAD0B,KACdC,EADc,KAEjC,SAASC,EAAmBnK,GAC1B,OACE,4BAAQmG,GAAInG,EACJwI,QAAS,kBAAM0B,EAAclK,IAC7BoG,UAAY6D,IAAejK,EAAO,gBAAkB,kBACvDA,GAIT,OACE,6BACE,wBAAImG,GAAG,kBAAkBC,UAAU,mBAChC+D,EAAmB,UACnBA,EAAmB,aACnBA,EAAmB,WAMtBC,EAAwB,SAACpC,GAAW,IAAD,EACHxC,GAAS,GADN,mBAChCyC,EADgC,KACpBC,EADoB,KAEjCd,EAAUY,EAAMI,MAChBmB,EAAmBnC,EAAQkB,QAAQ,KAAM,KACzCC,EAAsB,gBAAkBnB,EAC9C,OACE,4BAAQhB,UAAWmC,EAAqBC,QAAS,kBAAMN,GAAeD,KAAcsB,IAGlFc,EAAmB,SAACrC,GAOxB,OACE,yBAAK5B,UAAU,kBACb,yBAAKA,UAAU,cACb,uBAAGA,UAAU,aARCsC,OAAOC,OAAO5I,EAAUmE,mBAAmBE,SAASwE,KACpE,SAACC,GAAD,OAAO,kBAAC,EAAD,CAAuBC,IAAKD,EAAGT,MAAOS,WAY7CyB,EAAgB,SAACtC,GACrB,IAAMuC,EAAO7E,EAAWc,GACxB,SAASgE,EAAsBC,EAAeC,EAAcC,GAC1D,OACA,uBAAGvE,UAAU,iBAEX,4BAAQA,UAAU,cAAcoC,QAAS,kBAAM+B,EAAK3E,EAAS,GAAI+E,EAAYF,MAA7E,QACCA,EAHH,KAGoBC,EAHpB,MAGqCC,GAIvC,OACE,6BACA,yBAAKxE,GAAG,kBACR,wBAAIA,GAAG,uBAAP,aACA,yBAAKA,GAAG,wBACLqE,EAAsB,MAAO3D,EAAKQ,GAClCmD,EAAsB,MAAO1D,EAAKQ,GAClCkD,EAAsB,MAAOzD,EAAKQ,GAClCiD,EAAsB,MAAOxD,EAAKQ,GAClCgD,EAAsB,MAAOvD,EAAKQ,GAClC+C,EAAsB,MAAOtD,EAAKQ,OAMnCkD,EAAiB,SAAC5C,GACtB,IAAMuC,EAAO7E,EAAWc,GAElB3E,EAASmG,EAAMnG,OAEjBgJ,EAAiBhJ,EAAO,GAAGyG,QAAQ,KAAM,KAE7CuC,EAAiBA,EAAevC,QAAQ,SAAU,KAElD,IAEyBwC,EAFnBC,EAAclJ,EAAO,GAS3B,OACE,4BACEuE,UAAS,kBATY0E,EASgBjJ,EAAO,GAR3C9B,EAAU8C,YAAYmI,eAAeF,GAC/B,cAEA,IAKE,YAA0CjJ,EAAO,IAC1D2G,QAAS,kBAAM+B,EAAK3E,EAAS,GAAImF,EAAaF,MAC7CA,EAHH,MAGqB,0BAAMzE,UAAU,eAAe2E,KAIlDE,EAAS,SAACjD,GAEd,IAAIkD,EAAcxC,OAAOyC,KAAKpL,EAAU8B,QAAQ+G,KAAI,SAACkC,GACnD,MAAO,CAACA,EAAO/K,EAAU8B,OAAOiJ,OAG9BM,EAAmB1C,OAAOyC,KAAKpL,EAAU8C,aAAa+F,KAAI,SAACkC,GAC7D,MAAO,CAACA,EAAO/K,EAAU8C,YAAYiI,OAKjCO,EAFU,sBAAIH,GAAJ,YAAoBE,IAAkBE,OAExB1C,KAAI,SAACC,GAAD,OAChC,kBAAC,EAAD,CAAgBC,IAAKD,EAAGhH,OAAQgH,OAEpC,OACE,oCACE,wBAAI1C,GAAG,gBAAP,UACA,wBAAIA,GAAG,oBAAoBoF,MAAO,CAACC,cAAe,SAChD,yBAAKrF,GAAG,iBACLkF,MAKHI,EAAgB,SAACzD,GAAW,IAAD,EACKtC,EAAWkB,GADhB,mBACxBqD,EADwB,KACZC,EADY,KAE/B,SAASC,EAAmBnK,GAC1B,OACE,4BAAQmG,GAAInG,EACJwI,QAAS,kBAAM0B,EAAclK,IAC7BoG,UAAY6D,IAAejK,EAAO,gBAAkB,kBACvDA,GAIT,OACE,6BACE,wBAAImG,GAAG,gBAAgBC,UAAU,mBAC9B+D,EAAmB,UACnBA,EAAmB,UACnBA,EAAmB,cAStBuB,EAAY,SAAC1D,GACjB,IAAM2D,EAASjG,EAAWgB,GADC,EAGClB,GAAS,GAHV,mBAGpBoG,EAHoB,KAGZC,EAHY,KAYrBC,EACF/L,EAAUG,UAAUE,MAAQL,EAAUG,UAAUG,OAASN,EAAUG,UAAUI,mBAE3EL,EAAQF,EAAUE,KAAM2I,KAC5B,SAACmD,GAAD,OAAO,kBAAC,EAAD,CAAejD,IAAKiD,EAAG3D,MAAO2D,OAEjCC,EAAajM,EAAU6B,MAAOgH,KAClC,SAACqD,GAAD,OAAO,kBAAC,EAAD,CAAkBnD,IAAKmD,EAAG7D,MAAO6D,OAE1C,OACI,6BACE,yBAAK7F,UAAU,gBACX,4BAAQA,UAAYwF,EAAS,eAAiB,gBAAkBpD,QAAS,kBAAMqD,GAAWD,KACxF,wBAAIzF,GAAG,gBAAgBpG,EAAUC,KAAjC,KAAyCD,EAAU4B,MAAnD,KACA,wBAAIwE,GAAG,YApBdyF,EACM,SAEA,YAoBS,IAAXA,GACC,yBAAKzF,GAAG,iBACN,yBAAKA,GAAG,iBAAR,SAA8B,6BAA9B,IAAsClG,GACtC,wBAAIkG,GAAG,aAAP,UAA0B,6BAA1B,IAAkC6F,IAGtC,yBAAK7F,GAAG,mBACN,yBAAKA,GAAG,eACN,uBAAGA,GAAG,MAAN,OAAgB2F,GAChB,uBAAG3F,GAAG,MAAN,OAAgBpG,EAAUQ,WAAWC,GAAGJ,QAE1C,yBAAK+F,GAAG,yBAAyBwF,OAMvCO,EAAgB,SAAClE,GACrB,OACE,8BAAOA,EAAMI,MAAb,QAGE+D,EAAmB,SAACnE,GACxB,OACE,4BAAKA,EAAMI,QAITgE,EAAc,SAACpE,GAAW,IAAD,EACOtC,EAAWkB,GADlB,mBACtBqD,EADsB,UAyB3B,OACE,6BACE,yBAAK9D,GAAG,eAzBd,SAAsBkG,GACpB,OAAOA,GACL,IAAK,SACH,OAAO,kBAAC,EAAD,MACT,IAAK,SACH,OAAO,kBAAC,EAAD,MACT,IAAK,UACH,OAAO,kBAAC,EAAD,MACT,IAAK,SACH,OAAO,kBAAC,EAAD,MACT,IAAK,YACH,OAAO,kBAAC,EAAD,MACT,IAAK,OACH,OAAO,kBAAC,EAAD,MACT,IAAK,OACH,OAAO,kBAAC,EAAD,MACT,IAAK,QACH,OAAO,kBAAC,EAAD,MACT,QACE,OAAO,kBAAC,EAAD,OAMgBC,CAAarC,MAKtCsC,EAAkB,SAACvE,GAavB,OACI,oCACE,yBAAK7B,GAAG,mBAdd,SAAmBkG,GACjB,OAAOA,GACL,IAAK,QACH,OAAO,kBAAC,EAAD,MACT,IAAK,UACH,OAAO,kBAAC,EAAD,MACT,KAAK,KACH,OAAO,KACT,QACE,OAAO,kBAAC,EAAD,OAKoBG,CAAUxE,EAAMqE,YAI7CI,GAAS,SAACzE,GACd,IAAM0E,EAAW,uBAAGvG,GAAG,WAAWC,UAAU,qBACtCuG,EAAc,uBAAGxG,GAAG,YAAYC,UAAU,yBAC1CwG,EAAW,uBAAGzG,GAAG,WAAWC,UAAU,kBAO5C,SAAS+D,EAAmBnK,EAAM6M,EAAMC,GACtC,OACE,4BAAQ3G,GAAInG,EACJwI,QAAS,kBATrB,SAAyBxI,EAAM8M,GAC7B9E,EAAM2B,WAAW3J,GACI,OAAlB8M,GACD9E,EAAMkC,cAAc4C,GAMGC,CAAgB/M,EAAM8M,IACrC1G,UAAY4B,EAAMqE,SAAWrM,EAAO,gBAAkB,kBAC7C6M,GAIrB,OACE,6BACE,wBAAI1G,GAAG,gBAAgBC,UAAU,mBAC9B+D,EAAmB,QAASuC,EAAU,UACtCvC,EAAmB,UAAWwC,EAAa,UAC3CxC,EAAmB,KAAMyC,EAAU,YAkC7BI,GA7BH,WAAO,IAAD,EACcxH,EAAS,SADvB,mBACT6G,EADS,KACA1C,EADA,OAEoBnE,EAAS,UAF7B,mBAETyE,EAFS,KAEGC,EAFH,OAGoB1E,EAAS,eAAiBzF,EAAUC,MAHxD,mBAGTiN,EAHS,KAGGC,EAHH,KAIhB,OACE,yBAAK/G,GAAG,cACN,6BACE,yBAAKA,GAAG,cACN,kBAACO,EAASyG,SAAV,CAAmB/E,MAAO6E,GACxB,kBAAC,EAAD,OAEF,kBAAC,GAAD,CAAQZ,QAASA,EAAS1C,WAAYA,EAAYO,cAAeA,IACjE,kBAACtD,EAAiBuG,SAAlB,CAA2B/E,MAAO,CAAC6B,EAAYC,IAC7C,kBAAC,EAAD,CAAiBmC,QAASA,MAG9B,kBAAC1F,EAAcwG,SAAf,CAAwB/E,MAAO,CAACiE,EAAS1C,IACzC,kBAAC/C,EAAiBuG,SAAlB,CAA2B/E,MAAO,CAAC6B,EAAYC,IAC3C,kBAAC1D,EAAS2G,SAAV,CAAmB/E,MAAO8E,GACxB,kBAAC,EAAD,SAIN,yBAAK/G,GAAG,oBC1nBIiH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFrH,SAASsH,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7099d909.chunk.js","sourcesContent":["export let character = {\n  name: 'Arn Hachem',\n  type: ['Human', 'Sanctified', 'Deathless', 'Spellstitched', 'Archlich'],\n  hitPoints: {\n    dieSize: 12,\n    total: 255,\n    damage: 0,\n    temporaryHitPoints: 0,\n  },\n  armorClass: {\n    ac: {\n      total: 37,\n      armor: 6,\n      shield: 0,\n      dexterity: 12,\n      size: 0,\n      naturalArmor: 5,\n      deflection: 4,\n      misc: 0\n    },\n    touch: 22,\n    flatFooted: 23\n  },\n  size: 'Medium',\n  alignment: 'Lawful-Good',\n  abilities: {\n    score: {\n      strength: 18,\n      dexterity: 24,\n      constitution: '--',\n      intelligence: 22,\n      wisdom: 17,\n      charisma: 35\n    },\n  },\n  speed: 30,\n  level: '20',\n  class: ['Sorcerer(1)', 'Mindtender(2)', 'Fleshwarper(2)', 'Malconvoker(7)', 'Binder(1)', 'Bard(1)', 'Master Of Masks(5)'],\n  skills: {\n    Balance: 12,\n    Climb: 4,\n    Concentration: 27,\n    Craft_Tailor: 13,\n    Escape_Artist: 12,\n    Hide: 25,\n    Jump: 4,\n    Listen: 4,\n    Move_Silently: 12,\n    Ride: 12,\n    Search: 6,\n    Spot: 4,\n    Survival: 4,\n    Swim: 12,\n    Use_Rope: 12,\n  },\n  classSkills: {\n    Appraise: 10,\n    Bluff: 41,\n    Decipher_Script: 23,\n    Diplomacy: 18,\n    Diguise: 39,\n    Forgery: 6,\n    Gather_Information: 9,\n    Heal: 16,\n    Intimidate: 19,\n    Knowledge_Arcana: 26,\n    Knowledge_Dungeoneering: 14,\n    Knowledge_Religion: 16,\n    Knowledge_Planes: 8,\n    Perception: 19,\n    Perform_Acting: 36,\n    Perform_Dancing: 13,\n    SenseMotive: 21,\n    Spellcraft: 28,\n    Stealth: 28,\n    Use_Magic_Device: 12,\n  },\n  characterAbilities: {\n    active: ['Light_Ray', 'Paralyzing_Touch', 'Positive_Energy_Touch', 'Turn_Undead'\n    ],\n    passive: ['Aura_Of_Menace'],\n  },\n  magic: {\n    slas: {\n      zero: '',\n      one: ['Chill_Touch', 'Floating_Disk'],\n      two: ['Command_Undead', 'Acid_Arrow'],\n      three: ['Vampiric_Touch', 'Phantom_Steed'],\n      four: ['Affliction', 'Enervation'],\n      five: ['Mage\\'s_Faithful_Hound', 'Wall_Of_Force'],\n      six: ['Contingency'],\n      seven: '',\n      eight: '',\n      nine: '',\n    },\n    spellcaster: true,\n    type: {\n      arcane: true,\n      divine: false,\n    },\n    spells: {\n      zero: ['Mending', 'Arcane_Mark', 'Ghost_Sound', 'Detect_Magic', 'Mage_Hand', 'Message', 'Light', 'Read Magic', 'Acid_Splash', 'Lullaby', 'Know_Direction', 'Open/Close', 'Prestidigitation'],\n      one: ['Silent_Image', 'Disguise_Self', 'Magic_Missile', 'Mage_Armor', 'Charm_Person'],\n      two: ['Ghoul_Touch', 'Arcane_Lock', 'Knock', 'Alter_Fortune', 'Scorching_Ray'],\n      three: ['Shrink_Item', 'Tiny_Hut', 'Ray_Of_Exhaustion', 'Explosive_Runes'],\n      four: ['Resilient_Sphere', 'Create_Fetch', 'Dimension_Door', 'Polymorph'],\n      five: ['Telekinesis', 'Sending', 'Passwall', 'Planar_Binding,_Lesser', 'Feeblemind'],\n      six: ['Disintigrate', 'Freezing_Sphere', 'Planar_Binding', 'Permanent_Image'],\n      seven: ['Teleport_Object', 'Stun_Ray', 'Waves_Of_Exhaustion'],\n      eight: ['Polymorph_Any_Object', 'Horrid_Wilting', 'Planar_Binding,_Greater', 'Last_Judgment'],\n      nine: ['Replicate_Casting', 'Sphere_Of_Ultimate_Destruction', 'Crushing_Hand']\n    },\n    spellbook: {\n      zero: ['Arcane_Mark', 'Prestidigitation', 'Mage_Hand', 'Resistance', 'Disrupt Undead', 'Touch_Of_Fatigue', 'Mending', 'Message', 'Open/Close', 'Preserve_Organ', 'No-Light', 'Slash_Tongue', 'Silent_Portal'],\n      one: ['a'],\n      two: ['a'],\n      three: ['a'],\n      four: ['a'],\n      five: ['a'],\n      six: ['a'],\n      seven: ['a'],\n      eight: ['a'],\n      nine: ['a'],\n    },\n    spellsPerDay: {\n      zero: 8,\n      one: 6,\n      two: 6,\n      three: 6,\n      four: 6,\n      five: 6,\n      six: 6,\n      seven: 6,\n      eight: 6,\n      nine: 6,\n    },\n  },\n  items: [\n    'Mesmerist\\'s_Gloves', 'Nolzure\\'s_Orb', 'Vanisher_Cloak', 'GateBreaker_Ballista_Bolt'\n  ],\n}\n","import React from 'react';\nimport './dnd.css';\nimport { character } from './Arn_Hachem.js'\nconst { useState, useContext, useEffect } = React;\ndocument.title = character.name;\n\n\nfunction rollDice(size, mod, use){\n  const dice = Math.floor((Math.random() * size) +1)\n  function edgeRollClassAssignment(dice){\n    if(dice === 1){\n      return 'natOne'\n    }else if(dice === 20){\n      return 'natTwenty'\n    }else{\n      return null\n    }\n  }\n  const result =\n  <span>\n    <span id='rollUse'>{use}</span>\n    <div id='rollTopLine'>\n      <span id='rollTotal' className={edgeRollClassAssignment(dice)}>{dice}</span> <span id='modTotal'> + {mod} =</span>\n    </div>\n    <p id='rollModTotal'>{dice + mod}</p>\n  </span>\n  return result\n}\nconst TossDice = React.createContext(null)\nconst ReadDice = React.createContext(null)\nconst GetSetDisplay = React.createContext(null)\nconst GetSetDisplayTwo = React.createContext(null)\n/******************************Character Info****************************/\nconst str = character.abilities.score.strength\nconst dex = character.abilities.score.dexterity\nconst con = character.abilities.score.constitution\nconst int = character.abilities.score.intelligence\nconst wis = character.abilities.score.wisdom\nconst cha = character.abilities.score.charisma\nfunction abilityModifier(ability) {\n  if(character.abilities.score[ability] === '--'){\n    return '--'\n  }\n  return Math.floor((character.abilities.score[ability] - 10) / 2)\n}\nconst strMod = abilityModifier('strength')\nconst dexMod = abilityModifier('dexterity')\nconst conMod = abilityModifier('constitution')\nconst intMod = abilityModifier('intelligence')\nconst wisMod = abilityModifier('wisdom')\nconst chaMod = abilityModifier('charisma')\nlet primaryModifier = chaMod\nfunction bonusSpellsPerDay(levelNum){\n  return Math.ceil((primaryModifier - (levelNum - 1)) / 4)\n}\nfunction spellSave(){\n  return Math.floor(10 + character.abilities.primaryModifier('charisma'))\n}\n/******************************Character Info****************************/\nconst ItemsHeld = (props) => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const item = props.value\n  const formattedItem = item.replace(/_/g, ' ')\n  const buttonAndSpellClass = 'spellButtons ' + item\n  return(\n    <button className={buttonAndSpellClass} onClick={() => setToggleInfo(!toggleInfo)}>{formattedItem}</button>\n  )\n}\nconst Items = (props) => {\n  function displayItems(){\n    const items = Object.values(character.items).map(\n      (s) => <ItemsHeld key={s} value={s} />\n    );\n    return items;\n  }\n  return(\n    <div>\n      <h1>Items</h1>\n      <div className='spellContainer'>\n        <div className='spellItems'>\n          <p className='spellList'>{displayItems()}</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst KnownSLAs = (props) => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const spell = props.value\n  const formattedSpell = spell.replace(/_/g, ' ')\n  const buttonAndSpellClass = 'spellButtons ' + spell\n  return(\n    <button className={buttonAndSpellClass} onClick={() => setToggleInfo(!toggleInfo)}>{formattedSpell}</button>\n  )\n}\nconst SLAs = (props) => {\n  //cantrips or orisons? or both?\n  function casterType() {\n    if (character.magic.type.arcane && character.magic.type.divine){\n      return 'Cantrips & Orisons'\n    } else if (character.magic.type.divine){\n      return 'Orisons'\n    } else if (character.magic.type.arcane){\n      return 'Cantrips'\n    }\n  }\n  function displaySLAs(level){\n    const slas = Object.values(character.magic.slas[level]).map(\n      (s) => <KnownSLAs key={s} value={s} />\n    );\n    return slas;\n  }\n  //condense SLA code block into function\n  function spellCodeBlock(level, levelNum, levelRoman){\n    return (\n      <div className='spellItems'>\n        <div className='spellLevelWrapper'>\n          <h2 className='spellLevelHeader'>Level {levelRoman}</h2>\n        </div>\n        <p className='spellList'>{displaySLAs(level)}</p>\n        <hr/>\n      </div>\n    )\n  }\n  return (\n    <div>\n      <div className='spellContainer'>\n        <div className='spellItems'>\n          <div className='spellLevelWrapper'>\n            <h2 className='spellLevelHeader'>{casterType()}</h2>\n          </div>\n          <p className='spellList'>{displaySLAs('zero')}</p>\n          <hr/>\n        </div>\n        {spellCodeBlock('one', 1, 'I')}\n        {spellCodeBlock('two', 2, 'II')}\n        {spellCodeBlock('three', 3, 'III')}\n        {spellCodeBlock('four', 4, 'IV')}\n        {spellCodeBlock('five', 5, 'V')}\n        {spellCodeBlock('six', 6, 'VI')}\n        {spellCodeBlock('seven', 7, 'VII')}\n        {spellCodeBlock('eight', 8, 'VIII')}\n        {spellCodeBlock('nine', 9, 'IX')}\n      </div>\n    </div>\n  );\n}\n\nconst KnownActiveAbilities = (props) => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const ability = props.value\n  const formattedAbility = ability.replace(/_/g, ' ')\n  const buttonAndSpellClass = 'spellButtons ' + ability\n  return(\n    <button className={buttonAndSpellClass} onClick={() => setToggleInfo(!toggleInfo)}>{formattedAbility}</button>\n  )\n}\nconst ActiveAbilities = (props) => {\n  function displayAbilities(){\n    const abilities = Object.values(character.characterAbilities.active).map(\n      (s) => <KnownActiveAbilities key={s} value={s} />\n    );\n    return abilities;\n  }\n  return(\n    <div className='spellContainer'>\n      <div className='spellItems'>\n        <p className='spellList'>{displayAbilities()}</p>\n      </div>\n    </div>\n  )\n}\n\n/*const UseSpell = (props) => {\n  const newArray = Object.values(character.magic.spells.zero).map(spell => spell)\n  function spellList(level) {\n    if (character.magic.spells[level].length == 0){\n      return 'LEVEL UP FIRST'\n    }else if (Array.isArray(character.magic.spells[level])) {\n      return '| ' + Object.values(character.magic.spells[level]).map(x => (\n        <a href='#' key={x}>{x}</a>))\n        .join(' | ') + ' |'\n    }\n    return '| ' + character.magic.spells[level] + ' |'\n  }\n  return (\n    <div>\n      <h1>Level 1</h1>\n      <p>{Object.values(character.magic.spells.one).map(x => (\n        <a href='#'>{`${x}`}</a>\n      ))}</p>\n    </div>\n  )\n} */\nconst Spellbook = (props) => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const spell = props.value\n  const formattedSpell = spell.replace(/_/g, ' ')\n  const buttonAndSpellClass = 'spellButtons ' + spell\n  return(\n    <button className={buttonAndSpellClass} onClick={() => setToggleInfo(!toggleInfo)}>{formattedSpell}</button>\n  )\n}\nconst PrepSpells = (props) => {\n  const setDisplay = useContext(GetSetDisplay)\n  function casterType() {\n    if (character.magic.type.arcane && character.magic.type.divine){\n      return 'Cantrips & Orisons'\n    } else if (character.magic.type.divine){\n      return 'Orisons'\n    } else if (character.magic.type.arcane){\n      return 'Cantrips'\n    }\n  }\n  function displaySpells(level){\n    const spells = Object.values(character.magic.spellbook[level]).map(\n      (s) => <Spellbook key={s} value={s} />\n    );\n    return spells;\n  }\n  function totalSpells(level, levelNum) {\n    return character.magic.spellsPerDay[level] + bonusSpellsPerDay(levelNum)\n  }\n  function spellCodeBlock(level, levelNum, levelRoman){\n    return (\n      <div className='spellItems'>\n        <div className='spellLevelWrapper'>\n          <h2 className='spellLevelHeader'>Level {levelRoman}</h2>\n          <em className='remainingSpells'>{totalSpells(level, levelNum)} remaining today</em>\n        </div>\n        <p className='spellList'>{displaySpells(level)}</p>\n        <hr/>\n      </div>\n    )\n  }\n  return (\n    <>\n      <div>\n        <button id='returnToSpells' onClick={() => setDisplay('Spells')}>\n          <i class=\"fas fa-arrow-left\"></i>\n        </button>\n      <div className='spellContainer'>\n        <div className='spellItems'>\n          <div className='spellLevelWrapper'>\n            <h2 className='spellLevelHeader'>{casterType()}</h2>\n            <em className='remainingSpells'>{totalSpells('zero', 0)} remaining today</em>\n          </div>\n          <p className='spellList'>{displaySpells('zero')}</p>\n          <hr/>\n        </div> {/*0*/}\n        {spellCodeBlock('one', 1, 'I')}\n        {spellCodeBlock('two', 2, 'II')}\n        {spellCodeBlock('three', 3, 'III')}\n        {spellCodeBlock('four', 4, 'IV')}\n        {spellCodeBlock('five', 5, 'V')}\n        {spellCodeBlock('six', 6, 'VI')}\n        {spellCodeBlock('seven', 7, 'VII')}\n        {spellCodeBlock('eight', 8, 'VIII')}\n        {spellCodeBlock('nine', 9, 'IX')}\n      </div>\n    </div>\n    </>\n  )\n}\nconst KnownSpells = (props) => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const spell = props.value\n  const formattedSpell = spell.replace(/_/g, ' ')\n  const buttonAndSpellClass = 'spellButtons ' + spell\n  return(\n    <button className={buttonAndSpellClass} onClick={() => setToggleInfo(!toggleInfo)}>{formattedSpell + ' \\u221e'}</button>\n  )\n}\nconst Spells = (props) => {\n  const [display, setDisplay] = useContext(GetSetDisplay);\n  //cantrips or orisons? or both?\n  function casterType() {\n    if (character.magic.type.arcane && character.magic.type.divine){\n      return 'Cantrips & Orisons'\n    } else if (character.magic.type.divine){\n      return 'Orisons'\n    } else if (character.magic.type.arcane){\n      return 'Cantrips'\n    }\n  }\n  function displaySpells(level){\n    const spells = Object.values(character.magic.spells[level]).map(\n      (s) => <KnownSpells key={s} value={s} />\n    );\n    return spells;\n  }\n  //total castings per day\n  function totalSpells(level, levelNum) {\n    return character.magic.spellsPerDay[level] + bonusSpellsPerDay(levelNum)\n  }\n  //condense spell block into function\n  function spellCodeBlock(level, levelNum, levelRoman){\n    return (\n      <div className='spellItems'>\n      <div className='spellLevelWrapper'>\n      <h2 className='spellLevelHeader'>Level {levelRoman}</h2>\n      <em className='remainingSpells'>{totalSpells(level, levelNum)} remaining today</em>\n      </div>\n      <p className='spellList'>{displaySpells(level)}</p>\n      <hr/>\n      </div>\n    )\n  }\n  return (\n    <div>\n      <button id='prepSpellsButton' onClick={() => setDisplay('Prep')}>\n        <i class=\"fas fa-book\"></i><span>PREP</span>\n      </button>\n      <div className='spellContainer'>\n        <div className='spellItems'>\n          <div className='spellLevelWrapper'>\n            <h2 id='levelZeroHeader' className='spellLevelHeader'>{casterType()}</h2>\n            <em className='remainingSpells'>{character.magic.spellsPerDay.zero} remaining today</em>\n          </div>\n    <p className='spellList'>{displaySpells('zero')}</p>\n    <hr/>\n    </div>\n    {spellCodeBlock('one', 1, 'I')}\n    {spellCodeBlock('two', 2, 'II')}\n    {spellCodeBlock('three', 3, 'III')}\n    {spellCodeBlock('four', 4, 'IV')}\n    {spellCodeBlock('five', 5, 'V')}\n    {spellCodeBlock('six', 6, 'VI')}\n    {spellCodeBlock('seven', 7, 'VII')}\n    {spellCodeBlock('eight', 8, 'VIII')}\n    {spellCodeBlock('nine', 9, 'IX')}\n    </div>\n    </div>\n  );\n}\n\nconst AbilitySelector = (props) => {\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo)\n  function navButtonCodeBlock(name){\n    return(\n      <button id={name}\n              onClick={() => setDisplayTwo(name)}\n              className={(displayTwo === name ? 'navbarItemsOn' : 'navbarItemsOff')}>\n          {name}\n      </button>\n    )\n  }\n  return(\n    <div>\n      <ul id='abilitySelector' className='navbarContainer'>\n        {navButtonCodeBlock('Spells')}\n        {navButtonCodeBlock('Abilities')}\n        {navButtonCodeBlock('SLAs')}\n      </ul>\n    </div>\n  )\n}\n\nconst KnownPassiveAbilities = (props) => {\n  const [toggleInfo, setToggleInfo] = useState(false);\n  const ability = props.value\n  const formattedAbility = ability.replace(/_/g, ' ')\n  const buttonAndSpellClass = 'spellButtons ' + ability\n  return(\n    <button className={buttonAndSpellClass} onClick={() => setToggleInfo(!toggleInfo)}>{formattedAbility}</button>\n  )\n}\nconst PassiveAbilities = (props) => {\n  function displayAbilities(){\n    const abilities = Object.values(character.characterAbilities.passive).map(\n      (s) => <KnownPassiveAbilities key={s} value={s} />\n    );\n    return abilities;\n  }\n  return(\n    <div className='spellContainer'>\n      <div className='spellItems'>\n        <p className='spellList'>{displayAbilities()}</p>\n      </div>\n    </div>\n  )\n}\nconst AbilityScores = (props) => {\n  const roll = useContext(TossDice)\n  function abilityScoreCodeBlock(abilityString, abilityScore, abilityMod){\n    return(\n    <p className='abilityScores'>\n      {/*button appears on same line*/}\n      <button className='rollAbility' onClick={() => roll(rollDice(20, abilityMod, abilityString))}>roll</button>\n      {abilityString}: {abilityScore} | {abilityMod}\n    </p>\n    )\n  }\n  return (\n    <div>\n    <div id='statsContainer'>\n    <h1 id='abilityScoresHeader'>Abilities</h1>\n    <div id='abilityScoresWrapper'>\n      {abilityScoreCodeBlock('STR', str, strMod)}\n      {abilityScoreCodeBlock('DEX', dex, dexMod)}\n      {abilityScoreCodeBlock('CON', con, conMod)}\n      {abilityScoreCodeBlock('INT', int, intMod)}\n      {abilityScoreCodeBlock('WIS', wis, wisMod)}\n      {abilityScoreCodeBlock('CHA', cha, chaMod)}\n    </div>\n    </div>\n    </div>\n  );\n}\nconst SkillsListItem = (props) => {\n  const roll = useContext(TossDice);\n  // store props to make code simpler\n  const skills = props.skills\n  // replace underscore with space and store\n  let formattedSkill = skills[0].replace(/_/g, ' ');\n  // update variable replacing (Know)ledge with :\n  formattedSkill = formattedSkill.replace(/ledge/g, ':')\n  // store skill points separately\n  const skillPoints = skills[1];\n  // confirm class skill to add css class\n  function findClassSkills(skill){\n    if(character.classSkills.hasOwnProperty(skill)){\n      return 'classSkills'\n    }else{\n      return ''\n    }\n  }\n  return (\n    <button\n      className={`skills ${findClassSkills(skills[0])} ${skills[0]}`}\n      onClick={() => roll(rollDice(20, skillPoints, formattedSkill))}>\n      {formattedSkill} | <span className='skillPoints'>{skillPoints}</span>\n    </button>\n  )\n}\nconst Skills = (props) =>  {\n  //put character's skills into array as [key, value]\n  let skillsArray = Object.keys(character.skills).map((skill) => {\n    return [skill, character.skills[skill]]\n  });\n  // put character's class skills into array as [key, value]\n  let classSkillsArray = Object.keys(character.classSkills).map((skill) => {\n    return [skill, character.classSkills[skill]];\n  });\n  // combine both arrays into new array, sorted alphabetically\n  let allSkills = [...skillsArray, ...classSkillsArray].sort();\n  // pass skills to child component\n  const skillsBlock = allSkills.map((s) =>\n    <SkillsListItem key={s} skills={s} />\n  );\nreturn(\n  <>\n    <h1 id='skillsHeader'>Skills</h1>\n    <ul id='skillsListWrapper' style={{listStyleType: 'none'}}>\n      <div id='skillsWrapper'>\n        {skillsBlock}\n      </div>\n    </ul>\n  </>\n);}\nconst StatsSelector = (props) => {\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo);\n  function navButtonCodeBlock(name){\n    return(\n      <button id={name}\n              onClick={() => setDisplayTwo(name)}\n              className={(displayTwo === name ? 'navbarItemsOn' : 'navbarItemsOff')}>\n          {name}\n      </button>\n    )\n  }\n  return(\n    <div>\n      <ul id='statsSelector' className='navbarContainer'>\n        {navButtonCodeBlock('Skills')}\n        {navButtonCodeBlock('Scores')}\n        {navButtonCodeBlock('Passive')}\n      </ul>\n    {/*  <div id='statsDisplay'>\n        {selection(display)}\n      </div>   */}\n    </div>\n  )\n}\n\nconst BasicInfo = (props) => {\n  const result = useContext(ReadDice);\n//toggle for 'more' button\n  const [toggle, setToggle] = useState(false);\n//display conditional more/less\n  const moreLess = () => {\n    if(toggle){\n      return '(less)'\n    } else {\n      return '(more)'\n    }\n  }\n  const health = (\n      character.hitPoints.total - character.hitPoints.damage + character.hitPoints.temporaryHitPoints\n  );\n  const type = (character.type).map(\n    (t) => <CharacterType key={t} value={t} />\n  );\n  const classList = (character.class).map(\n    (c) => <CharacterClasses key={c} value={c} />\n  );\n  return (\n      <div>\n        <div className='topContainer'>\n            <button className={(toggle ? 'moreButtonOn' : 'moreButtonOff')} onClick={() => setToggle(!toggle)}>\n              <h1 id='nameAndLevel'>{character.name} ({character.level})</h1>\n              <em id='moreLess'>{moreLess()}</em>\n            </button>\n\n          {toggle === true &&\n            <div id='characterInfo'>\n              <div id='characterType'>type: <br /> {type}</div>\n              <ul id='classList'>class: <br /> {classList}</ul>\n            </div>\n          }\n          <div id='HPACDiceWrapper'>\n            <div id='hpacWrapper'>\n              <p id='hp'>hp: {health}</p>\n              <p id='ac'>ac: {character.armorClass.ac.total}</p>\n            </div>\n            <div id='diceRollResultWrapper'>{result}</div>\n          </div>\n        </div>\n      </div>\n    );\n}\nconst CharacterType = (props) => {\n  return(\n    <span>{props.value} / </span>\n  )\n}\nconst CharacterClasses = (props) => {\n  return(\n    <li>{props.value}</li>\n  )\n}\n\nconst MainDisplay = (props) => {\n  const [displayTwo, setDisplayTwo] = useContext(GetSetDisplayTwo);\n  function screenSwitch(display){\n    switch(display) {\n      case 'Skills':\n        return <Skills />\n      case 'Scores':\n        return <AbilityScores />\n      case 'Passive':\n        return <PassiveAbilities />\n      case 'Spells':\n        return <Spells />\n      case 'Abilities':\n        return <ActiveAbilities />\n      case 'SLAs':\n        return <SLAs />\n      case 'Prep':\n        return <PrepSpells />\n      case 'Items':\n        return <Items />\n      default:\n        return <Skills />\n    }\n  }\n\n    return(\n      <div>\n        <div id='mainContent'>{screenSwitch(displayTwo)}</div>\n      </div>\n    );\n\n}\nconst SecondaryNavbar = (props) => {\n  function navSwitch(display){\n    switch(display){\n      case 'stats':\n        return <StatsSelector />\n      case 'ability':\n        return <AbilitySelector />\n      case null:\n        return null\n      default:\n        return <StatsSelector />\n    }\n  }\n  return(\n      <>\n        <div id='secondaryNavbar'>{navSwitch(props.display)}</div>\n      </>\n  )\n}\nconst Navbar = (props) => {\n  const statIcon = <i id='statIcon' className=\"far fa-chart-bar\"></i>;\n  const abilityIcon = <i id=\"spellIcon\" className=\"fas fa-hand-sparkles\"></i>;\n  const itemIcon = <i id='itemIcon' className=\"fas fa-scroll\"></i>;\n  function setBothDisplays(name, secondaryName){\n    props.setDisplay(name);\n    if(secondaryName !== null){\n      props.setDisplayTwo(secondaryName)\n    }\n  }\n  function navButtonCodeBlock(name, icon, secondaryName){\n    return(\n      <button id={name}\n              onClick={() => setBothDisplays(name, secondaryName)}\n              className={(props.display == name ? 'navbarItemsOn' : 'navbarItemsOff')}>\n                      {icon}\n      </button>\n    )\n  }\n  return (\n    <div>\n      <ul id='primaryNavbar' className='navbarContainer'>\n        {navButtonCodeBlock('stats', statIcon, 'Skills')}\n        {navButtonCodeBlock('ability', abilityIcon, 'Spells')}\n        {navButtonCodeBlock(null, itemIcon, 'Items')}\n      </ul>\n    </div>\n  );\n}\nconst App = () => {\n  const [display, setDisplay] = useState('stats')\n  const [displayTwo, setDisplayTwo] = useState('Skills')\n  const [rollResult, setRollResult] = useState('Good luck,\\n' + character.name)\n  return (\n    <div id='appWrapper'>\n      <div>\n        <div id='topWrapper'>\n          <ReadDice.Provider value={rollResult}>\n            <BasicInfo />\n          </ReadDice.Provider>\n          <Navbar display={display} setDisplay={setDisplay} setDisplayTwo={setDisplayTwo} />\n          <GetSetDisplayTwo.Provider value={[displayTwo, setDisplayTwo]}>\n            <SecondaryNavbar display={display}/>\n          </GetSetDisplayTwo.Provider>\n        </div>\n        <GetSetDisplay.Provider value={[display, setDisplay]}>\n        <GetSetDisplayTwo.Provider value={[displayTwo, setDisplayTwo]}>\n            <TossDice.Provider value={setRollResult}>\n              <MainDisplay />\n            </TossDice.Provider>\n        </GetSetDisplayTwo.Provider>\n        </GetSetDisplay.Provider>\n        <div id='bottomSpacer'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './dnd.css';\nimport App from './dnd';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}