{"version":3,"sources":["recoilState.js","components/Navbars/Navbars.js","utilities/utilities.js","components/TopComponent/TopComponent.js","components/BasicInfo/BasicInfo.js","components/Items/Items.js","components/SLAs/SLAs.js","components/Modal/Modal.js","components/ActiveAbilities/ActiveAbilities.js","components/Modal/AllSpellInfo/AllSpellInfo.js","components/SpellInfo/SpellInfo.js","components/Modal/AbilityScores/AbilityScores.js","components/Modal/HitPointInfo/HitPointInfo.js","components/Modal/ArmorClassInfo/ArmorClassInfo.js","components/Modal/DefenseInfo/DefenseInfo.js","components/PrepSpells/PrepSpells.js","components/Spells/Spells.js","components/PassiveAbilities/PassiveAbilities.js","components/Skills/Skills.js","components/MainDisplay/MainDisplay.js","components/dnd.js","serviceWorker.js","server/characters/index.js","server/characters/Arn_Hachem.js","server/spells/index.js","server/index.js","index.js"],"names":["compendiumState","atom","key","default","characterState","damageState","temporaryHitPointsState","primaryModifierState","diceRollState","mainContentState","secondaryNavbarState","modalTypeState","selectionState","emptySpellsArray","innateSpellsCastState","preppedSpellsState","preppedSpellsCastState","NavButtonCodeBlock","props","useRecoilState","mainContent","setMainContent","id","name","onClick","className","AbilitySelector","StatsSelector","SecondaryNavbar","secondaryNavbar","useRecoilValue","display","navSwitch","PrimaryNavbar","setSecondaryNavbar","useSetRecoilState","statIcon","abilityIcon","itemIcon","navButtonCodeBlock","icon","secondaryName","setBothDisplays","clone","object","JSON","parse","stringify","getAC","character","ac","armorClass","armor","deflection","dexterity","misc","naturalArmor","shield","size","textClassToGreenOrRed","current","expected","camelCaseToTitleCase","item","string","replace","x","charAt","toUpperCase","slice","CharacterType","value","CharacterClasses","TopComponent","useState","toggle","setToggle","setInnateSpellsCast","setpreppedSpells","setPreppedSpellsCast","damage","setDamage","fullRest","Math","max","level","type","map","t","classList","class","c","BasicInfo","rollResult","temporaryHitPoints","setModalType","welcome","currentHP","hitPoints","total","currentAC","textColorClass","toggleModal","modalType","ItemsHeld","formattedItem","buttonAndSpellClass","Items","Object","values","items","s","KnownSLAs","spell","formattedSpell","SLAs","displaySLAs","magic","slas","spellCodeBlock","levelNum","levelRoman","arcane","divine","Modal","onClose","children","rest","useEffect","document","body","add","remove","KnownActiveAbilities","ability","formattedAbility","ActiveAbilities","characterAbilities","active","CastingSpell","selection","matchedSpell","addUsedSpell","displayCompendiumInfo","undefined","PreppingSpell","CastingPreppedSpell","removeUsedSpell","disableSpell","UsedPreppedSpell","disabled","CompendiumSpell","property","formattedValue","input","trim","formatProperty","SpellInfo","compendium","innateSpellsCast","preppedSpells","setPreppedSpells","preppedSpellsCast","getSpellLevel","innatePrepOrPrepped","foundLevel","keys","spells","forEach","includes","spellbook","find","spellObject","lvlConversion","zero","one","two","three","four","five","six","seven","eight","nine","levelString","newArray","push","used","findIndex","splice","chooseModal","AbilityScores","str","abilities","score","strength","dex","con","constitution","int","intelligence","wis","wisdom","cha","charisma","strMod","abilityModifier","dexMod","conMod","intMod","wisMod","chaMod","setRollResult","renderAbilityScore","abilityScoreCodeBlock","abilityString","abilityScore","abilityMod","rollDice","HitPointInfo","tempHP","setTempHP","damageInput","setDamageInput","tempHPInput","setTempHPInput","handleDamageSubmit","addOrSubtract","handleTempHPSubmit","onChange","e","Number","target","ArmorClassItem","ArmorClassInfo","armorClassItems","entries","i","EnergyResistanceItem","defense","energyResistance","DefenseInfo","energyResistanceItems","damageReduction","amount","weakness","spellResistance","KnownSpell","setSelection","displayInfo","Spellbook","CasterType","romans","numStrings","SpellCodeBlock","primaryModifier","remainingSpells","totalSpells","length","PrepSpells","_","PreppedSpellCast","PreppedSpellsCast","psc","PreppedSpell","PreppedSpells","ps","KnownSpells","Spells","spellsPerDay","KnownPassiveAbilities","PassiveAbilities","passive","SkillsListItem","skills","formattedSkill","skill","skillPoints","classSkills","hasOwnProperty","Skills","skillsArray","classSkillsArray","skillsBlock","sort","MainDisplay","infoSheet","screenSwitch","mod","use","roll","floor","random","edgeRollClassAssignment","ceil","bonusSpellsPerDay","App","title","LoadApp","charactersResponse","useSWR","data","spellsResponse","setCharacter","setCompendium","setPrimaryModifier","characters","primary","Boolean","window","location","hostname","match","dieSize","acid","cold","electricity","fire","sonic","saves","fortitude","base","reflex","will","alignment","speed","Balance","Climb","Concentration","Escape_Artist","Hide","Jump","Listen","Move_Silently","Ride","Search","Spot","Survival","Swim","Use_Rope","Appraise","Bluff","Craft_Tailor","Decipher_Script","Diplomacy","Diguise","Forgery","Gather_Information","Heal","Intimidate","Knowledge_Arcana","Knowledge_Dungeoneering","Knowledge_Religion","Knowledge_Planes","Perception","Perform_Acting","Perform_Dancing","SenseMotive","Spellcraft","Stealth","Use_Magic_Device","spellcaster","components","castingTime","range","duration","savingThrow","description","effect","environment","server","Server","models","Model","serializers","application","RestSerializer","seeds","char","create","routes","this","namespace","get","schema","all","makeServer","ReactDOM","render","StrictMode","fetcher","fetch","then","res","json","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"ydAEaA,EAAkBC,YAAK,CAClCC,IAAK,kBACLC,QAAS,OAGEC,EAAiBH,YAAK,CACjCC,IAAK,iBACLC,QAAS,OAGEE,EAAcJ,YAAK,CAC9BC,IAAK,cACLC,QAAS,IAGEG,EAA0BL,YAAK,CAC1CC,IAAK,0BACLC,QAAS,IAGEI,EAAuBN,YAAK,CACvCC,IAAK,uBACLC,QAAS,OAGEK,EAAgBP,YAAK,CAChCC,IAAK,gBACLC,QAAS,KAEEM,EAAmBR,YAAK,CACnCC,IAAK,mBACLC,QAAS,WAEEO,EAAuBT,YAAK,CACvCC,IAAK,8BACLC,QAAS,UAEEQ,EAAiBV,YAAK,CACjCC,IAAK,iBACLC,QAAS,QAEES,EAAiBX,YAAK,CACjCC,IAAK,iBACLC,QAAS,KAGEU,EAAmB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACxDC,EAAwBb,YAAK,CACxCC,IAAK,wBACLC,QAASU,IAEEE,EAAqBd,YAAK,CACrCC,IAAK,qBACLC,QAASU,IAEEG,EAAyBf,YAAK,CACzCC,IAAK,yBACLC,QAASU,ICrDLI,G,MAAqB,SAACC,GAAW,IAAD,EACEC,YAAeV,GADjB,mBAC7BW,EAD6B,KAChBC,EADgB,KAEpC,OACE,4BACEC,GAAIJ,EAAMK,KACVC,QAAS,kBAAMH,EAAeH,EAAMK,OACpCE,UACEL,IAAgBF,EAAMK,KAAO,gBAAkB,kBAGhDL,EAAMK,QAKPG,EAAkB,WACtB,OACE,6BACE,wBAAIJ,GAAG,kBAAkBG,UAAU,mBACjC,kBAAC,EAAD,CAAoBF,KAAM,WAC1B,kBAAC,EAAD,CAAoBA,KAAM,cAC1B,kBAAC,EAAD,CAAoBA,KAAM,YAM5BI,EAAgB,WACpB,OACE,6BACE,wBAAIL,GAAG,gBAAgBG,UAAU,mBAC/B,kBAAC,EAAD,CAAoBF,KAAM,WAC1B,kBAAC,EAAD,CAAoBA,KAAM,eAM5BK,EAAkB,SAACV,GACvB,IAAMW,EAAkBC,YAAepB,GAavC,OACE,oCACE,yBAAKY,GAAG,mBAdZ,SAAmBS,GACjB,OAAQA,GACN,IAAK,QACH,OAAO,kBAAC,EAAD,MACT,IAAK,UACH,OAAO,kBAAC,EAAD,MACT,KAAK,KACH,OAAO,KACT,QACE,OAAO,kBAAC,EAAD,OAKkBC,CAAUH,MAIrCI,EAAgB,SAACf,GAAW,IAAD,EACeC,YAC5CT,GAF6B,mBACxBmB,EADwB,KACPK,EADO,KAIzBb,EAAiBc,YAAkB1B,GACnC2B,EAAW,uBAAGd,GAAG,WAAWG,UAAU,qBACtCY,EAAc,uBAAGf,GAAG,YAAYG,UAAU,yBAC1Ca,EAAW,uBAAGhB,GAAG,WAAWG,UAAU,kBAO5C,SAASc,EAAmBhB,EAAMiB,EAAMC,GACtC,OACE,4BACEnB,GAAIC,EACJC,QAAS,kBAVf,SAAyBD,EAAMkB,GAC7BP,EAAmBX,GACG,OAAlBkB,GACFpB,EAAeoB,GAOEC,CAAgBnB,EAAMkB,IACrChB,UACEI,IAAoBN,EAAO,gBAAkB,kBAG9CiB,GAIP,OACE,6BACE,wBAAIlB,GAAG,gBAAgBG,UAAU,mBAC9Bc,EAAmB,QAASH,EAAU,UACtCG,EAAmB,UAAWF,EAAa,UAC3CE,EAAmB,KAAMD,EAAU,YChGrC,SAASK,EAAMC,GACpB,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,IAE5B,SAASI,EAAMC,GACpB,IAAMC,EAAKD,EAAUE,WACrB,OACE,GACAD,EAAGE,MACHF,EAAGG,WACHH,EAAGI,UACHJ,EAAGK,KACHL,EAAGM,aACHN,EAAGO,OACHP,EAAGQ,KAGA,SAASC,EAAsBC,EAASC,GAC7C,OAAID,EAAUC,EACL,YACED,EAAUC,EACZ,UAEA,KAGJ,SAASC,EAAqBC,GAEnC,IAAIC,EAASD,EAAKE,QAAQ,UAAU,SAACC,GAAD,MAAO,IAAMA,KAGjD,OADAF,EAASA,EAAOG,OAAO,GAAGC,cAAgBJ,EAAOK,MAAM,G,UChBnDC,EAAgB,SAACpD,GACrB,OAAO,8BAAOA,EAAMqD,MAAb,QAEHC,EAAmB,SAACtD,GACxB,OAAO,4BAAKA,EAAMqD,QAyDLE,EAtDM,SAACvD,GACpB,IAAM+B,EAAYnB,YAAe1B,GADH,EAEFsE,oBAAS,GAFP,mBAEvBC,EAFuB,KAEfC,EAFe,KAGxBC,EAAsB1C,YAAkBrB,GACxCgE,EAAmB3C,YAAkBpB,GACrCgE,EAAuB5C,YAAkBnB,GALjB,EAMFG,YAAed,GANb,mBAMvB2E,EANuB,KAMfC,EANe,KAe9B,SAASC,IAPPL,EAAoBhE,GACpBiE,EAAiBjE,GACjBkE,EAAqBlE,GAGrBoE,EAAUE,KAAKC,IAAI,EAAGJ,EAAS/B,EAAUoC,QAM3C,IAAMC,EAAOrC,EAAUqC,KAAKC,KAAI,SAACC,GAAD,OAAO,kBAAC,EAAD,CAAetF,IAAKsF,EAAGjB,MAAOiB,OAC/DC,EAAYxC,EAAUyC,MAAMH,KAAI,SAACI,GAAD,OACpC,kBAAC,EAAD,CAAkBzF,IAAKyF,EAAGpB,MAAOoB,OAEnC,OACE,yBAAKlE,UAAU,gBACb,4BACEA,UAAWkD,EAAS,eAAiB,gBACrCnD,QAAS,kBAAMoD,GAAWD,KAE1B,wBAAIrD,GAAG,gBACJ2B,EAAU1B,KADb,KACqB0B,EAAUoC,MAD/B,KAGA,wBAAI/D,GAAG,YACL,uBAAGG,UAAU,gCAIL,IAAXkD,GACC,yBAAKrD,GAAG,iBACN,yBAAKA,GAAG,iBAAR,SACQ,6BADR,IACgBgE,GAEhB,wBAAIhE,GAAG,aAAP,UACS,6BADT,IACiBmE,GAEjB,4BAAQhE,UAAU,iBAAiBD,QAAS,kBAAM0D,MAAlD,gBCEKU,G,MArDG,SAAC1E,GAEjB,IAAM+B,EAAYnB,YAAe1B,GAC3ByF,EAAa/D,YAAetB,GAC5BwE,EAASlD,YAAezB,GACxByF,EAAqBhE,YAAexB,GACpCyF,EAAe5D,YAAkBxB,GAEjCqF,EAAUH,GAA0B,eAAiB5C,EAAU1B,KAE/D0E,EAAYhD,EAAUiD,UAAUC,MAAQL,EAAqBd,EAE7DoB,EAAYpD,EAAMC,GAClBoD,EAAiB1C,EACrBsC,EACAhD,EAAUiD,UAAUC,OAEtB,SAASG,EAAYC,GACnB,OAAQA,GACN,KAAK,EACHR,EAAa,OACb,MACF,IAAK,KAGL,IAAK,UACHA,EAAaQ,GACb,MACF,QACER,EAAa,QAGnB,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKzE,GAAG,mBACN,yBAAKA,GAAG,eACN,4BAAQG,UAAU,aAAaD,QAAS,kBAAM8E,EAAY,QACxD,uBAAG7E,UAAU,iBAAoB,IACjC,0BAAMA,UAAW4E,GAAiBJ,GAAkB,IACpD,uBAAGxE,UAAU,uCAEf,4BAAQA,UAAU,aAAaD,QAAS,kBAAM8E,EAAY,aACxD,uBAAG7E,UAAU,sBADf,IACyC2E,EAAY,IACnD,uBAAG3E,UAAU,wCAGjB,yBAAKH,GAAG,yBAAyB0E,OCxDnCQ,EAAY,SAACtF,GAAW,IAAD,EACOC,YAAeR,GADtB,mBACpB4F,EADoB,KACTR,EADS,KAErBhC,EAAO7C,EAAMqD,MACbkC,EAAgB1C,EAAKE,QAAQ,KAAM,KACnCyC,EAAsB,gBAAkB3C,EAC9C,OACE,4BACEtC,UAAWiF,EACXlF,QAAS,kBAAMuE,GAAcQ,KAE5BE,IAwBQE,EApBD,SAACzF,GACb,IAAM+B,EAAYnB,YAAe1B,GAOjC,OACE,6BACE,qCACA,yBAAKqB,UAAU,kBACb,yBAAKA,UAAU,cACb,uBAAGA,UAAU,aAVLmF,OAAOC,OAAO5D,EAAU6D,OAAOvB,KAAI,SAACwB,GAAD,OAC/C,kBAAC,EAAD,CAAW7G,IAAK6G,EAAGxC,MAAOwC,YClB1BC,EAAY,SAAC9F,GAAW,IAAD,EACOC,YAAeR,GADtB,mBACpB4F,EADoB,KACTR,EADS,KAErBkB,EAAQ/F,EAAMqD,MACd2C,EAAiBD,EAAMhD,QAAQ,KAAM,KACrCyC,EAAsB,gBAAkBO,EAC9C,OACE,4BACExF,UAAWiF,EACXlF,QAAS,kBAAMuE,GAAcQ,KAE5BW,IA0DQC,EAtDF,SAACjG,GACZ,IAAM+B,EAAYnB,YAAe1B,GAWjC,SAASgH,EAAY/B,GAInB,OAHauB,OAAOC,OAAO5D,EAAUoE,MAAMC,KAAKjC,IAAQE,KAAI,SAACwB,GAAD,OAC1D,kBAAC,EAAD,CAAW7G,IAAK6G,EAAGxC,MAAOwC,OAK9B,SAASQ,EAAelC,EAAOmC,EAAUC,GACvC,OACE,yBAAKhG,UAAU,cACb,yBAAKA,UAAU,qBACb,wBAAIA,UAAU,oBAAd,SAAwCgG,IAE1C,uBAAGhG,UAAU,aAAa2F,EAAY/B,IACtC,8BAIN,OACE,6BACE,yBAAK5D,UAAU,kBACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,qBACb,wBAAIA,UAAU,oBA/BlBwB,EAAUoE,MAAM/B,KAAKoC,QAAUzE,EAAUoE,MAAM/B,KAAKqC,OAC/C,qBACE1E,EAAUoE,MAAM/B,KAAKqC,OACvB,UACE1E,EAAUoE,MAAM/B,KAAKoC,OACvB,gBADF,IA6BD,uBAAGjG,UAAU,aAAa2F,EAAY,SACtC,8BAEDG,EAAe,MAAO,EAAG,KACzBA,EAAe,MAAO,EAAG,MACzBA,EAAe,QAAS,EAAG,OAC3BA,EAAe,OAAQ,EAAG,MAC1BA,EAAe,OAAQ,EAAG,KAC1BA,EAAe,MAAO,EAAG,MACzBA,EAAe,QAAS,EAAG,OAC3BA,EAAe,QAAS,EAAG,QAC3BA,EAAe,OAAQ,EAAG,S,QChEtBK,G,MAAQ,SAAC1G,GAAW,IACvB2G,EAA+B3G,EAA/B2G,QAASC,EAAsB5G,EAAtB4G,SAAaC,EADA,YACS7G,EADT,wBAW9B,OARA8G,qBAAU,WAGR,OAFAC,SAASC,KAAKzC,UAAU0C,IAAI,YAErB,WACLF,SAASC,KAAKzC,UAAU2C,OAAO,eAEhC,IAGD,uCAAK3G,UAAU,SAAYsG,GACzB,4BAAQtG,UAAU,oBAAoBD,QAASqG,GAA/C,KAGCC,KCdDO,EAAuB,SAACnH,GAAW,IAAD,EACJC,YAAeR,GADX,mBAC/B4F,EAD+B,KACpBR,EADoB,KAEhCuC,EAAUpH,EAAMqD,MAChBgE,EAAmBD,EAAQrE,QAAQ,KAAM,KACzCyC,EAAsB,gBAAkB4B,EAC9C,OACE,4BACE7G,UAAWiF,EACXlF,QAAS,kBAAMuE,GAAcQ,KAE5BgC,IAqBQC,EAjBS,SAACtH,GACvB,IAAM+B,EAAYnB,YAAe1B,GAOjC,OACE,yBAAKqB,UAAU,kBACb,yBAAKA,UAAU,cACb,uBAAGA,UAAU,aARCmF,OAAOC,OACvB5D,EAAUwF,mBAAmBC,QAC7BnD,KAAI,SAACwB,GAAD,OAAO,kBAAC,EAAD,CAAsB7G,IAAK6G,EAAGxC,MAAOwC,WCpBzC4B,G,MAAe,SAACzH,GAAW,IAEpC0H,EAIE1H,EAJF0H,UACAC,EAGE3H,EAHF2H,aACAC,EAEE5H,EAFF4H,aACAC,EACE7H,EADF6H,sBAEF,OACE,oCACE,4BACEzH,GAAG,YACHG,UAAU,qBACVD,QAAS,kBAAMsH,EAAaF,EAAW,YAHzC,mBAOkBI,IAAjBH,GACC,6BAAME,EAAsBF,OAKvBI,EAAgB,SAAC/H,GAAW,IAErC0H,EAIE1H,EAJF0H,UACAC,EAGE3H,EAHF2H,aACAC,EAEE5H,EAFF4H,aACAC,EACE7H,EADF6H,sBAEF,OACE,oCACE,4BACEzH,GAAG,YACHG,UAAU,qBACVD,QAAS,kBAAMsH,EAAaF,EAAW,UAHzC,mBAOkBI,IAAjBH,GACC,6BAAME,EAAsBF,MAKvBK,EAAsB,SAAChI,GAAW,IAE3C0H,EAKE1H,EALF0H,UACAC,EAIE3H,EAJF2H,aACAC,EAGE5H,EAHF4H,aACAK,EAEEjI,EAFFiI,gBACAJ,EACE7H,EADF6H,sBAMF,OACE,oCACE,4BACEtH,UAAU,qBACVD,QAAS,kBARf,SAAsBoH,GACpBE,EAAaF,EAAW,eACxBO,EAAgBP,EAAW,QAMRQ,CAAaR,KAF9B,qBAKU,IANZ,KAOK,IACH,4BACEtH,GAAG,kBACHG,UAAU,qBACVD,QAAS,kBAAM2H,EAAgBP,EAAW,UAH5C,oBAOkBI,IAAjBH,GACC,6BAAME,EAAsBF,MAKvBQ,EAAmB,SAACnI,GAAW,IAExC0H,EAKE1H,EALF0H,UACAC,EAIE3H,EAJF2H,aACAC,EAGE5H,EAHF4H,aACAK,EAEEjI,EAFFiI,gBACAJ,EACE7H,EADF6H,sBAMF,OACE,oCACE,4BACEtH,UAAU,qBACVD,QAAS,kBARf,SAAsBoH,GACpBE,EAAaF,EAAW,eACxBO,EAAgBP,EAAW,QAMRQ,CAAaR,IAC5BU,UAAQ,GAHV,qBAOkBN,IAAjBH,GACC,6BAAME,EAAsBF,MClF9BU,G,MAAkB,SAACrI,GACvB,IAAMsI,EAAWtI,EAAMsI,SAcvB,IAAMC,EAbQvI,EAAMqD,MAaSN,QAAQ,KAAM,KAE3C,OACE,yBAAKxC,UAAU,mBAAmBH,GAAIkI,GACpC,0BAAM/H,UAAU,YAhBpB,SAAwBiI,GACtB,OAAQA,GACN,IAAK,QACL,IAAK,QACH,MAAO,GACT,IAAK,eACH,OAAO,wBAAIpI,GAAG,iBAChB,QAEE,OADuBoI,EAAMzF,QAAQ,WAAY,OAAO0F,QAQ9BC,CAAeJ,EAAW,KAAtD,KACA,0BAAM/H,UAAU,SAASgI,MA+JhBI,EA1JG,SAAC3I,GAEjB,IAAM4I,EAAahI,YAAe9B,GAC5BiD,EAAYnB,YAAe1B,GAHN,EAIOe,YAAeR,GAJtB,mBAIpB4F,EAJoB,KAITR,EAJS,KAKrB6C,EAAY9G,YAAelB,GALN,EAMqBO,YAC9CL,GAPyB,mBAMpBiJ,EANoB,KAMFlF,EANE,OASe1D,YAAeJ,GAT9B,mBASpBiJ,EAToB,KASLC,EATK,OAUuB9I,YAChDH,GAXyB,mBAUpBkJ,EAVoB,KAUDnF,EAVC,KAa3B,SAASoF,EAAcvB,EAAWwB,GAChC,IAAIC,EAAa,KAgBjB,MAf4B,WAAxBD,EACFxD,OAAO0D,KAAKrH,EAAUoE,MAAMkD,QAAQC,SAAQ,SAACnF,GACvCuB,OAAOC,OAAO5D,EAAUoE,MAAMkD,OAAOlF,IAAQoF,SAAS7B,KACxDyB,EAAahF,MAIjBuB,OAAO0D,KAAKrH,EAAUoE,MAAMqD,WAAWF,SAAQ,SAACnF,GAE5CuB,OAAOC,OAAO5D,EAAUoE,MAAMqD,UAAUrF,IAAQoF,SAAS7B,KAEzDyB,EAAahF,MAIZgF,EAET,IAAMxB,EAAeiB,EAAWS,OAAOI,MAAK,qBAAGpJ,OAAoBqH,KACnE,SAASG,EAAsB6B,GAO7B,OANkBhE,OAAO0D,KAAKM,GACGrF,KAAI,SAACrF,GACpC,OACE,kBAAC,EAAD,CAAiBA,IAAKA,EAAKsJ,SAAUtJ,EAAKqE,MAAOsE,EAAa3I,QAKpE,IAAM2K,EAAgB,CACpBC,KAAM,EACNC,IAAK,EACLC,IAAK,EACLC,MAAO,EACPC,KAAM,EACNC,KAAM,EACNC,IAAK,EACLC,MAAO,EACPC,MAAO,EACPC,KAAM,GAER,SAASzC,EAAaF,EAAWwB,GAC/B,IAAMoB,EAAcrB,EAAcvB,EAAWwB,GAEvC/E,EAAQwF,EAAcW,GAC5B,GAA4B,WAAxBpB,EAAkC,CACpC,IAAMqB,EAAW9I,EAAMoH,GACvB0B,EAASpG,GAAOqG,KAAK9C,GACrB/D,EAAoB4G,GACpB1F,EAAa,YACR,GAA4B,SAAxBqE,EAAgC,CACzC,IAAMqB,EAAW9I,EAAMqH,GACvByB,EAASpG,GAAOqG,KAAK9C,GACrBqB,EAAiBwB,GACjB1F,EAAa,WACR,CACL,IAAM0F,EAAW9I,EAAMuH,GACvBuB,EAASpG,GAAOqG,KAAK9C,GACrB7D,EAAqB0G,GACrB1F,EAAa,QAGjB,SAASoD,EAAgBP,EAAWwB,GAClC,IAAMoB,EAAcrB,EAAcvB,EAAWwB,GAEvC/E,EAAQwF,EAAcW,GAC5B,GAA4B,WAAxBpB,EAAkC,CACpC,IAAMqB,EAAW9I,EAAMoH,GACjB4B,EAAOF,EAASpG,GAAOuG,WAAU,SAAC7H,GACtC,OAAOA,IAAS6E,KAElB6C,EAASpG,GAAOwG,OAAOF,EAAM,GAC7B9G,EAAoB4G,QACf,GAA4B,SAAxBrB,EAAgC,CACzC,IAAMqB,EAAW9I,EAAMqH,GACjB2B,EAAOF,EAASpG,GAAOuG,WAAU,SAAC7H,GACtC,OAAOA,IAAS6E,KAElB6C,EAASpG,GAAOwG,OAAOF,EAAM,GAC7B1B,EAAiBwB,GACjB1F,EAAa,WACR,CACL,IAAM0F,EAAW9I,EAAMuH,GACjByB,EAAOF,EAASpG,GAAOuG,WAAU,SAAC7H,GACtC,OAAOA,IAAS6E,KAElB6C,EAASpG,GAAOwG,OAAOF,EAAM,GAC7B5G,EAAqB0G,IAiDzB,OACE,kBAAC,EAAD,CAAO5D,QAAS,kBAAM9B,EAAa,SA/CrC,SAAqBQ,GACnB,OAAQA,GACN,IAAK,OACH,OACE,kBAAC,EAAD,CACEqC,UAAWA,EACXE,aAAcA,EACdK,gBAAiBA,EACjBJ,sBAAuBA,EACvBF,aAAcA,IAGpB,IAAK,OACH,OACE,kBAAC,EAAD,CACED,UAAWA,EACXE,aAAcA,EACdK,gBAAiBA,EACjBJ,sBAAuBA,EACvBF,aAAcA,IAGpB,IAAK,cACH,OACE,kBAAC,EAAD,CACED,UAAWA,EACXE,aAAcA,EACdK,gBAAiBA,EACjBJ,sBAAuBA,EACvBF,aAAcA,IAGpB,IAAK,cACH,OACE,kBAAC,EAAD,CACED,UAAWA,EACXE,aAAcA,EACdK,gBAAiBA,EACjBJ,sBAAuBA,EACvBF,aAAcA,IAGpB,QACE,OAAO,MAIiCiD,CAAYvF,KC/I7CwF,G,MA/CO,SAAC7K,GACrB,IAAM+B,EAAYnB,YAAe1B,GAC3B4L,EAAM/I,EAAUgJ,UAAUC,MAAMC,SAChCC,EAAMnJ,EAAUgJ,UAAUC,MAAM5I,UAChC+I,EAAMpJ,EAAUgJ,UAAUC,MAAMI,aAChCC,EAAMtJ,EAAUgJ,UAAUC,MAAMM,aAChCC,EAAMxJ,EAAUgJ,UAAUC,MAAMQ,OAChCC,EAAM1J,EAAUgJ,UAAUC,MAAMU,SAChCC,EAASC,GAAgB7J,EAAW,YACpC8J,EAASD,GAAgB7J,EAAW,aACpC+J,EAASF,GAAgB7J,EAAW,gBACpCgK,EAASH,GAAgB7J,EAAW,gBACpCiK,EAASJ,GAAgB7J,EAAW,UACpCkK,EAASL,GAAgB7J,EAAW,YACpCmK,EAAgBjL,YAAkB3B,GACxC,SAAS6M,EAAmBnB,GAC1B,MAAwB,kBAAVA,EAAqBA,EAAQ,KAE7C,SAASoB,EAAsBC,EAAeC,EAAcC,GAC1D,OACE,uBAAGhM,UAAU,iBAEX,4BACEA,UAAU,cACVD,QAAS,kBAAM4L,EAAcM,GAAS,GAAID,EAAYF,MAFxD,QAMCA,EARH,KAQoBF,EAAmBG,GARvC,KAQwD,IACrDH,EAAmBI,IAI1B,OACE,oCACE,wBAAIhM,UAAU,uBAAd,aACA,yBAAKH,GAAG,wBACLgM,EAAsB,MAAOtB,EAAKa,GAClCS,EAAsB,MAAOlB,EAAKW,GAClCO,EAAsB,MAAOjB,EAAKW,GAClCM,EAAsB,MAAOf,EAAKU,GAClCK,EAAsB,MAAOb,EAAKS,GAClCI,EAAsB,MAAOX,EAAKQ,OC6B5BQ,G,MAnEM,SAACzM,GAAW,IAAD,EACFC,YAAeb,GADb,mBACvBsN,EADuB,KACfC,EADe,OAEF1M,YAAed,GAFb,mBAEvB2E,EAFuB,KAEfC,EAFe,KAGxBhC,EAAYnB,YAAe1B,GAC3B6F,EAAYhD,EAAUiD,UAAUC,MAAQyH,EAAS5I,EAJzB,EAKQN,mBAAS,GALjB,mBAKvBoJ,EALuB,KAKVC,EALU,OAMQrJ,mBAAS,GANjB,mBAMvBsJ,EANuB,KAMVC,EANU,KAOxB5H,EAAiB1C,EACrBsC,EACAhD,EAAUiD,UAAUC,OAKtB,SAAS+H,EAAmBC,GAEtBlJ,EADc,QAAlBkJ,EACcnJ,EAAS8I,EACT3I,KAAKC,IAAI,EAAGJ,EAAS8I,IACnCC,EAAe,GAKjB,SAASK,EAAmBD,GAEtBN,EADc,QAAlBM,EACcP,EAASI,EACT7I,KAAKC,IAAI,EAAGwI,EAASI,IAC/BJ,EAAS,GACXC,EAAU,GAEZI,EAAe,GAEjB,OACE,6BACE,wBAAIxM,UAAU,yBAAd,cACA,4BACE,wBAAIA,UAAW,aAAe4E,GAA9B,YAAwDJ,GACxD,uCACWjB,EAAQ,IACjB,yBAAKvD,UAAU,kBACb,2BACEA,UAAU,cACV6D,KAAK,SACLf,MAAOuJ,EACPO,SAjCZ,SAA4BC,GAC1BP,EAAeQ,OAAOD,EAAEE,OAAOjK,WAkCvB,4BAAQ/C,QAAS,kBAAM0M,EAAmB,SAA1C,KACA,4BAAQ1M,QAAS,kBAAM0M,EAAmB,cAA1C,OAGJ,0CACcN,EAAQ,IACpB,yBAAKnM,UAAU,kBACb,2BACEA,UAAU,cACV6D,KAAK,SACLf,MAAOyJ,EACPK,SArCZ,SAA4BC,GAC1BL,EAAeM,OAAOD,EAAEE,OAAOjK,WAsCvB,4BAAQ/C,QAAS,kBAAM4M,EAAmB,SAA1C,KACA,4BAAQ5M,QAAS,kBAAM4M,EAAmB,cAA1C,WCjENK,EAAiB,SAACvN,GACtB,IAAM6C,EAAO7C,EAAMqD,MACnB,OACE,wBAAI9C,UAAU,kBACXqC,EAAqBC,EAAK,IAD7B,KACoCA,EAAK,KAsB9B2K,GAlBQ,SAACxN,GACtB,IAAM+B,EAAYnB,YAAe1B,GAC3BgG,EAAYpD,EAAMC,GAClB0L,EAAkB/H,OAAOgI,QAC7B3L,EAAUE,YACVoC,KAAI,SAACxB,EAAM8K,GAAP,OAAa,kBAAC,EAAD,CAAgB3O,IAAK2O,EAAGtK,MAAOR,OAClD,OACE,oCACE,wBAAItC,UAAU,eAAd,eACA,6BACE,4BACE,wBAAIA,UAAU,aAAd,UAAkC2E,GACjCuI,MCpBLG,GAAuB,SAAC5N,GAC5B,IAEuBoE,EAFjBvB,EAAO7C,EAAMqD,MACbwK,EAAU7N,EAAM6N,QAOtB,OACE,wBAAItN,UAAU,wBACXqC,EAAqBC,EAAK,IAD7B,MAPqBuB,EAQ6BvB,EAAK,GAPhB,OAAnCgL,EAAQC,iBAAiB1J,GACpB,SAEFyJ,EAAQC,iBAAiB1J,MAiCrB2J,GAzBK,SAAC/N,GACnB,IACM6N,EADYjN,YAAe1B,GACP2O,QACpBG,EAAwBtI,OAAOgI,QACnCG,EAAQC,kBACRzJ,KAAI,SAACxB,EAAM8K,GAAP,OACJ,kBAAC,GAAD,CAAsB3O,IAAK2O,EAAGtK,MAAOR,EAAMgL,QAASA,OAEtD,OACE,oCACE,wBAAItN,UAAU,eAAd,WACA,6BACE,4BACE,iDACqBsN,EAAQI,gBAAgBC,OAD7C,KAEGL,EAAQI,gBAAgBE,UAE3B,iDAAuBN,EAAQO,iBAC/B,uBAAG7N,UAAU,aAAb,qBACCyN,MCzBLK,I,MAAa,SAACrO,GAClB,IAAM6E,EAAe5D,YAAkBxB,GACjC6O,EAAerN,YAAkBvB,GACjCqG,EAAQ/F,EAAMqD,MAEdmC,EAAsB,gBADLO,EAAMhD,QAAQ,MAAO,IAM5C,OACE,4BAAQxC,UAAWiF,EAAqBlF,QAAS,kBALnD,SAAqByF,GACnBlB,EAAa,QACbyJ,EAAavI,GAG0CwI,CAAYxI,KAChEA,KAKDyI,GAAY,SAACxO,GACjB,OAAO0F,OAAOC,OACZ3F,EAAM+B,UAAUoE,MAAMqD,UAAUxJ,EAAMmE,QACtCE,KAAI,SAACwB,GAAD,OAAO,kBAAC,GAAD,CAAY7G,IAAK6G,EAAGxC,MAAOwC,QAGpC4I,GAAa,SAACzO,GAClB,IAAM+B,EAAY/B,EAAM+B,UACxB,OAAIA,EAAUoE,MAAM/B,KAAKoC,QAAUzE,EAAUoE,MAAM/B,KAAKqC,OAC/C,qBACE1E,EAAUoE,MAAM/B,KAAKqC,OACvB,UACE1E,EAAUoE,MAAM/B,KAAKoC,OACvB,gBADF,GAKHkI,GAAS,CAAC,IAAK,KAAM,MAAO,KAAM,IAAK,KAAM,MAAO,OAAQ,MAC5DC,GAAa,CACjB,MACA,MACA,QACA,OACA,OACA,MACA,QACA,QACA,QAGIC,GAAiB,SAAC5O,GAAW,IACzBsG,EAAatG,EAAbsG,SACAvE,EAAc/B,EAAd+B,UACA8M,EAAoB7O,EAApB6O,gBACAhG,EAAqB7I,EAArB6I,iBACAC,EAAkB9I,EAAlB8I,cACFvC,EAAamI,GAAOpI,EAAW,GAC/BnC,EAAQwK,GAAWrI,EAAW,GAC9BwI,EACJC,GAAYhN,EAAW8M,EAAiB1K,EAAOmC,GAC/CuC,EAAiBvC,GAAU0I,OAC3BlG,EAAcxC,GAAU0I,OAC1B,OACE,yBAAKzO,UAAU,cACb,yBAAKA,UAAU,qBACb,wBAAIA,UAAU,oBAAd,SAAwCgG,GACxC,wBAAIhG,UAAU,mBAAmBuO,EAAjC,qBAEF,uBAAGvO,UAAU,aACX,kBAAC,GAAD,CAAW4D,MAAOA,EAAOpC,UAAWA,KAEtC,+BAoDSkN,GAhDI,SAACjP,GAClB,IAAM+B,EAAYnB,YAAe1B,GAC3B2P,EAAkBjO,YAAevB,GACjCc,EAAiBc,YAAkB1B,GACnCsJ,EAAmBjI,YAAehB,GAClCkJ,EAAgBlI,YAAef,GAC/BiP,EACJC,GAAYhN,EAAW8M,EAAiB,OAAQ,GAChDhG,EAAiB,GAAGmG,OACpBlG,EAAc,GAAGkG,OAEnB,OACE,oCACE,6BACE,4BAAQ5O,GAAG,iBAAiBE,QAAS,kBAAMH,EAAe,YACxD,uBAAGI,UAAU,uBAEf,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,qBACb,wBAAIH,GAAG,sBAAsBG,UAAU,oBACrC,kBAACkO,GAAD,CAAY1M,UAAWA,KAEzB,wBAAIxB,UAAU,mBACXuO,EADH,qBAIF,uBAAGvO,UAAU,aACX,kBAAC,GAAD,CAAW4D,MAAM,OAAOpC,UAAWA,KAErC,8BAED2M,GAAOrK,KAAI,SAAC6K,EAAGvB,GAAJ,OACV,kBAAC,GAAD,CACE3O,IAAK2O,EAAI,EACTrH,SAAUqH,EAAI,EACd5L,UAAWA,EACX8M,gBAAiBA,EACjBhG,iBAAkBA,EAClBC,cAAeA,WC9GvBqG,I,MAAmB,SAACnP,GACxB,IAAM+F,EAAQ/F,EAAMqD,MACdwB,EAAe5D,YAAkBxB,GACjC6O,EAAerN,YAAkBvB,GAEjC8F,EAAsB,yBADDO,EAAMhD,QAAQ,MAAO,IAMhD,OACE,4BAAQxC,UAAWiF,EAAqBlF,QAAS,kBALnD,SAAqByF,GACnBlB,EAAa,eACbyJ,EAAavI,GAG0CwI,CAAYxI,KAChEA,KAKDqJ,GAAoB,SAACpP,GAAW,IAC5BsG,EAAgCtG,EAAhCsG,SACR,OADwCtG,EAAtBgJ,kBACO1C,GAAUjC,KAAI,SAACgL,GAAD,OACrC,kBAAC,GAAD,CAAkBrQ,IAAKqQ,EAAKhM,MAAOgM,QAIjCC,GAAe,SAACtP,GACpB,IAAM+F,EAAQ/F,EAAMqD,MACdwB,EAAe5D,YAAkBxB,GACjC6O,EAAerN,YAAkBvB,GAEjC8F,EAAsB,gBADDO,EAAMhD,QAAQ,MAAO,IAMhD,OACE,4BAAQxC,UAAWiF,EAAqBlF,QAAS,kBALnD,SAAqByF,GACnBlB,EAAa,eACbyJ,EAAavI,GAG0CwI,CAAYxI,KAChEA,IAKDwJ,GAAgB,SAACvP,GAAW,IACxBsG,EAA4BtG,EAA5BsG,SACR,OADoCtG,EAAlB8I,cACGxC,GAAUjC,KAAI,SAACmL,GAAD,OACjC,kBAAC,GAAD,CAAcxQ,IAAKwQ,EAAInM,MAAOmM,QAI5BnB,GAAa,SAACrO,GAClB,IAAM6E,EAAe5D,YAAkBxB,GACjC6O,EAAerN,YAAkBvB,GACjCqG,EAAQ/F,EAAMqD,MAEdmC,EAAsB,gBADLO,EAAMhD,QAAQ,MAAO,IAM5C,OACE,4BAAQxC,UAAWiF,EAAqBlF,QAAS,kBALnD,SAAqByF,GACnBlB,EAAa,QACbyJ,EAAavI,GAG0CwI,CAAYxI,KAChEA,EAAQ,YAKT0J,GAAc,SAACzP,GACnB,OAAO0F,OAAOC,OAAO3F,EAAM+B,UAAUoE,MAAMkD,OAAOrJ,EAAMmE,QAAQE,KAAI,SAACwB,GAAD,OAClE,kBAAC,GAAD,CAAY7G,IAAK6G,EAAGxC,MAAOwC,QAIzB4I,GAAa,SAACzO,GAClB,IAAM+B,EAAY/B,EAAM+B,UACxB,OAAIA,EAAUoE,MAAM/B,KAAKoC,QAAUzE,EAAUoE,MAAM/B,KAAKqC,OAC/C,qBACE1E,EAAUoE,MAAM/B,KAAKqC,OACvB,UACE1E,EAAUoE,MAAM/B,KAAKoC,OACvB,gBADF,GAKHkI,GAAS,CAAC,IAAK,KAAM,MAAO,KAAM,IAAK,KAAM,MAAO,OAAQ,MAC5DC,GAAa,CACjB,MACA,MACA,QACA,OACA,OACA,MACA,QACA,QACA,QAGIC,GAAiB,SAAC5O,GAAW,IAE/BsG,EAMEtG,EANFsG,SACAvE,EAKE/B,EALF+B,UACA8M,EAIE7O,EAJF6O,gBACAhG,EAGE7I,EAHF6I,iBACAC,EAEE9I,EAFF8I,cACAE,EACEhJ,EADFgJ,kBAEIzC,EAAamI,GAAOpI,EAAW,GAC/BnC,EAAQwK,GAAWrI,EAAW,GAC9BwI,EACJC,GAAYhN,EAAW8M,EAAiB1K,EAAOmC,GAC/CuC,EAAiBvC,GAAU0I,OAC3BlG,EAAcxC,GAAU0I,OACxBhG,EAAkB1C,GAAU0I,OAC9B,OACE,yBAAKzO,UAAU,cACb,yBAAKA,UAAU,qBACb,wBAAIA,UAAU,oBAAd,SAAwCgG,GACxC,wBAAIhG,UAAU,mBAAmBuO,EAAjC,qBAEDhG,EAAcxC,GAAU0I,QAAU,GACnChG,EAAkB1C,GAAU0I,QAAU,EACpC,oCACE,uBAAGzO,UAAU,iBAAb,WACW,IACT,kBAAC,GAAD,CAAe+F,SAAUA,EAAUwC,cAAeA,IAClD,kBAAC,GAAD,CACExC,SAAUA,EACV0C,kBAAmBA,KAGvB,wBAAIzI,UAAU,aAEd,KACJ,uBAAGA,UAAU,aACX,kBAAC,GAAD,CAAa4D,MAAOA,EAAOpC,UAAWA,KAExC,+BAmES2N,GA9DA,SAAC1P,GACd,IAAM+B,EAAYnB,YAAe1B,GAC3B2P,EAAkBjO,YAAevB,GACjCc,EAAiBc,YAAkB1B,GACnCsJ,EAAmBjI,YAAehB,GAClCkJ,EAAgBlI,YAAef,GAC/BmJ,EAAoBpI,YAAed,GACnCgP,EACJ/M,EAAUoE,MAAMwJ,aAAa/F,KAC7Bf,EAAiB,GAAGmG,OACpBlG,EAAc,GAAGkG,OACjBhG,EAAkB,GAAGgG,OACvB,OACE,6BACE,4BAAQ5O,GAAG,mBAAmBE,QAAS,kBAAMH,EAAe,UAC1D,uBAAGI,UAAU,gBACb,uCAEF,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,qBACb,wBAAIH,GAAG,kBAAkBG,UAAU,oBACjC,kBAAC,GAAD,CAAYwB,UAAWA,KAEzB,wBAAIxB,UAAU,mBACXuO,EADH,qBAIDhG,EAAc,GAAGkG,QAAU,GAAKhG,EAAkB,GAAGgG,QAAU,EAC9D,oCACE,uBAAGzO,UAAU,iBAAb,WACW,IACT,kBAAC,GAAD,CAAe+F,SAAU,EAAGwC,cAAeA,IAC3C,kBAAC,GAAD,CACExC,SAAU,EACV0C,kBAAmBA,KAGvB,wBAAIzI,UAAU,aAEd,KACJ,uBAAGA,UAAU,aACX,kBAAC,GAAD,CAAa4D,MAAM,OAAOpC,UAAWA,KAEvC,8BAED2M,GAAOrK,KAAI,SAAC6K,EAAGvB,GAAJ,OACV,kBAAC,GAAD,CACE3O,IAAK2O,EAAI,EACTrH,SAAUqH,EAAI,EACd5L,UAAWA,EACX8M,gBAAiBA,EACjBhG,iBAAkBA,EAClBC,cAAeA,EACfE,kBAAmBA,UC5MzB4G,GAAwB,SAAC5P,GAAW,IAAD,EACLC,YAAeR,GADV,mBAChC4F,EADgC,KACrBR,EADqB,KAEjCuC,EAAUpH,EAAMqD,MAChBgE,EAAmBD,EAAQrE,QAAQ,KAAM,KACzCyC,EAAsB,gBAAkB4B,EAC9C,OACE,4BACE7G,UAAWiF,EACXlF,QAAS,kBAAMuE,GAAcQ,KAE5BgC,IAqBQwI,GAjBU,SAAC7P,GACxB,IAAM+B,EAAYnB,YAAe1B,GAOjC,OACE,yBAAKqB,UAAU,kBACb,yBAAKA,UAAU,cACb,uBAAGA,UAAU,aARCmF,OAAOC,OACvB5D,EAAUwF,mBAAmBuI,SAC7BzL,KAAI,SAACwB,GAAD,OAAO,kBAAC,GAAD,CAAuB7G,IAAK6G,EAAGxC,MAAOwC,W,SCjBjDkK,I,MAAiB,SAAC/P,GACtB,IAAM+B,EAAY/B,EAAM+B,UAClBmK,EAAgBjL,YAAkB3B,GAElC0Q,EAAShQ,EAAMgQ,OAEjBC,EAAiBD,EAAO,GAAGjN,QAAQ,KAAM,KAE7CkN,EAAiBA,EAAelN,QAAQ,SAAU,KAElD,IAEyBmN,EAFnBC,EAAcH,EAAO,GAS3B,OACE,4BACEzP,UAAS,kBATY2P,EASgBF,EAAO,GAR1CjO,EAAUqO,YAAYC,eAAeH,GAChC,cAEA,IAKE,YAA0CF,EAAO,IAC1D1P,QAAS,kBAAM4L,EAAcM,GAAS,GAAI2D,EAAaF,MAEtDA,EAJH,MAIqB,0BAAM1P,UAAU,eAAe4P,MA8BzCG,GA1BA,SAACtQ,GACd,IAAM+B,EAAYnB,YAAe1B,GAE7BqR,EAAc7K,OAAO0D,KAAKrH,EAAUiO,QAAQ3L,KAAI,SAAC6L,GACnD,MAAO,CAACA,EAAOnO,EAAUiO,OAAOE,OAG9BM,EAAmB9K,OAAO0D,KAAKrH,EAAUqO,aAAa/L,KAAI,SAAC6L,GAC7D,MAAO,CAACA,EAAOnO,EAAUqO,YAAYF,OAKjCO,EAFU,uBAAIF,GAAJ,aAAoBC,IAAkBE,OAExBrM,KAAI,SAACwB,GAAD,OAChC,kBAAC,GAAD,CAAgB7G,IAAK6G,EAAGmK,OAAQnK,EAAG9D,UAAWA,OAEhD,OACE,oCACE,wBAAI3B,GAAG,gBAAP,UACA,wBAAIA,GAAG,qBACL,yBAAKA,GAAG,iBAAiBqQ,MC2BlBE,I,MA7DK,SAAC3Q,GAAW,IAAD,EACKC,YAAeR,GADpB,mBACtB4F,EADsB,KACXR,EADW,KAEvB3E,EAAcU,YAAerB,GAkDnC,OACE,6BACE,6BACA,yBAAKa,GAAG,aA9BZ,SAAmBiF,GACjB,OAAQA,GACN,IAAK,OACL,IAAK,OACL,IAAK,cACL,IAAK,cACH,OAAO,kBAAC,EAAD,MACT,IAAK,KACH,OACE,kBAAC,EAAD,CAAOsB,QAAS,kBAAM9B,EAAa,SACjC,kBAAC,EAAD,MACA,kBAAC,EAAD,OAGN,IAAK,UACH,OACE,kBAAC,EAAD,CAAO8B,QAAS,kBAAM9B,EAAa,SACjC,kBAAC,GAAD,MACA,kBAAC,GAAD,OAGN,IAAK,MAEL,QACE,OAAO,MAMY+L,CAAUvL,IAC/B,yBAAKjF,GAAG,eArDZ,SAAsBS,GACpB,OAAQA,GACN,IAAK,SACH,OAAO,kBAAC,GAAD,MACT,IAAK,SACH,OAAO,kBAAC,EAAD,MACT,IAAK,UACH,OAAO,kBAAC,GAAD,MACT,IAAK,SACH,OAAO,kBAAC,GAAD,MACT,IAAK,YACH,OAAO,kBAAC,EAAD,MACT,IAAK,OACH,OAAO,kBAAC,EAAD,MACT,IAAK,OACH,OAAO,kBAAC,GAAD,MACT,IAAK,QACH,OAAO,kBAAC,EAAD,MACT,QACE,OAAO,kBAAC,GAAD,OAkCcgQ,CAAa3Q,OC9DnC,SAASsM,GAAShK,EAAMsO,EAAKC,GAClC,IAAMC,EAAO/M,KAAKgN,MAAMhN,KAAKiN,SAAW1O,EAAO,GAsB/C,OAXE,8BACE,0BAAMpC,GAAG,WAAW2Q,GACpB,yBAAK3Q,GAAG,eACN,0BAAMA,GAAG,YAAYG,UAb3B,SAAiCyQ,GAC/B,OAAa,IAATA,GAAuB,KAATxO,EACT,SACW,KAATwO,GAAwB,KAATxO,EACjB,YAEA,KAO2B2O,CAAwBH,IACrDA,GACK,IACR,0BAAM5Q,GAAG,YAAT,MAAwB0Q,EAAxB,OAEF,uBAAG1Q,GAAG,gBAAgB4Q,EAAOF,IAM5B,SAASlF,GAAgB7J,EAAWqF,GACzC,IAAM4D,EAAQjJ,EAAUgJ,UAAUC,MAAM5D,GACxC,OAAQ4D,EAAgB/G,KAAKgN,OAAOjG,EAAQ,IAAM,GAAlCA,EAEX,SAAS+D,GAAYhN,EAAW8M,EAAiB1K,EAAOmC,GAI7D,OAAOvE,EAAUoE,MAAMwJ,aAAaxL,GAHpC,SAA2BmC,GACzB,OAAOrC,KAAKmN,MAAMvC,GAAmBvI,EAAW,IAAM,GAEX+K,CAAkB/K,GAGjE,IAAMgL,GAAM,WACV,IAAMvP,EAAYnB,YAAe1B,GAQjC,OAPA4H,qBACE,WACEC,SAASwK,MAAQxP,EAAU1B,OAE7B,CAAC0B,IAID,oCACE,yBAAK3B,GAAG,cACN,6BACE,yBAAKA,GAAG,cACN,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,GAAD,UAwDKoR,GAjDC,WAAM,IAENC,EAAuBC,YAAO,mBAApCC,KACMC,EAAmBF,YAAO,eAAhCC,KAHY,EAKc1R,YAAef,GAL7B,mBAKb6C,EALa,KAKF8P,EALE,OAMgB5R,YAAenB,GAN/B,mBAMb8J,EANa,KAMDkJ,EANC,OAO0B7R,YAC5CZ,GARkB,mBAObwP,EAPa,KAOIkD,EAPJ,KA4CpB,OA9BAjL,qBACE,WACM2K,GACFI,EAAaJ,EAAmBO,WAAW,MAG/C,CAACP,EAAoBI,IAGvB/K,qBACE,WACM8K,GACFE,EAAc,CAAEzI,OAAQuI,EAAevI,WAG3C,CAACuI,EAAgBE,IAGnBhL,qBACE,WACM/E,GACFgQ,EACEnG,GAAgB7J,EAAWA,EAAUgJ,UAAUkH,YAIrD,CAAClQ,EAAWgQ,IAIRhQ,GAAa6G,GAAciG,EAE1B,kBAAC,GAAD,MAFmD,mDC7GxCqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,aChBS,ICFA,CACbjS,KAAM,aACN+D,KAAM,CAAC,QAAS,aAAc,YAAa,gBAAiB,YAC5DY,UAAW,CACTuN,QAAS,GACTtN,MAAO,KAEThD,WAAY,CACVC,MAAO,EACPK,OAAQ,EACRH,UAAW,GACXI,KAAM,EACNF,aAAc,EACdH,WAAY,EACZE,KAAM,GAERwL,QAAS,CACPI,gBAAiB,CACfC,OAAQ,GACRC,SAAU,wBAEZC,gBAAiB,GACjBN,iBAAkB,CAChB0E,KAAM,EACNC,KAAM,KACNC,YAAa,KACbC,KAAM,EACNC,MAAO,GAETC,MAAO,CACLC,UAAW,CACTC,KAAM,GACN5M,MAAO,EACP9D,KAAM,GAER2Q,OAAQ,CACND,KAAM,GACN5M,MAAO,EACP9D,KAAM,GAER4Q,KAAM,CACJF,KAAM,GACN5M,MAAO,EACP9D,KAAM,KAIZG,KAAM,SACN0Q,UAAW,cACXnI,UAAW,CACTC,MAAO,CACLC,SAAU,GACV7I,UAAW,GACXgJ,aAAc,KACdE,aAAc,GACdE,OAAQ,GACRE,SAAU,IAEZuG,QAAS,YAEXkB,MAAO,GACPhP,MAAO,GACPK,MAAO,CACL,cACA,gBACA,iBACA,iBACA,YACA,UACA,qBACA,iBAEFwL,OAAQ,CACNoD,QAAS,GACTC,MAAO,EACPC,cAAe,GACfC,cAAe,GACfC,KAAM,GACNC,KAAM,EACNC,OAAQ,EACRC,cAAe,GACfC,KAAM,GACNC,OAAQ,EACRC,KAAM,EACNC,SAAU,EACVC,KAAM,GACNC,SAAU,IAEZ7D,YAAa,CACX8D,SAAU,GACVC,MAAO,GACPC,aAAc,GACdC,gBAAiB,GACjBC,UAAW,GACXC,QAAS,GACTC,QAAS,EACTC,mBAAoB,EACpBC,KAAM,GACNC,WAAY,GACZC,iBAAkB,GAClBC,wBAAyB,GACzBC,mBAAoB,GACpBC,iBAAkB,EAClBC,WAAY,GACZC,eAAgB,GAChBC,gBAAiB,GACjBC,YAAa,GACbC,WAAY,GACZC,QAAS,GACTC,iBAAkB,IAEpB/N,mBAAoB,CAClBC,OAAQ,CACN,YACA,mBACA,wBACA,eAEFsI,QAAS,CAAC,mBAEZ3J,MAAO,CACLC,KAAM,CACJwD,KAAM,GACNC,IAAK,CAAC,cAAe,iBACrBC,IAAK,CAAC,iBAAkB,cACxBC,MAAO,CAAC,iBAAkB,iBAC1BC,KAAM,CAAC,aAAc,cACrBC,KAAM,CAAC,wBAAyB,iBAChCC,IAAK,CAAC,eACNC,MAAO,GACPC,MAAO,GACPC,KAAM,IAERkL,aAAa,EACbnR,KAAM,CACJoC,QAAQ,EACRC,QAAQ,GAEV4C,OAAQ,CACNO,KAAM,CACJ,UACA,cACA,cACA,eACA,YACA,UACA,QACA,aACA,cACA,UACA,iBACA,aACA,oBAEFC,IAAK,CACH,eACA,gBACA,gBACA,aACA,gBAEFC,IAAK,CACH,cACA,cACA,QACA,gBACA,iBAEFC,MAAO,CACL,cACA,WACA,oBACA,mBAEFC,KAAM,CAAC,mBAAoB,eAAgB,iBAAkB,aAC7DC,KAAM,CACJ,cACA,UACA,WACA,yBACA,cAEFC,IAAK,CACH,eACA,kBACA,iBACA,mBAEFC,MAAO,CAAC,kBAAmB,WAAY,uBACvCC,MAAO,CACL,uBACA,iBACA,0BACA,iBAEFC,KAAM,CACJ,oBACA,iCACA,kBAGJb,UAAW,CACTI,KAAM,CACJ,cACA,mBACA,YACA,aACA,iBACA,mBACA,UACA,UACA,aACA,iBACA,WACA,eACA,iBAEFC,IAAK,CAAC,OACNC,IAAK,CAAC,OACNC,MAAO,CAAC,SACRC,KAAM,CAAC,QACPC,KAAM,CAAC,QACPC,IAAK,CAAC,OACNC,MAAO,CAAC,SACRC,MAAO,CAAC,SACRC,KAAM,CAAC,SAETsF,aAAc,CACZ/F,KAAM,EACNC,IAAK,EACLC,IAAK,EACLC,MAAO,EACPC,KAAM,EACNC,KAAM,EACNC,IAAK,EACLC,MAAO,EACPC,MAAO,EACPC,KAAM,IAGVzE,MAAO,CACL,qBACA,gBACA,iBACA,+BCpPW,IACb,CACEvF,KAAM,UACN+D,KAAM,gBACND,MAAO,iCACPqR,WAAY,OACZC,YAAa,oBACbC,MAAO,SACPpI,OAAQ,4BACRqI,SAAU,gBACVC,YAAa,kCACbxH,gBAAiB,yBACjByH,YACE,onBAEJ,CACExV,KAAM,cACN+D,KAAM,YACND,MAAO,YACPqR,WAAY,OACZC,YAAa,oBACbC,MAAO,QACPI,OAAQ,oEACRH,SAAU,YACVC,YAAa,OACbxH,gBAAiB,KACjByH,YACE,q5BCvBC,WAAoD,IAAD,yDAAJ,GAAI,IAA7BE,mBAA6B,MAAf,OAAe,EACpDC,EAAS,IAAIC,KAAO,CACtBF,cAEAG,OAAQ,CACNnU,UAAWoU,KACXpQ,MAAOoQ,MAGTC,YAAa,CACXC,YAAaC,MAGfC,MAZsB,SAYhBP,GAEJhE,GAAW1I,SAAQ,SAAAkN,GAAI,OAAIR,EAAOS,OAAO,YAAaD,MACtDnN,GAAOC,SAAQ,SAAAvD,GAAK,OAAIiQ,EAAOS,OAAO,QAAS1Q,OAGjD2Q,OAlBsB,WAmBpBC,KAAKC,UAAY,MAIjBD,KAAKE,IAAI,eAAe,SAACC,GACvB,OAAOA,EAAO9E,WAAW+E,SAG3BJ,KAAKE,IAAI,WAAW,SAACC,GACnB,OAAOA,EAAOzN,OAAO0N,YCvB7BC,CAAW,CAAEjB,YAAa,gBAE1BkB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE9T,MAAO,CACL+T,QAAS,kBAAaC,MAAK,WAAL,aAAeC,MAAK,SAACC,GAAD,OAASA,EAAIC,aAGzD,kBAAC,GAAD,SAINzQ,SAAS0Q,eAAe,SL2GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBN,MAAK,SAAAO,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.41d8c0f5.chunk.js","sourcesContent":["import { atom } from \"recoil\";\n\nexport const compendiumState = atom({\n  key: \"compendiumState\",\n  default: null,\n});\n\nexport const characterState = atom({\n  key: \"characterState\",\n  default: null,\n});\n\nexport const damageState = atom({\n  key: \"damageState\",\n  default: 0,\n});\n\nexport const temporaryHitPointsState = atom({\n  key: \"temporaryHitPointsState\",\n  default: 0,\n});\n\nexport const primaryModifierState = atom({\n  key: \"primaryModifierState\",\n  default: null,\n});\n\nexport const diceRollState = atom({\n  key: \"diceRollState\",\n  default: \"\",\n});\nexport const mainContentState = atom({\n  key: \"mainContentState\",\n  default: \"Skills\",\n});\nexport const secondaryNavbarState = atom({\n  key: \"secondaryNavbarDisplayState\",\n  default: \"stats\",\n});\nexport const modalTypeState = atom({\n  key: \"modalTypeState\",\n  default: \"Off\",\n});\nexport const selectionState = atom({\n  key: \"selectionState\",\n  default: \"\",\n});\n\nexport const emptySpellsArray = [[], [], [], [], [], [], [], [], [], []];\nexport const innateSpellsCastState = atom({\n  key: \"innateSpellsCastState\",\n  default: emptySpellsArray,\n});\nexport const preppedSpellsState = atom({\n  key: \"preppedSpellsState\",\n  default: emptySpellsArray,\n});\nexport const preppedSpellsCastState = atom({\n  key: \"preppedSpellsCastState\",\n  default: emptySpellsArray,\n});\n","import React from \"react\";\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\n\nimport { mainContentState, secondaryNavbarState } from \"../../recoilState.js\";\nimport \"./Navbars.css\";\n\nconst NavButtonCodeBlock = (props) => {\n  const [mainContent, setMainContent] = useRecoilState(mainContentState);\n  return (\n    <button\n      id={props.name}\n      onClick={() => setMainContent(props.name)}\n      className={\n        mainContent === props.name ? \"navbarItemsOn\" : \"navbarItemsOff\"\n      }\n    >\n      {props.name}\n    </button>\n  );\n};\n\nconst AbilitySelector = () => {\n  return (\n    <div>\n      <ul id=\"abilitySelector\" className=\"navbarContainer\">\n        <NavButtonCodeBlock name={\"Spells\"} />\n        <NavButtonCodeBlock name={\"Abilities\"} />\n        <NavButtonCodeBlock name={\"SLAs\"} />\n      </ul>\n    </div>\n  );\n};\n\nconst StatsSelector = () => {\n  return (\n    <div>\n      <ul id=\"statsSelector\" className=\"navbarContainer\">\n        <NavButtonCodeBlock name={\"Skills\"} />\n        <NavButtonCodeBlock name={\"Passive\"} />\n      </ul>\n    </div>\n  );\n};\n\nconst SecondaryNavbar = (props) => {\n  const secondaryNavbar = useRecoilValue(secondaryNavbarState);\n  function navSwitch(display) {\n    switch (display) {\n      case \"stats\":\n        return <StatsSelector />;\n      case \"ability\":\n        return <AbilitySelector />;\n      case null:\n        return null;\n      default:\n        return <StatsSelector />;\n    }\n  }\n  return (\n    <>\n      <div id=\"secondaryNavbar\">{navSwitch(secondaryNavbar)}</div>\n    </>\n  );\n};\nconst PrimaryNavbar = (props) => {\n  const [secondaryNavbar, setSecondaryNavbar] = useRecoilState(\n    secondaryNavbarState\n  );\n  const setMainContent = useSetRecoilState(mainContentState);\n  const statIcon = <i id=\"statIcon\" className=\"far fa-chart-bar\"></i>;\n  const abilityIcon = <i id=\"spellIcon\" className=\"fas fa-hand-sparkles\"></i>;\n  const itemIcon = <i id=\"itemIcon\" className=\"fas fa-scroll\"></i>;\n  function setBothDisplays(name, secondaryName) {\n    setSecondaryNavbar(name);\n    if (secondaryName !== null) {\n      setMainContent(secondaryName);\n    }\n  }\n  function navButtonCodeBlock(name, icon, secondaryName) {\n    return (\n      <button\n        id={name}\n        onClick={() => setBothDisplays(name, secondaryName)}\n        className={\n          secondaryNavbar === name ? \"navbarItemsOn\" : \"navbarItemsOff\"\n        }\n      >\n        {icon}\n      </button>\n    );\n  }\n  return (\n    <div>\n      <ul id=\"primaryNavbar\" className=\"navbarContainer\">\n        {navButtonCodeBlock(\"stats\", statIcon, \"Skills\")}\n        {navButtonCodeBlock(\"ability\", abilityIcon, \"Spells\")}\n        {navButtonCodeBlock(null, itemIcon, \"Items\")}\n      </ul>\n    </div>\n  );\n};\n\nexport { PrimaryNavbar, SecondaryNavbar };\n","export function clone(object) {\n  return JSON.parse(JSON.stringify(object));\n}\nexport function getAC(character) {\n  const ac = character.armorClass;\n  return (\n    10 +\n    ac.armor +\n    ac.deflection +\n    ac.dexterity +\n    ac.misc +\n    ac.naturalArmor +\n    ac.shield +\n    ac.size\n  );\n}\nexport function textClassToGreenOrRed(current, expected) {\n  if (current > expected) {\n    return \"greenText\";\n  } else if (current < expected) {\n    return \"redText\";\n  } else {\n    return null;\n  }\n}\nexport function camelCaseToTitleCase(item) {\n  //add spaces between words\n  let string = item.replace(/[A-Z]/g, (x) => \" \" + x);\n  //capitalize first letter\n  string = string.charAt(0).toUpperCase() + string.slice(1);\n  return string;\n}\n","import React, { useState } from \"react\";\nimport { useSetRecoilState, useRecoilValue, useRecoilState } from \"recoil\";\n\nimport {\n  innateSpellsCastState,\n  preppedSpellsState,\n  preppedSpellsCastState,\n  emptySpellsArray,\n  characterState,\n  damageState,\n} from \"../../recoilState.js\";\nimport \"./TopComponent.css\";\n\nconst CharacterType = (props) => {\n  return <span>{props.value} / </span>;\n};\nconst CharacterClasses = (props) => {\n  return <li>{props.value}</li>;\n};\n\nconst TopComponent = (props) => {\n  const character = useRecoilValue(characterState);\n  const [toggle, setToggle] = useState(false);\n  const setInnateSpellsCast = useSetRecoilState(innateSpellsCastState);\n  const setpreppedSpells = useSetRecoilState(preppedSpellsState);\n  const setPreppedSpellsCast = useSetRecoilState(preppedSpellsCastState);\n  const [damage, setDamage] = useRecoilState(damageState);\n  function resetAllSpells() {\n    setInnateSpellsCast(emptySpellsArray);\n    setpreppedSpells(emptySpellsArray);\n    setPreppedSpellsCast(emptySpellsArray);\n  }\n  function healDamageOnRest() {\n    setDamage(Math.max(0, damage - character.level));\n  }\n  function fullRest() {\n    resetAllSpells();\n    healDamageOnRest();\n  }\n  const type = character.type.map((t) => <CharacterType key={t} value={t} />);\n  const classList = character.class.map((c) => (\n    <CharacterClasses key={c} value={c} />\n  ));\n  return (\n    <div className=\"topContainer\">\n      <button\n        className={toggle ? \"moreButtonOn\" : \"moreButtonOff\"}\n        onClick={() => setToggle(!toggle)}\n      >\n        <h1 id=\"nameAndLevel\">\n          {character.name} ({character.level})\n        </h1>\n        <em id=\"moreLess\">\n          <i className=\"fas fa-angle-double-down\"></i>\n        </em>\n      </button>\n\n      {toggle === true && (\n        <div id=\"characterInfo\">\n          <div id=\"characterType\">\n            type: <br /> {type}\n          </div>\n          <ul id=\"classList\">\n            class: <br /> {classList}\n          </ul>\n          <button className=\"fullRestButton\" onClick={() => fullRest()}>\n            Full Rest\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TopComponent;\n","import React from \"react\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\n\nimport {\n  diceRollState,\n  characterState,\n  damageState,\n  temporaryHitPointsState,\n  modalTypeState,\n} from \"../../recoilState.js\";\nimport { getAC, textClassToGreenOrRed } from \"../../utilities/utilities\";\nimport TopComponent from \"../TopComponent/TopComponent.js\";\nimport \"./BasicInfo.css\";\n\nconst BasicInfo = (props) => {\n  //get the stuff\n  const character = useRecoilValue(characterState);\n  const rollResult = useRecoilValue(diceRollState);\n  const damage = useRecoilValue(damageState);\n  const temporaryHitPoints = useRecoilValue(temporaryHitPointsState);\n  const setModalType = useSetRecoilState(modalTypeState);\n  //starts as welcome, changes to dice roll\n  const welcome = rollResult ? rollResult : \"Good Luck,\\n\" + character.name;\n  //store HitPoints in variable\n  const currentHP = character.hitPoints.total + temporaryHitPoints - damage;\n  //imported from utilities\n  const currentAC = getAC(character);\n  const textColorClass = textClassToGreenOrRed(\n    currentHP,\n    character.hitPoints.total\n  );\n  function toggleModal(modalType) {\n    switch (modalType) {\n      case !\"Off\":\n        setModalType(\"Off\");\n        break;\n      case \"HP\":\n        setModalType(modalType);\n        break;\n      case \"Defense\":\n        setModalType(modalType);\n        break;\n      default:\n        setModalType(\"Off\");\n    }\n  }\n  return (\n    <div>\n      <TopComponent />\n      <div id=\"HPACDiceWrapper\">\n        <div id=\"hpacWrapper\">\n          <button className=\"HPACButton\" onClick={() => toggleModal(\"HP\")}>\n            <i className=\"fas fa-heart\"></i>{\" \"}\n            <span className={textColorClass}>{currentHP}</span>{\" \"}\n            <i className=\"fas fa-angle-double-down HPACMore\"></i>\n          </button>\n          <button className=\"HPACButton\" onClick={() => toggleModal(\"Defense\")}>\n            <i className=\"fas fa-shield-alt\"></i> {currentAC + \" \"}\n            <i className=\"fas fa-angle-double-down HPACMore\"></i>\n          </button>\n        </div>\n        <div id=\"diceRollResultWrapper\">{welcome}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default BasicInfo;\n","import React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\n\nimport { modalTypeState, characterState } from \"../../recoilState.js\";\n\nconst ItemsHeld = (props) => {\n  const [modalType, setModalType] = useRecoilState(modalTypeState);\n  const item = props.value;\n  const formattedItem = item.replace(/_/g, \" \");\n  const buttonAndSpellClass = \"spellButtons \" + item;\n  return (\n    <button\n      className={buttonAndSpellClass}\n      onClick={() => setModalType(!modalType)}\n    >\n      {formattedItem}\n    </button>\n  );\n};\nconst Items = (props) => {\n  const character = useRecoilValue(characterState);\n  function displayItems() {\n    const items = Object.values(character.items).map((s) => (\n      <ItemsHeld key={s} value={s} />\n    ));\n    return items;\n  }\n  return (\n    <div>\n      <h1>Items</h1>\n      <div className=\"spellContainer\">\n        <div className=\"spellItems\">\n          <p className=\"spellList\">{displayItems()}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Items;\n","import React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\n\nimport { modalTypeState, characterState } from \"../../recoilState.js\";\n\nconst KnownSLAs = (props) => {\n  const [modalType, setModalType] = useRecoilState(modalTypeState);\n  const spell = props.value;\n  const formattedSpell = spell.replace(/_/g, \" \");\n  const buttonAndSpellClass = \"spellButtons \" + spell;\n  return (\n    <button\n      className={buttonAndSpellClass}\n      onClick={() => setModalType(!modalType)}\n    >\n      {formattedSpell}\n    </button>\n  );\n};\nconst SLAs = (props) => {\n  const character = useRecoilValue(characterState);\n  //cantrips or orisons? or both?\n  function casterType() {\n    if (character.magic.type.arcane && character.magic.type.divine) {\n      return \"Cantrips & Orisons\";\n    } else if (character.magic.type.divine) {\n      return \"Orisons\";\n    } else if (character.magic.type.arcane) {\n      return \"Cantrips\";\n    }\n  }\n  function displaySLAs(level) {\n    const slas = Object.values(character.magic.slas[level]).map((s) => (\n      <KnownSLAs key={s} value={s} />\n    ));\n    return slas;\n  }\n  //condense SLA code block into function\n  function spellCodeBlock(level, levelNum, levelRoman) {\n    return (\n      <div className=\"spellItems\">\n        <div className=\"spellLevelWrapper\">\n          <h2 className=\"spellLevelHeader\">Level {levelRoman}</h2>\n        </div>\n        <p className=\"spellList\">{displaySLAs(level)}</p>\n        <hr />\n      </div>\n    );\n  }\n  return (\n    <div>\n      <div className=\"spellContainer\">\n        <div className=\"spellItems\">\n          <div className=\"spellLevelWrapper\">\n            <h2 className=\"spellLevelHeader\">{casterType()}</h2>\n          </div>\n          <p className=\"spellList\">{displaySLAs(\"zero\")}</p>\n          <hr />\n        </div>\n        {spellCodeBlock(\"one\", 1, \"I\")}\n        {spellCodeBlock(\"two\", 2, \"II\")}\n        {spellCodeBlock(\"three\", 3, \"III\")}\n        {spellCodeBlock(\"four\", 4, \"IV\")}\n        {spellCodeBlock(\"five\", 5, \"V\")}\n        {spellCodeBlock(\"six\", 6, \"VI\")}\n        {spellCodeBlock(\"seven\", 7, \"VII\")}\n        {spellCodeBlock(\"eight\", 8, \"VIII\")}\n        {spellCodeBlock(\"nine\", 9, \"IX\")}\n      </div>\n    </div>\n  );\n};\n\nexport default SLAs;\n","import React, { useEffect } from \"react\";\nimport \"./Modal.css\";\n\nexport const Modal = (props) => {\n  const { onClose, children, ...rest } = props;\n\n  useEffect(function blockBodyScrolling() {\n    document.body.classList.add(\"noScroll\");\n\n    return () => {\n      document.body.classList.remove(\"noScroll\");\n    };\n  }, []);\n\n  return (\n    <div className=\"modal\" {...rest}>\n      <button className=\"modal_closeButton\" onClick={onClose}>\n        x\n      </button>\n      {children}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\n\nimport { modalTypeState, characterState } from \"../../recoilState.js\";\n\nconst KnownActiveAbilities = (props) => {\n  const [modalType, setModalType] = useRecoilState(modalTypeState);\n  const ability = props.value;\n  const formattedAbility = ability.replace(/_/g, \" \");\n  const buttonAndSpellClass = \"spellButtons \" + ability;\n  return (\n    <button\n      className={buttonAndSpellClass}\n      onClick={() => setModalType(!modalType)}\n    >\n      {formattedAbility}\n    </button>\n  );\n};\nconst ActiveAbilities = (props) => {\n  const character = useRecoilValue(characterState);\n  function displayAbilities() {\n    const abilities = Object.values(\n      character.characterAbilities.active\n    ).map((s) => <KnownActiveAbilities key={s} value={s} />);\n    return abilities;\n  }\n  return (\n    <div className=\"spellContainer\">\n      <div className=\"spellItems\">\n        <p className=\"spellList\">{displayAbilities()}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default ActiveAbilities;\n","import React from \"react\";\n\nimport \"./AllSpellInfo.css\";\n\nexport const CastingSpell = (props) => {\n  const {\n    selection,\n    matchedSpell,\n    addUsedSpell,\n    displayCompendiumInfo,\n  } = props;\n  return (\n    <>\n      <button\n        id=\"castSpell\"\n        className=\"confirmSpellButton\"\n        onClick={() => addUsedSpell(selection, \"innate\")}\n      >\n        Cast Spell\n      </button>\n      {matchedSpell !== undefined && (\n        <div>{displayCompendiumInfo(matchedSpell)}</div>\n      )}\n    </>\n  );\n};\nexport const PreppingSpell = (props) => {\n  const {\n    selection,\n    matchedSpell,\n    addUsedSpell,\n    displayCompendiumInfo,\n  } = props;\n  return (\n    <>\n      <button\n        id=\"prepSpell\"\n        className=\"confirmSpellButton\"\n        onClick={() => addUsedSpell(selection, \"prep\")}\n      >\n        Prep Spell\n      </button>\n      {matchedSpell !== undefined && (\n        <div>{displayCompendiumInfo(matchedSpell)}</div>\n      )}\n    </>\n  );\n};\nexport const CastingPreppedSpell = (props) => {\n  const {\n    selection,\n    matchedSpell,\n    addUsedSpell,\n    removeUsedSpell,\n    displayCompendiumInfo,\n  } = props;\n  function disableSpell(selection) {\n    addUsedSpell(selection, \"PreppedCast\");\n    removeUsedSpell(selection, \"prep\");\n  }\n  return (\n    <>\n      <button\n        className=\"confirmSpellButton\"\n        onClick={() => disableSpell(selection)}\n      >\n        Use Prepped Spell\n      </button>{\" \"}\n      ||{\" \"}\n      <button\n        id=\"removePrepSpell\"\n        className=\"confirmSpellButton\"\n        onClick={() => removeUsedSpell(selection, \"prep\")}\n      >\n        Cancel Prep\n      </button>\n      {matchedSpell !== undefined && (\n        <div>{displayCompendiumInfo(matchedSpell)}</div>\n      )}\n    </>\n  );\n};\nexport const UsedPreppedSpell = (props) => {\n  const {\n    selection,\n    matchedSpell,\n    addUsedSpell,\n    removeUsedSpell,\n    displayCompendiumInfo,\n  } = props;\n  function disableSpell(selection) {\n    addUsedSpell(selection, \"preppedCast\");\n    removeUsedSpell(selection, \"prep\");\n  }\n  return (\n    <>\n      <button\n        className=\"confirmSpellButton\"\n        onClick={() => disableSpell(selection)}\n        disabled\n      >\n        Already Used\n      </button>\n      {matchedSpell !== undefined && (\n        <div>{displayCompendiumInfo(matchedSpell)}</div>\n      )}\n    </>\n  );\n};\n","import React from \"react\";\nimport { useRecoilValue, useRecoilState } from \"recoil\";\n\nimport {\n  modalTypeState,\n  selectionState,\n  preppedSpellsState,\n  innateSpellsCastState,\n  preppedSpellsCastState,\n  characterState,\n  compendiumState,\n} from \"../../recoilState.js\";\nimport { clone } from \"../../utilities/utilities.js\";\nimport { Modal } from \"../Modal/Modal\";\nimport {\n  CastingSpell,\n  PreppingSpell,\n  CastingPreppedSpell,\n  UsedPreppedSpell,\n} from \"../Modal/AllSpellInfo/AllSpellInfo\";\nimport \"./SpellInfo.css\";\n\nconst CompendiumSpell = (props) => {\n  const property = props.property;\n  const value = props.value;\n  function formatProperty(input) {\n    switch (input) {\n      case \"name:\":\n      case \"type:\":\n        return \"\";\n      case \"description:\":\n        return <hr id=\"spellSheetHR\" />;\n      default:\n        const spacedProperty = input.replace(/([A-Z])/g, \" $1\").trim();\n        return spacedProperty;\n    }\n  }\n  const formattedValue = value.replace(/_/g, \" \");\n\n  return (\n    <div className=\"infoSheetContent\" id={property}>\n      <span className=\"property\">{formatProperty(property + \":\")} </span>\n      <span className=\"value\">{formattedValue}</span>\n    </div>\n  );\n};\n\nconst SpellInfo = (props) => {\n  //bring in react/recoil context\n  const compendium = useRecoilValue(compendiumState);\n  const character = useRecoilValue(characterState);\n  const [modalType, setModalType] = useRecoilState(modalTypeState);\n  const selection = useRecoilValue(selectionState);\n  const [innateSpellsCast, setInnateSpellsCast] = useRecoilState(\n    innateSpellsCastState\n  );\n  const [preppedSpells, setPreppedSpells] = useRecoilState(preppedSpellsState);\n  const [preppedSpellsCast, setPreppedSpellsCast] = useRecoilState(\n    preppedSpellsCastState\n  );\n  function getSpellLevel(selection, innatePrepOrPrepped) {\n    let foundLevel = null;\n    if (innatePrepOrPrepped === \"innate\") {\n      Object.keys(character.magic.spells).forEach((level) => {\n        if (Object.values(character.magic.spells[level]).includes(selection)) {\n          foundLevel = level;\n        }\n      });\n    } else {\n      Object.keys(character.magic.spellbook).forEach((level) => {\n        if (\n          Object.values(character.magic.spellbook[level]).includes(selection)\n        ) {\n          foundLevel = level;\n        }\n      });\n    }\n    return foundLevel;\n  }\n  const matchedSpell = compendium.spells.find(({ name }) => name === selection);\n  function displayCompendiumInfo(spellObject) {\n    const spellKeys = Object.keys(spellObject);\n    const compendiumInfo = spellKeys.map((key) => {\n      return (\n        <CompendiumSpell key={key} property={key} value={matchedSpell[key]} />\n      );\n    });\n    return compendiumInfo;\n  }\n  const lvlConversion = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  function addUsedSpell(selection, innatePrepOrPrepped) {\n    const levelString = getSpellLevel(selection, innatePrepOrPrepped);\n    //assign a number from string\n    const level = lvlConversion[levelString];\n    if (innatePrepOrPrepped === \"innate\") {\n      const newArray = clone(innateSpellsCast);\n      newArray[level].push(selection);\n      setInnateSpellsCast(newArray);\n      setModalType(\"Off\");\n    } else if (innatePrepOrPrepped === \"prep\") {\n      const newArray = clone(preppedSpells);\n      newArray[level].push(selection);\n      setPreppedSpells(newArray);\n      setModalType(\"Off\");\n    } else {\n      const newArray = clone(preppedSpellsCast);\n      newArray[level].push(selection);\n      setPreppedSpellsCast(newArray);\n      setModalType(\"Off\");\n    }\n  }\n  function removeUsedSpell(selection, innatePrepOrPrepped) {\n    const levelString = getSpellLevel(selection, innatePrepOrPrepped);\n    //assign a number from string\n    const level = lvlConversion[levelString];\n    if (innatePrepOrPrepped === \"innate\") {\n      const newArray = clone(innateSpellsCast);\n      const used = newArray[level].findIndex((item) => {\n        return item === selection;\n      });\n      newArray[level].splice(used, 1);\n      setInnateSpellsCast(newArray);\n    } else if (innatePrepOrPrepped === \"prep\") {\n      const newArray = clone(preppedSpells);\n      const used = newArray[level].findIndex((item) => {\n        return item === selection;\n      });\n      newArray[level].splice(used, 1);\n      setPreppedSpells(newArray);\n      setModalType(\"Off\");\n    } else {\n      const newArray = clone(preppedSpellsCast);\n      const used = newArray[level].findIndex((item) => {\n        return item === selection;\n      });\n      newArray[level].splice(used, 1);\n      setPreppedSpellsCast(newArray);\n    }\n  }\n  function chooseModal(modalType) {\n    switch (modalType) {\n      case \"Prep\":\n        return (\n          <PreppingSpell\n            selection={selection}\n            addUsedSpell={addUsedSpell}\n            removeUsedSpell={removeUsedSpell}\n            displayCompendiumInfo={displayCompendiumInfo}\n            matchedSpell={matchedSpell}\n          />\n        );\n      case \"Cast\":\n        return (\n          <CastingSpell\n            selection={selection}\n            addUsedSpell={addUsedSpell}\n            removeUsedSpell={removeUsedSpell}\n            displayCompendiumInfo={displayCompendiumInfo}\n            matchedSpell={matchedSpell}\n          />\n        );\n      case \"CastPrepped\":\n        return (\n          <CastingPreppedSpell\n            selection={selection}\n            addUsedSpell={addUsedSpell}\n            removeUsedSpell={removeUsedSpell}\n            displayCompendiumInfo={displayCompendiumInfo}\n            matchedSpell={matchedSpell}\n          />\n        );\n      case \"UsedPrepped\":\n        return (\n          <UsedPreppedSpell\n            selection={selection}\n            addUsedSpell={addUsedSpell}\n            removeUsedSpell={removeUsedSpell}\n            displayCompendiumInfo={displayCompendiumInfo}\n            matchedSpell={matchedSpell}\n          />\n        );\n      default:\n        return null;\n    }\n  }\n  return (\n    <Modal onClose={() => setModalType(\"Off\")}>{chooseModal(modalType)}</Modal>\n  );\n};\n\nexport default SpellInfo;\n","import React from \"react\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\n\nimport { characterState, diceRollState } from \"../../../recoilState\";\nimport { abilityModifier, rollDice } from \"../../dnd\";\nimport \"./AbilityScores.css\";\n\nconst AbilityScores = (props) => {\n  const character = useRecoilValue(characterState);\n  const str = character.abilities.score.strength;\n  const dex = character.abilities.score.dexterity;\n  const con = character.abilities.score.constitution;\n  const int = character.abilities.score.intelligence;\n  const wis = character.abilities.score.wisdom;\n  const cha = character.abilities.score.charisma;\n  const strMod = abilityModifier(character, \"strength\");\n  const dexMod = abilityModifier(character, \"dexterity\");\n  const conMod = abilityModifier(character, \"constitution\");\n  const intMod = abilityModifier(character, \"intelligence\");\n  const wisMod = abilityModifier(character, \"wisdom\");\n  const chaMod = abilityModifier(character, \"charisma\");\n  const setRollResult = useSetRecoilState(diceRollState);\n  function renderAbilityScore(score) {\n    return typeof score === \"number\" ? score : \"--\";\n  }\n  function abilityScoreCodeBlock(abilityString, abilityScore, abilityMod) {\n    return (\n      <p className=\"abilityScores\">\n        {/*button appears on same line*/}\n        <button\n          className=\"rollAbility\"\n          onClick={() => setRollResult(rollDice(20, abilityMod, abilityString))}\n        >\n          roll\n        </button>\n        {abilityString}: {renderAbilityScore(abilityScore)} |{\" \"}\n        {renderAbilityScore(abilityMod)}\n      </p>\n    );\n  }\n  return (\n    <>\n      <h2 className=\"abilityScoresHeader\">Abilities</h2>\n      <div id=\"abilityScoresWrapper\">\n        {abilityScoreCodeBlock(\"STR\", str, strMod)}\n        {abilityScoreCodeBlock(\"DEX\", dex, dexMod)}\n        {abilityScoreCodeBlock(\"CON\", con, conMod)}\n        {abilityScoreCodeBlock(\"INT\", int, intMod)}\n        {abilityScoreCodeBlock(\"WIS\", wis, wisMod)}\n        {abilityScoreCodeBlock(\"CHA\", cha, chaMod)}\n      </div>\n    </>\n  );\n};\nexport default AbilityScores;\n","import React, { useState } from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\n\nimport {\n  characterState,\n  damageState,\n  temporaryHitPointsState,\n} from \"../../../recoilState\";\nimport { textClassToGreenOrRed } from \"../../../utilities/utilities\";\nimport \"./HitPointInfo.css\";\n\nconst HitPointInfo = (props) => {\n  const [tempHP, setTempHP] = useRecoilState(temporaryHitPointsState);\n  const [damage, setDamage] = useRecoilState(damageState);\n  const character = useRecoilValue(characterState);\n  const currentHP = character.hitPoints.total + tempHP - damage;\n  const [damageInput, setDamageInput] = useState(0);\n  const [tempHPInput, setTempHPInput] = useState(0);\n  const textColorClass = textClassToGreenOrRed(\n    currentHP,\n    character.hitPoints.total\n  );\n  function handleDamageChange(e) {\n    setDamageInput(Number(e.target.value));\n  }\n  function handleDamageSubmit(addOrSubtract) {\n    addOrSubtract === \"add\"\n      ? setDamage(damage + damageInput)\n      : setDamage(Math.max(0, damage - damageInput));\n    setDamageInput(0);\n  }\n  function handleTempHPChange(e) {\n    setTempHPInput(Number(e.target.value));\n  }\n  function handleTempHPSubmit(addOrSubtract) {\n    addOrSubtract === \"add\"\n      ? setTempHP(tempHP + tempHPInput)\n      : setTempHP(Math.max(0, tempHP - tempHPInput));\n    if (tempHP < 0) {\n      setTempHP(0);\n    }\n    setTempHPInput(0);\n  }\n  return (\n    <div>\n      <h2 className=\"HPACHeading HPHeading\">Hit Points</h2>\n      <ul>\n        <li className={\"currentHP \" + textColorClass}>Current: {currentHP}</li>\n        <li>\n          Damage: {damage}{\" \"}\n          <div className=\"inputAndButton\">\n            <input\n              className=\"numberInput\"\n              type=\"number\"\n              value={damageInput}\n              onChange={handleDamageChange}\n            />\n            <button onClick={() => handleDamageSubmit(\"add\")}>+</button>\n            <button onClick={() => handleDamageSubmit(\"subtract\")}>-</button>\n          </div>\n        </li>\n        <li>\n          Temporary: {tempHP}{\" \"}\n          <div className=\"inputAndButton\">\n            <input\n              className=\"numberInput\"\n              type=\"number\"\n              value={tempHPInput}\n              onChange={handleTempHPChange}\n            />\n            <button onClick={() => handleTempHPSubmit(\"add\")}>+</button>\n            <button onClick={() => handleTempHPSubmit(\"subtract\")}>-</button>\n          </div>\n        </li>\n      </ul>\n    </div>\n  );\n};\nexport default HitPointInfo;\n","import React from \"react\";\nimport { useRecoilValue } from \"recoil\";\n\nimport { characterState } from \"../../../recoilState\";\nimport { camelCaseToTitleCase, getAC } from \"../../../utilities/utilities\";\n\nconst ArmorClassItem = (props) => {\n  const item = props.value;\n  return (\n    <li className=\"armorClassItem\">\n      {camelCaseToTitleCase(item[0])}: {item[1]}\n    </li>\n  );\n};\nconst ArmorClassInfo = (props) => {\n  const character = useRecoilValue(characterState);\n  const currentAC = getAC(character);\n  const armorClassItems = Object.entries(\n    character.armorClass\n  ).map((item, i) => <ArmorClassItem key={i} value={item} />);\n  return (\n    <>\n      <h2 className=\"HPACHeading\">Armor Class</h2>\n      <div>\n        <ul>\n          <li className=\"currentAC\">Total: {currentAC}</li>\n          {armorClassItems}\n        </ul>\n      </div>\n    </>\n  );\n};\nexport default ArmorClassInfo;\n","import React from \"react\";\nimport { useRecoilValue } from \"recoil\";\n\nimport { characterState } from \"../../../recoilState\";\nimport { camelCaseToTitleCase } from \"../../../utilities/utilities\";\n\nconst EnergyResistanceItem = (props) => {\n  const item = props.value;\n  const defense = props.defense;\n  function getResistance(type) {\n    if (defense.energyResistance[type] === null) {\n      return \"Immune\";\n    }\n    return defense.energyResistance[type];\n  }\n  return (\n    <li className=\"energyResistanceItem\">\n      {camelCaseToTitleCase(item[0])}: {getResistance(item[0])}\n    </li>\n  );\n};\nconst DefenseInfo = (props) => {\n  const character = useRecoilValue(characterState);\n  const defense = character.defense;\n  const energyResistanceItems = Object.entries(\n    defense.energyResistance\n  ).map((item, i) => (\n    <EnergyResistanceItem key={i} value={item} defense={defense} />\n  ));\n  return (\n    <>\n      <h2 className=\"HPACHeading\">Defense</h2>\n      <div>\n        <ul>\n          <li>\n            Damage Reduction: {defense.damageReduction.amount} /\n            {defense.damageReduction.weakness}\n          </li>\n          <li>Spell Resistance: {defense.spellResistance}</li>\n          <p className=\"underline\">Energy Resistance</p>\n          {energyResistanceItems}\n        </ul>\n      </div>\n    </>\n  );\n};\nexport default DefenseInfo;\n","import React from \"react\";\nimport { useSetRecoilState, useRecoilValue } from \"recoil\";\n\nimport {\n  mainContentState,\n  modalTypeState,\n  selectionState,\n  innateSpellsCastState,\n  preppedSpellsState,\n  primaryModifierState,\n  characterState,\n} from \"../../recoilState.js\";\nimport { totalSpells } from \"../dnd.js\";\nimport \"./PrepSpells.css\";\n\nconst KnownSpell = (props) => {\n  const setModalType = useSetRecoilState(modalTypeState);\n  const setSelection = useSetRecoilState(selectionState);\n  const spell = props.value;\n  const formattedClass = spell.replace(/\\W/g, \"\");\n  const buttonAndSpellClass = \"spellButtons \" + formattedClass;\n  function displayInfo(spell) {\n    setModalType(\"Prep\");\n    setSelection(spell);\n  }\n  return (\n    <button className={buttonAndSpellClass} onClick={() => displayInfo(spell)}>\n      {spell}\n    </button>\n  );\n};\n\nconst Spellbook = (props) => {\n  return Object.values(\n    props.character.magic.spellbook[props.level]\n  ).map((s) => <KnownSpell key={s} value={s} />);\n};\n\nconst CasterType = (props) => {\n  const character = props.character;\n  if (character.magic.type.arcane && character.magic.type.divine) {\n    return \"Cantrips & Orisons\";\n  } else if (character.magic.type.divine) {\n    return \"Orisons\";\n  } else if (character.magic.type.arcane) {\n    return \"Cantrips\";\n  }\n};\n\nconst romans = [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"];\nconst numStrings = [\n  \"one\",\n  \"two\",\n  \"three\",\n  \"four\",\n  \"five\",\n  \"six\",\n  \"seven\",\n  \"eight\",\n  \"nine\",\n];\n\nconst SpellCodeBlock = (props) => {\n  const { levelNum } = props;\n  const { character } = props;\n  const { primaryModifier } = props;\n  const { innateSpellsCast } = props;\n  const { preppedSpells } = props;\n  const levelRoman = romans[levelNum - 1];\n  const level = numStrings[levelNum - 1];\n  const remainingSpells =\n    totalSpells(character, primaryModifier, level, levelNum) -\n    innateSpellsCast[levelNum].length -\n    preppedSpells[levelNum].length;\n  return (\n    <div className=\"spellItems\">\n      <div className=\"spellLevelWrapper\">\n        <h2 className=\"spellLevelHeader\">Level {levelRoman}</h2>\n        <em className=\"remainingSpells\">{remainingSpells} remaining today</em>\n      </div>\n      <p className=\"spellList\">\n        <Spellbook level={level} character={character} />\n      </p>\n      <hr />\n    </div>\n  );\n};\nconst PrepSpells = (props) => {\n  const character = useRecoilValue(characterState);\n  const primaryModifier = useRecoilValue(primaryModifierState);\n  const setMainContent = useSetRecoilState(mainContentState);\n  const innateSpellsCast = useRecoilValue(innateSpellsCastState);\n  const preppedSpells = useRecoilValue(preppedSpellsState);\n  const remainingSpells =\n    totalSpells(character, primaryModifier, \"zero\", 0) -\n    innateSpellsCast[0].length -\n    preppedSpells[0].length;\n\n  return (\n    <>\n      <div>\n        <button id=\"returnToSpells\" onClick={() => setMainContent(\"Spells\")}>\n          <i className=\"fas fa-arrow-left\"></i>\n        </button>\n        <div className=\"spellContainer\">\n          <div className=\"spellItems\">\n            <div className=\"spellLevelWrapper\">\n              <h2 id=\"levelZeroHeaderPrep\" className=\"spellLevelHeader\">\n                <CasterType character={character} />\n              </h2>\n              <em className=\"remainingSpells\">\n                {remainingSpells} remaining today\n              </em>\n            </div>\n            <p className=\"spellList\">\n              <Spellbook level=\"zero\" character={character} />\n            </p>\n            <hr />\n          </div>\n          {romans.map((_, i) => (\n            <SpellCodeBlock\n              key={i + 1}\n              levelNum={i + 1}\n              character={character}\n              primaryModifier={primaryModifier}\n              innateSpellsCast={innateSpellsCast}\n              preppedSpells={preppedSpells}\n            />\n          ))}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default PrepSpells;\n","import React from \"react\";\nimport { useSetRecoilState, useRecoilValue } from \"recoil\";\n\nimport {\n  mainContentState,\n  modalTypeState,\n  selectionState,\n  innateSpellsCastState,\n  preppedSpellsState,\n  preppedSpellsCastState,\n  primaryModifierState,\n  characterState,\n} from \"../../recoilState.js\";\nimport { totalSpells } from \"../dnd.js\";\nimport \"./Spells.css\";\n\nconst PreppedSpellCast = (props) => {\n  const spell = props.value;\n  const setModalType = useSetRecoilState(modalTypeState);\n  const setSelection = useSetRecoilState(selectionState);\n  const formattedSpellName = spell.replace(/\\W/g, \"\");\n  const buttonAndSpellClass = \"spellButtons disabled \" + formattedSpellName;\n  function displayInfo(spell) {\n    setModalType(\"UsedPrepped\");\n    setSelection(spell);\n  }\n  return (\n    <button className={buttonAndSpellClass} onClick={() => displayInfo(spell)}>\n      {spell}\n    </button>\n  );\n};\n\nconst PreppedSpellsCast = (props) => {\n  const { levelNum, preppedSpellsCast } = props;\n  return preppedSpellsCast[levelNum].map((psc) => (\n    <PreppedSpellCast key={psc} value={psc} />\n  ));\n};\n\nconst PreppedSpell = (props) => {\n  const spell = props.value;\n  const setModalType = useSetRecoilState(modalTypeState);\n  const setSelection = useSetRecoilState(selectionState);\n  const formattedSpellName = spell.replace(/\\W/g, \"\");\n  const buttonAndSpellClass = \"spellButtons \" + formattedSpellName;\n  function displayInfo(spell) {\n    setModalType(\"CastPrepped\");\n    setSelection(spell);\n  }\n  return (\n    <button className={buttonAndSpellClass} onClick={() => displayInfo(spell)}>\n      {spell}\n    </button>\n  );\n};\n\nconst PreppedSpells = (props) => {\n  const { levelNum, preppedSpells } = props;\n  return preppedSpells[levelNum].map((ps) => (\n    <PreppedSpell key={ps} value={ps} />\n  ));\n};\n\nconst KnownSpell = (props) => {\n  const setModalType = useSetRecoilState(modalTypeState);\n  const setSelection = useSetRecoilState(selectionState);\n  const spell = props.value;\n  const formattedClass = spell.replace(/\\W/g, \"\");\n  const buttonAndSpellClass = \"spellButtons \" + formattedClass;\n  function displayInfo(spell) {\n    setModalType(\"Cast\");\n    setSelection(spell);\n  }\n  return (\n    <button className={buttonAndSpellClass} onClick={() => displayInfo(spell)}>\n      {spell + \" \\u221e\"}\n    </button>\n  );\n};\n\nconst KnownSpells = (props) => {\n  return Object.values(props.character.magic.spells[props.level]).map((s) => (\n    <KnownSpell key={s} value={s} />\n  ));\n};\n\nconst CasterType = (props) => {\n  const character = props.character;\n  if (character.magic.type.arcane && character.magic.type.divine) {\n    return \"Cantrips & Orisons\";\n  } else if (character.magic.type.divine) {\n    return \"Orisons\";\n  } else if (character.magic.type.arcane) {\n    return \"Cantrips\";\n  }\n};\n\nconst romans = [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"];\nconst numStrings = [\n  \"one\",\n  \"two\",\n  \"three\",\n  \"four\",\n  \"five\",\n  \"six\",\n  \"seven\",\n  \"eight\",\n  \"nine\",\n];\n\nconst SpellCodeBlock = (props) => {\n  const {\n    levelNum,\n    character,\n    primaryModifier,\n    innateSpellsCast,\n    preppedSpells,\n    preppedSpellsCast,\n  } = props;\n  const levelRoman = romans[levelNum - 1];\n  const level = numStrings[levelNum - 1];\n  const remainingSpells =\n    totalSpells(character, primaryModifier, level, levelNum) -\n    innateSpellsCast[levelNum].length -\n    preppedSpells[levelNum].length -\n    preppedSpellsCast[levelNum].length;\n  return (\n    <div className=\"spellItems\">\n      <div className=\"spellLevelWrapper\">\n        <h2 className=\"spellLevelHeader\">Level {levelRoman}</h2>\n        <em className=\"remainingSpells\">{remainingSpells} remaining today</em>\n      </div>\n      {preppedSpells[levelNum].length >= 1 ||\n      preppedSpellsCast[levelNum].length >= 1 ? (\n        <>\n          <p className=\"preppedSpells\">\n            Prepped:{\" \"}\n            <PreppedSpells levelNum={levelNum} preppedSpells={preppedSpells} />\n            <PreppedSpellsCast\n              levelNum={levelNum}\n              preppedSpellsCast={preppedSpellsCast}\n            />\n          </p>\n          <hr className=\"shortHR\" />\n        </>\n      ) : null}\n      <p className=\"spellList\">\n        <KnownSpells level={level} character={character} />\n      </p>\n      <hr />\n    </div>\n  );\n};\n\nconst Spells = (props) => {\n  const character = useRecoilValue(characterState);\n  const primaryModifier = useRecoilValue(primaryModifierState);\n  const setMainContent = useSetRecoilState(mainContentState);\n  const innateSpellsCast = useRecoilValue(innateSpellsCastState);\n  const preppedSpells = useRecoilValue(preppedSpellsState);\n  const preppedSpellsCast = useRecoilValue(preppedSpellsCastState);\n  const remainingSpells =\n    character.magic.spellsPerDay.zero -\n    innateSpellsCast[0].length -\n    preppedSpells[0].length -\n    preppedSpellsCast[0].length;\n  return (\n    <div>\n      <button id=\"prepSpellsButton\" onClick={() => setMainContent(\"Prep\")}>\n        <i className=\"fas fa-book\"></i>\n        <span>PREP</span>\n      </button>\n      <div className=\"spellContainer\">\n        <div className=\"spellItems\">\n          <div className=\"spellLevelWrapper\">\n            <h2 id=\"levelZeroHeader\" className=\"spellLevelHeader\">\n              <CasterType character={character} />\n            </h2>\n            <em className=\"remainingSpells\">\n              {remainingSpells} remaining today\n            </em>\n          </div>\n          {preppedSpells[0].length >= 1 || preppedSpellsCast[0].length >= 1 ? (\n            <>\n              <p className=\"preppedSpells\">\n                Prepped:{\" \"}\n                <PreppedSpells levelNum={0} preppedSpells={preppedSpells} />\n                <PreppedSpellsCast\n                  levelNum={0}\n                  preppedSpellsCast={preppedSpellsCast}\n                />\n              </p>\n              <hr className=\"shortHR\" />\n            </>\n          ) : null}\n          <p className=\"spellList\">\n            <KnownSpells level=\"zero\" character={character} />\n          </p>\n          <hr />\n        </div>\n        {romans.map((_, i) => (\n          <SpellCodeBlock\n            key={i + 1}\n            levelNum={i + 1}\n            character={character}\n            primaryModifier={primaryModifier}\n            innateSpellsCast={innateSpellsCast}\n            preppedSpells={preppedSpells}\n            preppedSpellsCast={preppedSpellsCast}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Spells;\n","import React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\n\nimport { modalTypeState, characterState } from \"../../recoilState.js\";\n\nconst KnownPassiveAbilities = (props) => {\n  const [modalType, setModalType] = useRecoilState(modalTypeState);\n  const ability = props.value;\n  const formattedAbility = ability.replace(/_/g, \" \");\n  const buttonAndSpellClass = \"spellButtons \" + ability;\n  return (\n    <button\n      className={buttonAndSpellClass}\n      onClick={() => setModalType(!modalType)}\n    >\n      {formattedAbility}\n    </button>\n  );\n};\nconst PassiveAbilities = (props) => {\n  const character = useRecoilValue(characterState);\n  function displayAbilities() {\n    const abilities = Object.values(\n      character.characterAbilities.passive\n    ).map((s) => <KnownPassiveAbilities key={s} value={s} />);\n    return abilities;\n  }\n  return (\n    <div className=\"spellContainer\">\n      <div className=\"spellItems\">\n        <p className=\"spellList\">{displayAbilities()}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default PassiveAbilities;\n","import React from \"react\";\nimport { useSetRecoilState, useRecoilValue } from \"recoil\";\n\nimport { diceRollState, characterState } from \"../../recoilState.js\";\nimport { rollDice } from \"../dnd.js\";\nimport \"./Skills.css\";\n\nconst SkillsListItem = (props) => {\n  const character = props.character;\n  const setRollResult = useSetRecoilState(diceRollState);\n  // store props to make code simpler\n  const skills = props.skills;\n  // replace underscore with space and store\n  let formattedSkill = skills[0].replace(/_/g, \" \");\n  // update variable replacing (Know)ledge with :\n  formattedSkill = formattedSkill.replace(/ledge/g, \":\");\n  // store skill points separately\n  const skillPoints = skills[1];\n  // confirm class skill to add css class\n  function findClassSkills(skill) {\n    if (character.classSkills.hasOwnProperty(skill)) {\n      return \"classSkills\";\n    } else {\n      return \"\";\n    }\n  }\n  return (\n    <button\n      className={`skills ${findClassSkills(skills[0])} ${skills[0]}`}\n      onClick={() => setRollResult(rollDice(20, skillPoints, formattedSkill))}\n    >\n      {formattedSkill} | <span className=\"skillPoints\">{skillPoints}</span>\n    </button>\n  );\n};\nconst Skills = (props) => {\n  const character = useRecoilValue(characterState);\n  //put character's skills into array as [key, value]\n  let skillsArray = Object.keys(character.skills).map((skill) => {\n    return [skill, character.skills[skill]];\n  });\n  // put character's class skills into array as [key, value]\n  let classSkillsArray = Object.keys(character.classSkills).map((skill) => {\n    return [skill, character.classSkills[skill]];\n  });\n  // combine both arrays into new array, sorted alphabetically\n  let allSkills = [...skillsArray, ...classSkillsArray].sort();\n  // pass skills to child component\n  const skillsBlock = allSkills.map((s) => (\n    <SkillsListItem key={s} skills={s} character={character} />\n  ));\n  return (\n    <>\n      <h1 id=\"skillsHeader\">Skills</h1>\n      <ul id=\"skillsListWrapper\">\n        <div id=\"skillsWrapper\">{skillsBlock}</div>\n      </ul>\n    </>\n  );\n};\n\nexport default Skills;\n","import React from \"react\";\nimport { useRecoilValue, useRecoilState } from \"recoil\";\n\nimport Items from \"../Items/Items.js\";\nimport SLAs from \"../SLAs/SLAs.js\";\nimport { Modal } from \"../Modal/Modal\";\nimport ActiveAbilities from \"../ActiveAbilities/ActiveAbilities.js\";\nimport SpellInfo from \"../SpellInfo/SpellInfo.js\";\nimport AbilityScores from \"../Modal/AbilityScores/AbilityScores\";\nimport HitPointInfo from \"../Modal/HitPointInfo/HitPointInfo\";\nimport ArmorClassInfo from \"../Modal/ArmorClassInfo/ArmorClassInfo\";\nimport DefenseInfo from \"../Modal/DefenseInfo/DefenseInfo\";\nimport PrepSpells from \"../PrepSpells/PrepSpells.js\";\nimport Spells from \"../Spells/Spells.js\";\nimport PassiveAbilities from \"../PassiveAbilities/PassiveAbilities.js\";\nimport Skills from \"../Skills/Skills.js\";\n\nimport { mainContentState, modalTypeState } from \"../../recoilState.js\";\n\nimport \"./MainDisplay.css\";\n\nconst MainDisplay = (props) => {\n  const [modalType, setModalType] = useRecoilState(modalTypeState);\n  const mainContent = useRecoilValue(mainContentState);\n  function screenSwitch(display) {\n    switch (display) {\n      case \"Skills\":\n        return <Skills />;\n      case \"Scores\":\n        return <AbilityScores />;\n      case \"Passive\":\n        return <PassiveAbilities />;\n      case \"Spells\":\n        return <Spells />;\n      case \"Abilities\":\n        return <ActiveAbilities />;\n      case \"SLAs\":\n        return <SLAs />;\n      case \"Prep\":\n        return <PrepSpells />;\n      case \"Items\":\n        return <Items />;\n      default:\n        return <Skills />;\n    }\n  }\n  function infoSheet(modalType) {\n    switch (modalType) {\n      case \"Cast\":\n      case \"Prep\":\n      case \"CastPrepped\":\n      case \"UsedPrepped\":\n        return <SpellInfo />;\n      case \"HP\":\n        return (\n          <Modal onClose={() => setModalType(\"Off\")}>\n            <HitPointInfo />\n            <AbilityScores />\n          </Modal>\n        );\n      case \"Defense\":\n        return (\n          <Modal onClose={() => setModalType(\"Off\")}>\n            <ArmorClassInfo />\n            <DefenseInfo />\n          </Modal>\n        );\n      case \"Off\":\n        return null;\n      default:\n        return null;\n    }\n  }\n  return (\n    <div>\n      <hr />\n      <div id=\"infoSheet\">{infoSheet(modalType)}</div>\n      <div id=\"mainContent\">{screenSwitch(mainContent)}</div>\n    </div>\n  );\n};\n\nexport default MainDisplay;\n","import React, { useEffect } from \"react\";\nimport useSWR from \"swr\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\n\nimport {\n  primaryModifierState,\n  characterState,\n  compendiumState,\n} from \"../recoilState.js\";\nimport * as Navbar from \"./Navbars/Navbars.js\";\nimport BasicInfo from \"./BasicInfo/BasicInfo.js\";\nimport MainDisplay from \"./MainDisplay/MainDisplay.js\";\n\nimport \"./dnd.css\";\n\nexport function rollDice(size, mod, use) {\n  const roll = Math.floor(Math.random() * size + 1);\n  function edgeRollClassAssignment(roll) {\n    if (roll === 1 && size === 20) {\n      return \"natOne\";\n    } else if (roll === 20 && size === 20) {\n      return \"natTwenty\";\n    } else {\n      return null;\n    }\n  }\n  const result = (\n    <span>\n      <span id=\"rollUse\">{use}</span>\n      <div id=\"rollTopLine\">\n        <span id=\"rollTotal\" className={edgeRollClassAssignment(roll)}>\n          {roll}\n        </span>{\" \"}\n        <span id=\"modTotal\"> + {mod} =</span>\n      </div>\n      <p id=\"rollModTotal\">{roll + mod}</p>\n    </span>\n  );\n  return result;\n}\n/******************************Character functions****************************/\nexport function abilityModifier(character, ability) {\n  const score = character.abilities.score[ability];\n  return !score ? score : Math.floor((score - 10) / 2);\n}\nexport function totalSpells(character, primaryModifier, level, levelNum) {\n  function bonusSpellsPerDay(levelNum) {\n    return Math.ceil((primaryModifier - (levelNum - 1)) / 4);\n  }\n  return character.magic.spellsPerDay[level] + bonusSpellsPerDay(levelNum);\n}\n/******************************Character functions****************************/\nconst App = () => {\n  const character = useRecoilValue(characterState);\n  useEffect(\n    function setDocTitle() {\n      document.title = character.name;\n    },\n    [character]\n  );\n\n  return (\n    <>\n      <div id=\"appWrapper\">\n        <div>\n          <div id=\"topWrapper\">\n            <BasicInfo />\n            <Navbar.PrimaryNavbar />\n            <Navbar.SecondaryNavbar />\n          </div>\n          <MainDisplay />\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst LoadApp = () => {\n  // Load data from the characters server endpoint\n  const { data: charactersResponse } = useSWR(\"/api/characters\");\n  const { data: spellsResponse } = useSWR(\"/api/spells\");\n\n  const [character, setCharacter] = useRecoilState(characterState);\n  const [compendium, setCompendium] = useRecoilState(compendiumState);\n  const [primaryModifier, setPrimaryModifier] = useRecoilState(\n    primaryModifierState\n  );\n\n  // Before the data is loaded, it will be `undefined`. So inside `useEffect`\n  // hooks below, make sure the data exists.\n\n  useEffect(\n    function setFirstCharacterFromServer() {\n      if (charactersResponse) {\n        setCharacter(charactersResponse.characters[0]);\n      }\n    },\n    [charactersResponse, setCharacter]\n  );\n\n  useEffect(\n    function setCompendiumFromServerSpells() {\n      if (spellsResponse) {\n        setCompendium({ spells: spellsResponse.spells });\n      }\n    },\n    [spellsResponse, setCompendium]\n  );\n\n  useEffect(\n    function setPrimaryModifierWhenCharacterChanges() {\n      if (character) {\n        setPrimaryModifier(\n          abilityModifier(character, character.abilities.primary)\n        );\n      }\n    },\n    [character, setPrimaryModifier]\n  );\n\n  // Wait until all data has been flushed through Recoil and values exist.\n  if (!(character && compendium && primaryModifier)) return <>Loading...</>;\n\n  return <App />;\n};\n\nexport default LoadApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import Arn from './Arn_Hachem'\n\nexport default [Arn]","export default {\n  name: \"Arn Hachem\",\n  type: [\"Human\", \"Sanctified\", \"Deathless\", \"Spellstitched\", \"Archlich\"],\n  hitPoints: {\n    dieSize: 12,\n    total: 321,\n  },\n  armorClass: {\n    armor: 5,\n    shield: 4,\n    dexterity: 12,\n    size: 0,\n    naturalArmor: 5,\n    deflection: 4,\n    misc: 0,\n  },\n  defense: {\n    damageReduction: {\n      amount: 15,\n      weakness: \"bludgeoning, chaotic\",\n    },\n    spellResistance: 27,\n    energyResistance: {\n      acid: 0,\n      cold: null,\n      electricity: null,\n      fire: 0,\n      sonic: 0,\n    },\n    saves: {\n      fortitude: {\n        base: 16,\n        magic: 0,\n        misc: 6,\n      },\n      reflex: {\n        base: 10,\n        magic: 0,\n        misc: 6,\n      },\n      will: {\n        base: 18,\n        magic: 7,\n        misc: 6,\n      },\n    },\n  },\n  size: \"Medium\",\n  alignment: \"Lawful-Good\",\n  abilities: {\n    score: {\n      strength: 18,\n      dexterity: 24,\n      constitution: null,\n      intelligence: 22,\n      wisdom: 17,\n      charisma: 35,\n    },\n    primary: \"charisma\",\n  },\n  speed: 40,\n  level: 20,\n  class: [\n    \"Sorcerer(1)\",\n    \"Mindtender(2)\",\n    \"Fleshwarper(2)\",\n    \"Malconvoker(8)\",\n    \"Binder(1)\",\n    \"Bard(1)\",\n    \"Master Of Masks(5)\",\n    \"Voidcaller(1)\",\n  ],\n  skills: {\n    Balance: 12,\n    Climb: 4,\n    Concentration: 27,\n    Escape_Artist: 12,\n    Hide: 25,\n    Jump: 4,\n    Listen: 4,\n    Move_Silently: 12,\n    Ride: 12,\n    Search: 6,\n    Spot: 4,\n    Survival: 4,\n    Swim: 12,\n    Use_Rope: 12,\n  },\n  classSkills: {\n    Appraise: 10,\n    Bluff: 41,\n    Craft_Tailor: 13,\n    Decipher_Script: 23,\n    Diplomacy: 18,\n    Diguise: 39,\n    Forgery: 6,\n    Gather_Information: 9,\n    Heal: 16,\n    Intimidate: 19,\n    Knowledge_Arcana: 26,\n    Knowledge_Dungeoneering: 14,\n    Knowledge_Religion: 16,\n    Knowledge_Planes: 8,\n    Perception: 19,\n    Perform_Acting: 36,\n    Perform_Dancing: 13,\n    SenseMotive: 21,\n    Spellcraft: 28,\n    Stealth: 28,\n    Use_Magic_Device: 12,\n  },\n  characterAbilities: {\n    active: [\n      \"Light_Ray\",\n      \"Paralyzing_Touch\",\n      \"Positive_Energy_Touch\",\n      \"Turn_Undead\",\n    ],\n    passive: [\"Aura_Of_Menace\"],\n  },\n  magic: {\n    slas: {\n      zero: \"\",\n      one: [\"Chill Touch\", \"Floating Disk\"],\n      two: [\"Command Undead\", \"Acid Arrow\"],\n      three: [\"Vampiric Touch\", \"Phantom Steed\"],\n      four: [\"Affliction\", \"Enervation\"],\n      five: [\"Mage's Faithful Hound\", \"Wall Of Force\"],\n      six: [\"Contingency\"],\n      seven: \"\",\n      eight: \"\",\n      nine: \"\",\n    },\n    spellcaster: true,\n    type: {\n      arcane: true,\n      divine: false,\n    },\n    spells: {\n      zero: [\n        \"Mending\",\n        \"Arcane Mark\",\n        \"Ghost Sound\",\n        \"Detect Magic\",\n        \"Mage Hand\",\n        \"Message\",\n        \"Light\",\n        \"Read Magic\",\n        \"Acid Splash\",\n        \"Lullaby\",\n        \"Know Direction\",\n        \"Open/Close\",\n        \"Prestidigitation\",\n      ],\n      one: [\n        \"Silent Image\",\n        \"Disguise Self\",\n        \"Magic Missile\",\n        \"Mage Armor\",\n        \"Charm Person\",\n      ],\n      two: [\n        \"Ghoul Touch\",\n        \"Arcane Lock\",\n        \"Knock\",\n        \"Alter Fortune\",\n        \"Scorching Ray\",\n      ],\n      three: [\n        \"Shrink Item\",\n        \"Tiny Hut\",\n        \"Ray Of Exhaustion\",\n        \"Explosive Runes\",\n      ],\n      four: [\"Resilient Sphere\", \"Create Fetch\", \"Dimension Door\", \"Polymorph\"],\n      five: [\n        \"Telekinesis\",\n        \"Sending\",\n        \"Passwall\",\n        \"Planar Binding, Lesser\",\n        \"Feeblemind\",\n      ],\n      six: [\n        \"Disintigrate\",\n        \"Freezing Sphere\",\n        \"Planar Binding\",\n        \"Permanent Image\",\n      ],\n      seven: [\"Teleport Object\", \"Stun Ray\", \"Waves Of Exhaustion\"],\n      eight: [\n        \"Polymorph Any Object\",\n        \"Horrid Wilting\",\n        \"Planar Binding, Greater\",\n        \"Last Judgment\",\n      ],\n      nine: [\n        \"Replicate Casting\",\n        \"Sphere Of Ultimate Destruction\",\n        \"Crushing Hand\",\n      ],\n    },\n    spellbook: {\n      zero: [\n        \"Arcane Mark\",\n        \"Prestidigitation\",\n        \"Mage Hand\",\n        \"Resistance\",\n        \"Disrupt Undead\",\n        \"Touch Of Fatigue\",\n        \"Mending\",\n        \"Message\",\n        \"Open/Close\",\n        \"Preserve Organ\",\n        \"No-Light\",\n        \"Slash Tongue\",\n        \"Silent Portal\",\n      ],\n      one: [\"one\"],\n      two: [\"two\"],\n      three: [\"three\"],\n      four: [\"four\"],\n      five: [\"five\"],\n      six: [\"six\"],\n      seven: [\"seven\"],\n      eight: [\"eight\"],\n      nine: [\"nine\"],\n    },\n    spellsPerDay: {\n      zero: 8,\n      one: 6,\n      two: 6,\n      three: 6,\n      four: 6,\n      five: 6,\n      six: 6,\n      seven: 6,\n      eight: 6,\n      nine: 6,\n    },\n  },\n  items: [\n    \"Mesmerist's Gloves\",\n    \"Nolzure's Orb\",\n    \"Vanisher Cloak\",\n    \"GateBreaker Ballista Bolt\",\n  ],\n};\n","export default [\n  {\n    name: \"Mending\",\n    type: \"Transmutation\",\n    level: \"Brd 0, Clr 0, Drd 0, Sor/Wiz 0\",\n    components: \"V, S\",\n    castingTime: \"1 standard action\",\n    range: \"10 ft.\",\n    target: \"One object of up to 1 lb.\",\n    duration: \"Instantaneous\",\n    savingThrow: \"Will negates (harmless, object)\",\n    spellResistance: \"Yes (harmless, object)\",\n    description:\n      \"Mending repairs small breaks or tears in objects (but not warps, such as might be caused by a warp wood spell). It will weld broken metallic objects such as a ring, a chain link, a medallion, or a slender dagger, providing but one break exists.\\n\\nCeramic or wooden objects with multiple breaks can be invisibly rejoined to be as strong as new. A hole in a leather sack or a wineskin is completely healed over by mending. The spell can repair a magic item, but the item’s magical abilities are not restored. The spell cannot mend broken magic rods, staffs, or wands, nor does it affect creatures (including constructs).\"\n  },\n  {\n    name: \"Arcane Mark\",\n    type: \"Universal\",\n    level: \"Sor/Wiz 0\",\n    components: \"V, S\",\n    castingTime: \"1 standard action\",\n    range: \"0 ft.\",\n    effect: \"One personal rune or mark, all of which must fit within 1 sq. ft.\",\n    duration: \"Permanent\",\n    savingThrow: \"None\",\n    spellResistance: \"No\",\n    description:\n      \"This spell allows you to inscribe your personal rune or mark, which can consist of no more than six characters. The writing can be visible or invisible. An arcane mark spell enables you to etch the rune upon any substance without harm to the material upon which it is placed. If an invisible mark is made, a detect magic spell causes it to glow and be visible, though not necessarily understandable.\\n\\nSee invisibility, true seeing, a gem of seeing, or a robe of eyes likewise allows the user to see an invisible arcane mark. A read magic spell reveals the words, if any. The mark cannot be dispelled, but it can be removed by the caster or by an erase spell.\\n\\nIf an arcane mark is placed on a living being, normal wear gradually causes the effect to fade in about a month.\\n\\nArcane mark must be cast on an object prior to casting instant summons on the same object (see that spell description for details).\"\n  }\n];\n","import { Server, Model, RestSerializer } from \"miragejs\"\nimport characters from './characters'\nimport spells from './spells'\n\nexport function makeServer({ environment = \"test\" } = {}) {\n  let server = new Server({\n    environment,\n\n    models: {\n      character: Model,\n      spell: Model,\n    },\n\n    serializers: {\n      application: RestSerializer\n    },\n\n    seeds(server) {\n      // set up all the starting data\n      characters.forEach(char => server.create(\"character\", char))\n      spells.forEach(spell => server.create(\"spell\", spell))\n    },\n\n    routes() {\n      this.namespace = \"api\"\n\n      // Here is where you add the server endpoints for your app:\n\n      this.get(\"/characters\", (schema) => {\n        return schema.characters.all()\n      })\n\n      this.get(\"/spells\", (schema) => {\n        return schema.spells.all()\n      })\n    },\n  })\n\n  return server\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { SWRConfig } from \"swr\";\nimport \"./components/dnd.css\";\nimport LoadApp from \"./components/dnd\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { makeServer } from \"./server\";\n\n// Whenever it is time for a real server, this should be removed.\nmakeServer({ environment: \"development\" });\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <SWRConfig\n        value={{\n          fetcher: (...args) => fetch(...args).then((res) => res.json()),\n        }}\n      >\n        <LoadApp />\n      </SWRConfig>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}